[
  {
    "seconds": 1,
    "text": "aee RENE_QUMGN, MY ~ Iapas_Totp m\nEXSLURER . § wanks Jesgn.md v % mhEm- [ esn a -\nREPEL_SETUP twws_ohwergn > reenes 2 B hwsw tegromd 0 S # (PROBLEM}), Clams Design Recloe  [Z1#8 2. Desgrr the Cli wiiwe 97_single_cless _oesign = [|\n> 00_soratch . 1 4 {{PROBLEM]} Class Uesign Recige\n> Of_imtin_sma_alt 2z\n7 0Z_testng_hdes 4 3 9 1. Vescxihe the Problem\n> 03_mngiomer. 4\n> 0A_single_met.. = § _fut or wrire che user story heve. Add ony slerifying noetes gou might hove.\n\n7 O5_dobugging 1 * s\n08 Singi .. 7 0% 2, Desigp the Clase Intarface\nv OZ single_clas... * 8\n“ iy p 9 _Include the initiolizer ond public wethods with all poraweters ond return\nvolues.\n@ chona_book U 10\nR ’ 1n *xuby T\n¥ phone_oesig . U 2\nB tasks_ousgm. U 13\nA 4 124 t::m\n& phone_book.. U 15 def tiiesalbeieme) & fimm 4% o wertny\n& wpue_balper.. U 1% m\n1spEC u 17 end |\nGemfito u 18\nGemfiletock” 19 deT thwindi e to(ceik) # bxmk AW kbl\n> aB.debugging.. + 20 ﬂm&ﬁm\n> OB MUNE_closs.. a2 B\n> 10_muiti_class.. » 22\n2 de3 LY\n24 son.\n25 m—%m Lm tose\nFL Q&\n27\nz - 1\n29\n20 M 3. Create Examplos gn Tests\n3N\n32 Kokt o i3t of cxompies of how thy closs will bLehave o diffwrent situations.\ni3\n3a by\n36 & EXANFLE\n36\n7 &1\n38 raainoer = Remindex|*Kay™)\n» TIMELINE 39 rwwinder romind me to( Ralk tYhe dog')\n"
  },
  {
    "seconds": 2,
    "text": "aee RENE_QUMGN, MY ~ Iapas_Totp m\nEXSLURER . ¥ wanks Jesgn.md U % mhEm- [ esn a -\nREPEL_SETUP twws_ohwegn > recnes 2 B hwsw teegromd 0 S # ((PROBLEM}), Clams Design Recloe  [Z1## 2. Desgrr the Cli wiiwe 97_single_cless _oesign » [|\n> 00_soratch . 1 4 {{PROBLEM]} Class Uesign Recipe\n> Of_imtin_sma_alt 2z\n7 DZ_testng_hdes 4 3 9 1. Vescxihe the Problem\n> 03_mngiomer. 4\n> 0A_single_met.. = § _fut or wrire che user story heve. Add ony slerifying noetes gou might hove.\n\n7 O5.dobugging 1 * s\n08 Singi ... 7 0% 2, Denigp the Clase Intarfice\nv OZ single_clas... * 8\n“ iy p 9 _Include the initiolizer ond public wethods with all poraweters ond return\nvolues.\n@ chona_book U 10\nR ’ 1n *xuby T\n¥ phone_oesig . U 2\nB tasks_ousgm. U 13\nA 4 124 mm\n@ phonaback. U 45 | et dirkeat bRkl enk) 4 imm A% 8 el\n& wpue_balper.. U 1% n\nrspEC v 17 o6\nGemfito u 18\nGemfteiock U 19 | deT SRR N n(2ANI0 @ bRk NN ERRL\n> 0B_dsbugging.. * 20 -H&“\n> OB MUNE_closs.. a2 B\n> 10_muiti_class.. » 22\nas tu\n24 ThYGes an axcepsyon 08\n25 m—%m Lm tose\nFL Q&\n27\n28 I\n29\n20 M 3. Create Examplos gn Tests\n3N\n32 Kokt o iyt of cxompies of how thy closs will bLehape o diffwrent situations._\ni3\n3a by\n36 & EXANFLE\n36\n7 &1\n38 raainoer = Remindex|*Kay™)\n» TIMELINE 39 rwwinder romind me to( Walk tYhe dog')\n"
  },
  {
    "seconds": 3,
    "text": "ase TREHE_QUMN,MA — 13RO 8\nEXSLURER . ¥ wnks designmd U mhEm- () esn a -\nREPEC_SETUP tes_odwan v 2 B s teagromd /S # ((PROBLEM}) Claws Desin Reclon 50 ## 2. Dexogrr the Cliow Imiirtee  @7_s{ngle_class, gesign ‘[[\n> 00_soratch . 1 4 {{PRUBLEM]} Class Design Recipe\n> Of_intin_sma_git 2\n7 DZ_testng_hdes 4 3 M9 1. Vescxihie the Problesm\n> 03_pnga_met. * 4\n> 0A_single_met.. » 5 _Put or wrire che user story nere. Add opy slarvifytng notes you mighc have.\n\n7 O5_dobugging 1 * s\n0 Hingi it o 7 0% 2, Denigp the Clase Intarfice\nv OZ single_clas... * 8\n“ iy p 9 _Include the initiolizer ond public wethods with all poraweters ond return\nvolues.\n@ chona_bock U 10\nv reciDus . n “* yuby -\n¥ phone_oesig U 12 I\nB tasks_ousgm. U 13\nVv Speo v 14\n& phone book.. U 15 % 5. Uradle Examnlbe 44 Torts\n& wpuc_batper.. U a6\nspec u 17 Wirbe i LLAL A7 ceemtbe: nf bodl Ebe Sldee el Defads Dv-difFenene sftidsimm.\nGemfito u 18\nGemfiletock” U 19 ruby\n> OB_debugging.. * 20 & Fzasri\n> 08, MmURi_closs.. » 21\n> 10_multi_cfass.. » 22 3 |\n23 < = s BT NemmndoeT| *Mav™)\n24 rominaoz somacs, iec-tol eaik \\ao gog )\n25 TONGES SzEmamn ;N s> gl ¥E gop. Mgl\nFL s\n27 w2\n28 Teminues = RemindeT( Asy )\n29 RS ToRELeRNANL ) * fods Jim o toak satc”\n20 P\n3N &3\n32 Toctouey = SoededaviT Key\ni3 Lefingrr, Seadng &y, fo) )\n3 perinoe segntl) ¢ =x 7 Ay \"\n15\n36\na7 Encats amnin erwple oy g fert. You con et to the ahaye WAST Oy yeu (W\n8\n» TIMELINE 39 WS, taplomdmt ﬂm Uahweddur\n"
  },
  {
    "seconds": 4,
    "text": "ace rasks_desion md — rapec_setup 08\nEXPLORER . ¥ wsks_designmd U B@mm - [B)ash 8 .-\n~ REPEC_SETUP laws_design > recipes + 8 fasks_Uesgromd O (5 # ((PROBLEM}) Class Design Recloe 7 (2 ## 2 Deaig ihe Class interface  @7_single_class_design -.]:|\n> 00_scratch . 1 & {{PROBLEM}} Class Design Recipe\n> O1_intro_snd_git 2\n> 02_lesting_bites # 3 8 1. Descyibe the Problem\n> 03_single_met... » 4\n> 04_single_met.. » 5 _Put or write the user story here. Add ony claorifying notes you might have.\n> 05_debugging_1 * 6\n> 0B:single_clas... * 7 e 2. Design the Class Intarface\nv 07_single_clas... * 8\n< iy d 9 _Include the initializer and public methods with all poraweters ond return\nB alonafiouk, U pr volues. _ -\nv recipes . 1 “*yruby\n® phone_desig... U 12\n¥ tasks_design.. U 13 .\nv spec ’ 14\n# phone_baok... U 15 ## 3. Create Examples as Tests\n& spec_helper... U 16\nTepec v 1?7 _Noke o list of examples of how the claoss will behauve in different situotions._\nGemlile u 18\nGemfiletock W 19 Tuby\n> 08_debugging... * 20 B ExaseLe\n> 09 _multi_cless.. * 21\n> 10_muiti_glass.. * 22 w1\n23 rsmindex = Remindext(*Kay\")\n24 rorindex remind_me_to('walk the dog\")\n25 semindexr . rowind() # s> ‘Walk the dog, Xoy!~\n26\n27 ® 2\n28 romindex Remindex( Kay*)\n29 Toainder.remind() # foils with “No task sat.”\n30\n3 23\n32 Tominder = Reminder(“Kay\")\n33  reminGor.remino_se to(\"\")\n34 remincexr .xemand() & => \" Koy!*\n35\n36\n37 Encode wuch prxampie os o test. You can add to the above list a5 you go._\n38\n> TIMELINE 39 &## 4. Implement the Bshaviour\n"
  },
  {
    "seconds": 5,
    "text": "ace fasks_design.md — rspec_setup 08\nLf‘w EXPLORER . ¥ tasks_designmd U @ @M - ) zsh 8 .-\n+ RSPEC_SETUP class_design > recipes > ¥ tasks_designmd ) () # ((PROBLEM}) Class Design Recipe > (] ## 2. Creata Exampies as Tosts  @7_single_class_design - []\n> 00_scratch . 1 # {{PROBLEM}} Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites # 3 #¢# 1. Describe the Problem\n. > 03_single_met... » 4\n> 04_single_met.. * 5 _Put or write the user story here. Add ony clorifying notes you might have._\n> 05_debugging 1 * g\n> 08.single_clss... 7 ## 2. Design the Class Interface\nv 0Zsingle_clas... * 2\n< tib 3 9 _Include the initializer and public methods with all paorameters ond return\nvalues.\n@ phone_book.... U 19\niy v 11 \" xuby\n¥ phone_desig... U 12\n@ tasks_design... U 13 -y\nv spec » 14\n& phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper.... U 16 -\n-rspec v 17 _Moke a list of exomples of how the class will behave in different situations._\nGemfile U 18\nGemfiletock U 19 ° “ruby\n> 08_debugging... * 20 ¥ EXAMPLE\n> 09_multi_class... » 21\n> 10_multi_class... * 2 #1\n23 remindexr = Reminder(7TKay\")\n24 reminder.remind_me_to(\"Walk the dog*)\n25  remindex.remind() # => \"Walk the dog, Kay!®\n26\n27 w2\n28 remindexr = Reminder(*Kay\")\n29  reminder.remind() # foils with ‘No tosk set.”\n30\n31 23\n32 reminder = Reminder(“Kay\")\n33 reminder.remind me_to('\")\n34 reminder.zemind() @ =& ', Koy!\"\n35\n36\n37 _Encode coch example os a test. You can add to the above list as you go._\n38\nN viELine 3 ¢ 4. Implement the Bshaviour\nmain® 287 saloctod Spaces J F Markdow 51X L4\n"
  },
  {
    "seconds": 6,
    "text": "ace fasks_design.md — rspec_setup 08\nLD EXPLORER .- ¥ tasks_designmd U @ RO - ) zsh 8 -\n~ RSPEC_SETUP class_design > recipes » ¥ tasks_design.md > & # ((PROBLEM}) Class Design Recipe > (= ## 2. Create Examples ps Tests  97_single_class_design = [|\n> 00_scratch . 1 # {{PROBLEM}} Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites # 3 #¢¥ 1. Describe the Problem\n8 > 03_single_met... » 4\n> 04_single_met.. » 5 _Put or write the user story here. Add ony clarifying notes you might have._\n> 05_debugging 1 * g\n> 08_single_clas... 7  ## 2. Design the Class Interface\nv 0Z_single_clas... * 2\n< tib 3 9 _Include the initializer and public methods with all porameters ond return\n@ phone_book.... U 19 values._\nv recipes . 1 “* xuby\n¥ phone_desig... U 12\n¥ tasks_design... U 13 .\nv spec » 14\n& phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper.... U 16 -\n-rspec u 17 _Moke a list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfilefock U 19 ° ruby\n> 08_debugging... * 20 ¥ EXAMPLE\n> 09_multi_class... » 21\n> 10_multi_class... * 22 #1\n23 remindexr = Reminder(7TKay\")\n24 reminder.remind_me_to(\"Walk the dog*)\n25  remindex.xemind() # => “Walk the dog, Koy!®\n26\n27 2\n28 remindexr = Reminder(*Kay\")\n29  reminder.remind() # foils with ‘No tosk set.”\n30\n31 23\n32 reminder = Reminder(“Kay\")\n33 reminder.remind we_to(\"\")\n34 reminder.remind() # => “, Koy!*\n35\n36\n37 _Encode coch example os o test. You can add to the above list as you go._\n38\nN viELine 3 &## 4. Implement the Bshaviour\nmain® 291 seloctod Spaces: 2 F  Markdowr pe .\n"
  },
  {
    "seconds": 7,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP class_design > recipes > ¥ tasks_design.md > (] # {{PROBLEM}} Class Design Recipe > ) ## 3. Create Examples as Tests  97_single_class_design » D\n> 00_scratch B 1 # {{PROBLEM}} Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites ® 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles & 7 ## 2. Design the Class Interface\nv 07Z_single_clas... * 8\n“ lib = 9 _Include the initializer and public methods with all parameters and return\n@ phone_book.... U - palves._\n- 3 o 11 \"' ruby B\n¥ phone_desig... U 12\n¥ tasks_design... U 13 Cas\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\n-rspec v 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 I\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 _Encode each example as o test. You can add to the above list as you go._\n24\n25 ## 4. Implement the Behaviouxr\n26\n27  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\n= T Ln20,Col1 Spaces:2 UTF-8 LF Markdown Spel .\n"
  },
  {
    "seconds": 8,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP class_design > recipes > ¥ tasks_design.md > (] # {{PROBLEM}} Class Design Recipe > ) ## 3. Create Examples as Tests  97_single_class_design » D\n> 00_scratch B 1 # {{PROBLEM}} CIfass Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites ® 3 ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging1 * <\n108 single cles & 7  ## 2. Design the Class Interface 1\nv 07_single_clas... * 8 1\n“ lib = 9 _Include the initializer and public methods with all parameters and return\nAVt 1 ~ values._\ne = 11 \" ruby 1\n¥ phone_desig... U 12 T\n¥ tasks_design... U 13 Wb\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\n-rspec v 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 2 8\n> 10_multi_class... * 22\n23 _Encode each example as o test. You can add to the above list as you go._\n24\n25 ## 4. Implement the Behaviouxr\n26\n27  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\nmain® 0 [ i) 14 Spaces: 2 JTF-8 (3 Markdown Spe -\n"
  },
  {
    "seconds": 9,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > & # ({PROBLEM}} Class Design Recipe 07_single_class_design » [|\n> 00_scratch B 1 # {{{ROBLEMI} Class Design Recipe ™\n> 01_intro_and_git 2\n> 02_testing_bites ® 3 ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles & 7  ## 2. Design the Class Interface\nv 07Z_single_clas... * 8\n“ lib = 9 _Include the initializer and public methods with all parameters and return\nAVt 1 . values._\ne = 11 \" ruby\n¥ phone_desig... U 12\n¥ tasks_design... U ag S\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\n-rspec v 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 ok\n> 10_multi_class... * 22\n23 _Encode each example as o test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviouxr\n26\n27  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\n= YT, - )| 6 (8 selected) Spaces:2 UTF-8 LF Markdown Spel .\n"
  },
  {
    "seconds": 10,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > & # ({PROBLEM}} Class Design Recipe 07_single_class_design » [|\n> 00_scratch B 1« [[{PROBLEM}} Class Design Recipe B\n> 01_intro_and_git 2\n> 02_testing_bites ® 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging1 * <\n108 single cles & 7  ## 2. Design the Class Interface\nv 07Z_single_clas... * 8\n“ lib = 9 _Include the initializer and public methods with all parameters and return\n@ phone_book.... U 8 matues._\ne i = 11 \" ruby\n¥ phone_desig... U 12\n¥ tasks_design... U ag S\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\nrspec v 17  _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 g\n> 10_multi_class... * 22\n23 _Encode each example as o test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviouxr\n26\n27  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\nmain* (1} [ 3 (17 selected) Spaces: 2 JTF-8 (3 Markdown Spe 5\n"
  },
  {
    "seconds": 11,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > & # ({PROBLEM}} Class Design Recipe 07_single_class_design » [|\n> 00_scratch . 1 # T4 Class Design Recipe B\n> 01_intro_and_git 2\n> 02_testing_bites ® 3 ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles & 7  ## 2. Design the Class Interface\nv 07Z_single_clas... * 8\n“ lib = 9 _Include the initializer and public methods with all parameters and return\n@ phone_book.... U - paltes._\ne = 11 \" ruby\n¥ phone_desig... U 12\n¥ tasks_design... U ag S\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\n-rspec v 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 ok\n> 10_multi_class... * 22\n23 _Encode each example as o test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviouxr\n26\n27  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\n= YT, n1,Col5 Spaces:2 UTF-8 LF Markdown Spel .\n"
  },
  {
    "seconds": 12,
    "text": "eoe tasks_design.md — rspec_setup 08\n@ EXPLORER -+ ¥ tasks_design.md U X wW@m-- zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe __ ©7_single_class_design - []\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites ® 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4 1\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n2108 single clesal & 7  ## 2. Design the Class Interface\nv 0Z_single_clas... * 8\n“ lib . 9 _Include the initiolizer and public methods with all parameters and return\n@ phone_book.... U x solues._\nM rache o 11 \" ruby\n¥ phone_desig... U >\n¥ tasks_design... U 93 o\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\nfpec o 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 _Encode each example as a test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviour\n26\n27 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\nmain® 0 ( 1,Col 8 Spaces: 2 F-8 LF Markdown Spe s\n"
  },
  {
    "seconds": 13,
    "text": "tasks_design.md — rspec_setup Ug\n@ EXPLORER =+ ¥ tasks_design.md U X wW@m-- zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe __ ©07_single_class_design ~ []\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites ® 3 ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n2108 single clesal & 7  ## 2. Design the Class Interface\nv 0Z_single_clas... * 8\n“ lib > 9 _Include the initiolizer and public methods with all parameters and return\n@ phone_book.... U x solues._\nM rache o 11 \" ruby\n¥ phone_desig... U e\n¥ tasks_design... U 93 o\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\n-fspec v 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 _Encode each example as a test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviour\n26\n27 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\nmain® 0 ( 1,Col 8 Spaces: 2 F-8 LF Markdown Spe s\n"
  },
  {
    "seconds": 14,
    "text": "tasks_design.md — rspec_setup Ug\n@ EXPLORER -+ ¥ tasks_design.md U X wW@m-- zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe __ ©07_single_class_design ~ []\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites ® 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n2108 single clesal & 7  ## 2. Design the Class Interface\nv 0Z_single_clas... * 8\n“ lib . 9 _Include the initiolizer and public methods with all parameters and return\n@ phone_book.... U x solues._\nM rache o 11 \" ruby\n¥ phone_desig... U >\n¥ tasks_design... U 93 o\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\nfpec o 17  _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 _Encode each example as a test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviour\n26\n27 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\nmain® 0 ( 1,Col 8 Spaces: 2 F-8 LF Markdown Spe s\n"
  },
  {
    "seconds": 15,
    "text": "e%e tasks_design.md — rspec_setup 08\n@ EXPLORER -+ ¥ tasks_design.md U X wW@m-- zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe 07_single_class_design » [|\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2 =\n> 02_testing_bites ® 3  ## 1. Describe the Problem\nBl > 03_single_met.. * a | I\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._ |\n> 05_debugging_1 * 6\n2108 single clesal & 7  ## 2. Design the Class Interface\nv 0Z_single_clas... * 8\n“ lib . 9 _Include the initiolizer and public methods with all parameters and return\no s bkl o values._ \\\nM rache . o 11 \" ruby\n¥ phone_desig... U 12\n¥ tasks_design... U 93 o\nv spec . 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\n-fspec v 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 _Encode each example as a test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviour\n26\n27 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\nmain® 0 ( 4, (C Spaces: 2 F-8 LF Markdown Spe s\n"
  },
  {
    "seconds": 16,
    "text": "e%e tasks_design.md — rspec_setup 08\n@ EXPLORER <+ % tasks_design.md U X @O - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (= # Tasks Class Design Recipe > &) ## 1. Describe the Problem 07_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2 =\n> 02_testing_bites * 3 ## 1. Describe the Problem\n= > 03_single_met... ® 4 | ;\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._ |\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 ## 2. Design the Class Interface\nv 0Z_single_clas... * 8\n“ lib . 9 _Include the initiolizer and public methods with all parameters and return\n@ phone_book.... U x solues._ ‘\nNLrecee . i 11 \" ruby\n¥ phone_desig... U 12\n¥ tasks_design... U 13 e\ns s 14\n@ phone_book... U 15 ## 3. Create Examples as Tests\n@ spec_helper... U 16\n-rspec v 17 _Make o list of examples of how the class will behave in different situations._\nGemfile u 18\nGemfilelock U 19 \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... 22\n23 _Encode each example as a test. You can add to the above list as you go._\n24\n25  ## 4. Implement the Behaviour\n26\n27  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n28\n> TIMELINE\nmain* 0AC 3, C Spaces: 2 F-8 LF Markdown Spe e\n"
  },
  {
    "seconds": 17,
    "text": "@oce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @O [(azsh 8 -\n“ RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=] # Tasks Class Design Recipe > ) ## 1. Describe the Problem  7_single_class_design = []\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites ® 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user &\nv 07_single_clas... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them. |\n10\nC M‘m g 11 > As a user\nLrecHe . o 12 >-S0 that I can focus on tasks to complete\nP 13 > I want to mark tasks as complete and have them disappear from the list.l\n¥ tasks_design... U 14\ne s 15 o 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 o\n> 10_multi_class... 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 *\"ruby\n28\n29 o\n30\n31 _Encode each example as o test. You can add to the obove list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AC 3 4 Spaces: 2 F-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 18,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@am - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 ® 6\n5108 single’ cles & 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks r\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig 1Y 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14\nVv spec . 15  ## 2. Design the Class Interfacd ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\nrspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® oA C n15,Col33 Spaces: 2 F-8 LF Markdowr Spe .\n"
  },
  {
    "seconds": 19,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@am - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 ® 6\n5108 single’ cles & 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks r\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig 1Y 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14\nVv spec . 15  ## 2. Design the Class Interfacd 1\n@ phone_book... U 16\n@ spec_helper.... U 17  _Include the initiolizer and public methods with all parameters and return\nrspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® oA C n15,Col33 Spaces: 2 F-8 LF Markdowr Spe .\n"
  },
  {
    "seconds": 20,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@am - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 ® 6\n5108 single’ cles & 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks r\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user I\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig 1Y 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14\nVv spec . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\nrspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® oA C n15,Col33 Spaces: 2 F-8 LF Markdowr Spe .\n"
  },
  {
    "seconds": 21,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@am - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 ® 6\n5108 single’ cles & 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks r\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user I\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig 1Y 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14\nVv spec . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17  _Include the initiolizer and public methods with all parameters and return\nrspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® oA C n15,Col33 Spaces: 2 F-8 LF Markdowr Spe .\n"
  },
  {
    "seconds": 22,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@am - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 ® 6\n5108 single’ cles & 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks r\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nC M‘m g 11 > As a user I\nb ! i 2 12 >-So that I can focus on tasks to complete\n¥ phone_desig 1Y 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14\nVv spec . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17  _Include the initiolizer and public methods with all parameters and return\nrspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® oA C n15,Col33 Spaces: 2 F-8 LF Markdowr Spe .\n"
  },
  {
    "seconds": 23,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks il\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So- that I can focus on tasks to complete\nMALLEE T 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec - 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n.rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain* 0 ( Ln 15, Col 33 Spaces: 2 F-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 24,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks il\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So- that I can focus on tasks to complete\nMALLEE T 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nNl . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n.rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain* 0 ( Ln 15, Col 33 Spaces: 2 F-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 25,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks il\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So- that I can focus on tasks to complete\nMALLEE T 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec - 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n.rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain* 0 ( Ln 15, Col 33 Spaces: 2 F-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 26,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks il\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So- that I can focus on tasks to complete\nMALLEE T 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec - 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n.rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain* 0 ( Ln 15, Col 33 Spaces: 2 F-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 27,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks il\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So- that I can focus on tasks to complete\nMALLEE T 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec - 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n.rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain* 0 ( Ln 15, Col 33 Spaces: 2 F-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 28,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites * 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks il\nR = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So that I can focus on tasks to complete\nMALIEDE 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14\nNl « 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 b\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 xuby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\n[ 0AC Ln 15 Col 33 Spaces:2 UTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 29,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites * 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks il\nR = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So that I can focus on tasks to complete\nMALIEDE 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 b\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 xuby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\n[ 0AC Ln 15 Col 33 Spaces:2 UTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 30,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites * 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks il\nR = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So that I can focus on tasks to complete\nMALIEDE 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 b\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 \"7 xuby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\n[ 0AC Ln 15 Col 33 Spaces:2 UTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 31,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > & ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites * 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks il\nR = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So that I can focus on tasks to complete\nMALIEDE 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec - 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 )\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 T ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\n[ 0AC Ln 15 Col 33 Spaces:2 UTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 32,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > & ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites * 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07_single_cles... ® 8 > So-that I can keep track of my tasks il\nR = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’:x‘m\"\" :’ 11 > As a user I\ni 12 > So that I can focus on tasks to complete\nMALIEDE 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nVv spec . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values. _\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 )\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make o list of examples of how the class will behave in different situations._\n26\n27 T ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\n[ 0AC Ln 15 Col 33 Spaces:2 UTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 33,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks i\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\n. 12 >-So-that I can focus on tasks to complete\n¥ phone_desig_ U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\ni nac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 o\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 T\n30\n31 _Encode each example os a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AC Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdowr Spel -\n"
  },
  {
    "seconds": 34,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks i\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\n. 12 >-So-that I can focus on tasks to complete\n¥ phone_desig_ U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\ni nac = 15 #¢ 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 o\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 T\n30\n31 _Encode each example os a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AC Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdowr Spel -\n"
  },
  {
    "seconds": 35,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks i\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\n. 12 >-So-that I can focus on tasks to complete\n¥ phone_desig_ U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\ni nac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 o\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 T\n30\n31 _Encode each example os a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AC Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdowr Spel -\n"
  },
  {
    "seconds": 36,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks i\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\n. 12 >-So-that I can focus on tasks to complete\n¥ phone_desig_ U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\ni nac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 o\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 T\n30\n31 _Encode each example os a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AC Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdowr Spel -\n"
  },
  {
    "seconds": 37,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas.. ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks i\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\n. 12 >-So-that I can focus on tasks to complete\n¥ phone_desig_ U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\ni nac = 15 #¢ 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 o\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 T\n30\n31 _Encode each example os a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AC Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdowr Spel -\n"
  },
  {
    "seconds": 38,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks il\ns = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtaul\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 39,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks il\ns = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtacd\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 40,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks il\ns = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtacd\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 41,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks il\ns = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtacd\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 42,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks il\ns = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’::_:::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtacd\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 e\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 43,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks T\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtaul\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 44,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks T\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtaul\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 45,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks T\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nG080 = 15 #¢ 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 46,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks T\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtaul\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 47,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks T\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nG080 = 15 #¢ 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 48,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks T\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user I\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtaul\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviouxr\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 49,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks T\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class lntoxtacd\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20\n> 09_multi_class... * 21 e 1\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 0 Ln 15, Col 33 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 50,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user -\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 1\n> 09_multi_class... * 21 Y\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AO0 L ), Col1  Spaces:2 UTF-8 LF  Markdown Spe! .\n"
  },
  {
    "seconds": 51,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user -\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 © \" ruby\n> 08_debugging... * 20 1\n> 09_multi_class... * 21 Y\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AO0 L ), Col1  Spaces:2 UTF-8 LF  Markdown Spe! .\n"
  },
  {
    "seconds": 52,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @om - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 > I-want-a-program that I can add todo tasks to and see a list of them.\n10\nv.’:':::‘m\"\" ': 11 > As a user -\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 © \" ruby\n> 08_debugging... * 20 1\n> 09_multi_class... * 21 Y\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 Kt\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AO0 L ), Col1  Spaces:2 UTF-8 LF  Markdown Spe! .\n"
  },
  {
    "seconds": 53,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:;:‘m\"\" ': 11 > As-a user =\ni 12 >-So-that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 1\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23  ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 i\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AO0 Ln20,Col1 Spaces:2 UTF-8 LF Markdowr Spe ]\n"
  },
  {
    "seconds": 54,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 >-I-want-a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:;:‘m\"\" ': 11 > As-a user =\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 1\n> 09_multi_class... * 21 Y\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 i\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AO0 Ln20,Col1 Spaces:2 UTF-8 LF Markdowr Spe e\n"
  },
  {
    "seconds": 55,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 >-I-want-a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:;:‘m\"\" ': 11 > As-a user =\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 1\n> 09_multi_class... * 21 Y\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 i\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AO0 Ln20,Col1 Spaces:2 UTF-8 LF Markdowr Spe e\n"
  },
  {
    "seconds": 56,
    "text": "[ XX ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 >-I-want-a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:;:‘m\"\" ': 11 > As-a user =\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 1\n> 09_multi_class... * 21 Y\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 i\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AO0 Ln20,Col1 Spaces:2 UTF-8 LF Markdowr Spe e\n"
  },
  {
    "seconds": 57,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 2. Design the Class Interf @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 >-I-want-a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:;:‘m\"\" ': 11 > As-a user =\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 cll\n> 09_multi_class... * 21 Y\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 i\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0AOC n20,Col3 Spaces:2 UTF-8 LF Markdown 0\n"
  },
  {
    "seconds": 58,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 2. Design the Class Interface  97_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So-that I can keep track of my- tasks\n« lib = 9 >-I-want-a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:;:‘m\"\" ': 11 > As-a user -\ni 12 >-So that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters ond return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 class\n> 09_multi_class... * 21 e\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 i\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n36\n> TIMELINE\nmain® 0 A0 2 o Spaces: 2 TF-8 F  Markdowr Spe 4\n"
  },
  {
    "seconds": 59,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Design the Class Interface  @7_single_class_design = [|\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_::‘m\"\" ': 11 > As a user -\ni 12 >-So- that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 class TodoLid\n> 09_multi_class... * 21 o\n> 10_multi_class... * 22\n23 ## 3. Create Examples as Tests\n24\n25 _Make a list of examples of how the class will behave in different situations._\n26\n27 \" ruby\n28\n29 s\n30\n31 _Encode each example as a test. You can add to the above list as you go._\n32\n33 ## 4. Implement the Behaviour\n34\n35 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\ne 36\n> TIMELINE\nmain® 0 ( col 14  Spaces: 2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 60,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Design the Class Interface  @7_single_class_design - I:l\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:'::‘m\"\" ': 11 > As a user =\ni 12 >-So- that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 © \" ruby\n> 08_debugging... * 20 class TodoLisd\n> 09_multi_class... * 21 end\n> 10_multi_class... * 22 o\n23\n24 ## 3. Create Examples as Tests\n25\n26 _Make a list of examples of how the class will behave in different situations._\n27\n28 \" xuby\n29\n30 it\n3\n32 _Encode each example as a test. You can add to the above list as you go._\n33\n34 ## 4. Implement the Behaviour\n35\n36 _After each test you write, follow the test-driving process of red, green,\n: refactor to implement the behaviour._\n37\n> TIMELINE\nmain® 0 ( 2C 11 Spaces: 2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 61,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Design the Class Interface  @7_single_class_design = I:l\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:'::‘m\"\" ': 11 > As a user 4\ni 12 >-So- that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile v 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... ® 21 dae|\n> 10_multi_class... * 22 end\n23\n24\n25 ## 3. Create Examples as Tests\n26\n27 _Make a list of examples of how the class will behave in different situations._\n28\n29 \" ruby\n30\n3 i\n32\n33 _Encode each example as a test. You can add to the above list as you go._\n34\n35 ## 4. Implement the Behavioux\n36\n: 37 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE »\nmain® 0AC 1.Col5 Spaces:2 UTF-8 LF Markdown Spe S\n"
  },
  {
    "seconds": 62,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Design the Class Interface  @7_single_class_design = I:l\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n@ phone_book.... U ot\no ~ 11 > As a user - |\ni 12 >-So- that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initialid\n> 10_multi_class... * 22 end\n23\n24\n25 ## 3. Create Examples as Tests\n26\n27 _Make a list of examples of how the class will behave in different situations._\n28\n29 \" ruby\n30\n3 i\n32\n33 _Encode each example as a test. You can add to the above list as you go._\n34\n35 ## 4. Implement the Behavioux\n36\n: 37 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE »\nmain® 0AC ol 16 Spaces: 2 TE-8 F Markdown Spe .\n"
  },
  {
    "seconds": 63,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Design the Class Interface  @7_single_class_design = I:l\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07single_cles... ® 8 > So-that I can keep track of my tasks\n« lib = 9 > I-want-a program that I can add todo tasks to and see a list of them.\n10\nv.’:'::‘m\"\" ': 11 > As a user L\ni 12 >-So- that I can focus on tasks to complete\n¥ phone_desig... U 13 > I-want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nS . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile v 18\nGemfile.lock v 19 * \" ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 4\n23  end\n2\n25\n26  ## 3. Create Examples as Tests\n27\n28 _Make a list of examples of how the class will behave in different situations._\n29\n30 \" ruby\n3\n32 A\n33\n34 _Encode each example as a test. You can add to the above list as you go._\n35\n36 ## 4. Implement the Behaviouxr\n: 37\n38 _After each test you write, follow the test-driving process of red, green,\nS TIMENE refactor to implement the behaviour._\nmain® 0 A C = 2 4 Spaces: 2 TE-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 64,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them. i\n@ phone_book.... U 18\ne = 11 > As a user [ 4\n; 12 > So that I can focus on tasks to complete\n¥ Elione-cesg =1 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\n= pc . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... ® 21 def initializes\n> 10_multi_class... * 22 end\n23  end\n2\n25\n26  ## 3. Create Examples as Tests\n27\n28 _Make a list of examples of how the class will behave in different situations._\n29\n30 ' ruby\n3\n32 B\n33\n34 _Encode each example os a test. You can add to the above list as you go._\n35\n36 ## 4. Implement the Behaviour\n37\n38 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour._\nmain® 0AO : n21 8 Spaces:2 UTF-8 LF Markdown Spe! 0\n"
  },
  {
    "seconds": 65,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them. i\n@ phone_book.... U 18\ne = 11 > As a user [ 4\n; 12 > So that I can focus on tasks to complete\n¥ Elione-cesg =1 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\n= pc . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... ® 21 def initializes\n> 10_multi_class... * 22 end\n23  end\n2\n25\n26  ## 3. Create Examples as Tests\n27\n28 _Make a list of examples of how the class will behave in different situations._\n29\n30 ' ruby\n3\n32 B\n33\n34 _Encode each example os a test. You can add to the above list as you go._\n35\n36 ## 4. Implement the Behaviour\n37\n38 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour._\nmain® 0AO : n21 8 Spaces:2 UTF-8 LF Markdown Spe! 0\n"
  },
  {
    "seconds": 66,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.,:::—MM :' 11 > As a user\n; 12 > So that I can focus on tasks to complete |54\n¥ Elione-cesg =1 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\n= pc . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\nfepec . values._\nGemfile v 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def o\n25 end\n26\n27\n28 ## 3. Create Examples as Tests\n29\n30 _Make o list of exomples of how the class will behave in different situations._\n3\n32 \"' ruby\n33\n3\n35\n36 _Encode each example os a test. You can add to the above list as you go._\n! 37\n38 ## 4. Implement the Behaviour\n> TIMELINE b\nmain® 0OAO ) n24,ColB Spaces: 2 JTF-8 LF Markdown Spel .\n"
  },
  {
    "seconds": 67,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete\n¥ Elione-cesg =1 13 > I want to mark tasks as complete and have them disappear from the list. ]\n¥ tasks_design... U 14\n= pc . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\nfepec . values._\nGemfile v 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(p\n25 end\n26\n27\n28 ## 3. Create Examples as Tests\n29\n30 _Make o list of exomples of how the class will behave in different situations._\n3\n32 \"' ruby\n33\n3\n35\n36 _Encode each example as a test. You can add to the above list as you go._\n37\n38 ## 4. Implement the Behaviour\n> TIMELINE =\nmain® 0 0 ) n 24 1 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 68,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete\n¥ Elione-cesg =1 13 > I want to mark tasks as complete and have them disappear from the list. ]\n¥ tasks_design... U 14\n= pc . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\nfepec . values._\nGemfile v 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task)\n25 end\n26\n27\n28 ## 3. Create Examples as Tests\n29\n30 _Make o list of examples of how the class will behave in different situations._\n3\n32 \"' ruby\n33\n3\n35\n36 _Encode each example os a test. You can add to the above list as you go._\n37\n38 ## 4. Implement the Behaviour\n> TIMELINE =\nmain® 0AO = T 15 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 69,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n“ > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:x’m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list. B\n¥ tasks_design... U 1\nX epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task)\n25 end\n26 end\n27 ot\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 Sy\n36\n1 37 _Encode each example as a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® [N : r #6 Spaces: 2 JTF-8 LF Markdown Spel 2\n"
  },
  {
    "seconds": 70,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n“ > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:x’m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) 4\n25 end\n26 end\n27 ot\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 Sy\n36\n1 37 _Encode each example as a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0AO0 . n24,Col18 Spaces: 2 JTF-8 LF Markdown Spel 2\n"
  },
  {
    "seconds": 71,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile v 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task i\n25 end\n26 end\n27 ot\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 Sy\n36\n37 _Encode each example as a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® (Y : 4,Col 26 Spaces:2 UTF-8 LF Markdown Spe! .\n"
  },
  {
    "seconds": 72,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile v 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a\n25 end\n26 end\n27 ot\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 Sy\n36\n37 _Encode each example as a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® (Y : n24,Col29 Spaces:2 UTF-8 LF Markdown Spe! .\n"
  },
  {
    "seconds": 73,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile v 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a\n25 end\n26 end\n27 ot\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 Sy\n36\n37 _Encode each example as a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® (Y : n24,Col29 Spaces:2 UTF-8 LF Markdown Spe! .\n"
  },
  {
    "seconds": 74,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::\"m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX, %pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile v 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string |\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0AC . n 24 . TF-8 Markdowr Spe .\n"
  },
  {
    "seconds": 75,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::\"m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete 8\n¥ phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX, %pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string Lagnsari\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0AC ) n 24, 44 Spaces TF-8 Markdowr 1Spe °\n"
  },
  {
    "seconds": 76,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::\"m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX, %pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing a zos{\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0AC . 24, Col 54 Spaces TF-8 Markdowr Spe 0\n"
  },
  {
    "seconds": 77,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::\"m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX, %pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23 I\n24 def add(task) # task is o string representing a task\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0AC ) a 56 Spaces TF-8 Markdown Spe .\n"
  },
  {
    "seconds": 78,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::\"m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX, %pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing a tnsq\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0AC ) 4 Col55 Spaces TF-8 Markdown Spe .\n"
  },
  {
    "seconds": 79,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete B\n¥.phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nG epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing a tnstmcttor{\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example as ¢ test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0OAO : 4 62 Spaces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 80,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete B\n¥.phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nG epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList I\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing a tnstmcttod\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0OAO : 4 62 Spaces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 81,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete B\n¥.phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nG epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList I\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing a tnstmcttod\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0OAO : 4 62 Spaces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 82,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete B\n¥.phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nG epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23 1\n24 def add(task) # task is a string representing a tnstmcttod\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0OAO : 4 62 Spaces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 83,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete B\n¥.phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nG epac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string rcpnsenttrg a tnstmcttod\n25 end\n26 end\n27 Y\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example as o test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain® 0OAO : 4 62 Spaces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 84,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete B\n¥-phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nAo > 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing a 1nstructl’od\n25 end I\n26 end\n27 pie\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example os a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain* 0 ( . n 24, Col 62 Spaces: 2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 85,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n@ phone_book.... U 1.\ns i = 11 > As a user N\n; 12 > So that I can focus on tasks to complete\n¥-phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list. T\n¥ tasks_design... U 14\nAo > 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end I\n26 end\n27 y i\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example os a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain* 0 ( . n25,Col6 Spaces:2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 86,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n@ phone_book.... U 1.\ns i = 11 > As a user N\n; 12 > So that I can focus on tasks to complete\n¥-phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list. T\n¥ tasks_design... U 14\nAo > 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end I\n26 end\n27 y i\n28\n29 ## 3. Create Examples as Tests\n30\n31 _Make a list of examples of how the class will behave in different situations._\n32\n33 \"\"\" ruby\n34\n35 o\n36\n37 _Encode each example os a test. You can add to the above list as you go._\n38\nS TIMELINE 39 ## 4. Implement the Behaviour\nmain* 0 ( . n25,Col6 Spaces:2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 87,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete\n¥-phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list. -1\n¥ tasks_design... U 14\nAo > 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end\n26 q\n27 end\n28\n29\n30 ## 3. Create Examples as Tests\n3\n32 _Make a list of examples of how the class will behave in different situations._\n33\n34 \" ruby\n35\n36 o\n37\n38 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE 2\nmain® 0 ( . ) : n 26, 4 Spaces:2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 88,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\n; 12 > So that I can focus on tasks to complete\n¥-phone_desig_.U 13 > I want to mark tasks as complete and have them disappear from the list. |\n¥ tasks_design... U 14\nAo > 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end\n26\n27 det |\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 ' ruby\n36\n37 e\n38\nS TIMELINE 39 _Encode each example as a test. You can add to the above list as you go._\nmain* 0 ( . n / Spaces: 2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 89,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list. ||\n¥ tasks_design... U 1\ng pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string rcp\"ianttng a instruction\n25 end\n26\n27 det |\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 o\n38\nS TIMELINE 39 _Encode each example as a test. You can add to the above list as you go._\nmain® 0AC n27,Col7 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 90,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list. ||\n¥ tasks_design... U 1\ng pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end\n26\n27 def con|\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 o\n38\nS TIMELINE 39 _Encode each example as a test. You can add to the above list as you go._\nmain® 0AC n27,Col10 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 91,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list. B\n¥ tasks_design... U 1\ng pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end\n26\n27 def complete|\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 o\n38\nS TIMELINE 39 _Encode each example as a test. You can add to the above list as you go._\nmain® 0AC 15 Spaces: 2 TE-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 92,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list. B\n¥ tasks_design... U 1\ng pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end\n26\n27 def complete|\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 o\n38\nS TIMELINE 39 _Encode each example as a test. You can add to the above list as you go._\nmain® 0AC 15 Spaces: 2 TE-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 93,
    "text": "o0 tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m’m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phone_desig_. U 13 > I want to mark tasks as complete and have them disappear from the list. B\n¥ tasks_design... U 1\ng pac = 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initiolizer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 end\n26\n27 def complete|\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 o\n38\nS TIMELINE 39 _Encode each example as a test. You can add to the above list as you go._\nmain® 0AC 15 Spaces: 2 TE-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 94,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14 Ll\nR epac e 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def complete(taskj|\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 e\n38\nS TIMELINE 39 _Encode each example os a test. You can add to the above list as you go._\n=== 0 A C ) Ln27,Col21 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 95,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (= ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14 Ll\nR epac e 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def complete(taskj|\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 e\n38\nS TIMELINE 39 _Encode each example os a test. You can add to the above list as you go._\n=== 0 A C ) Ln27,Col21 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 96,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (= ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14 Ll\nR epac e 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def complete(taskj|\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 e\n38\nS TIMELINE 39 _Encode each example os a test. You can add to the above list as you go._\n=== 0 A C ) Ln27,Col21 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 97,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (= ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig U 13 > I want to mark tasks as complete and have them disappear from the list. ||\n¥ tasks_design... U 1\nR epac e 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 det |\n28 end\n29 ot\n30\n31 ## 3. Create Examples as Tests\n32\n33 _Make a list of examples of how the class will behave in different situations._\n34\n35 \" ruby\n36\n37 e\n38\nS TIMELINE 39 _Encode each example os a test. You can add to the above list as you go._\nmain® 0AC ) Spaces:2 UTF-8 LF Markdown Spe s\n"
  },
  {
    "seconds": 98,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (= ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B - | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\n@ phene-book U 11 > As a user\nMirecess i \" 12 > So that I can focus on tasks to complete\n¥ piicne_desig U 13 > I want to mark tasks as complete and have them disappear from the list. =\n¥ tasks_design... U 1\nR epac e 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def] 1ist\n28 end\n29 end\n3\n31\n32 ## 3. Create Examples as Tests\n33\n34 _Make a list of examples of how the class will behave in different situations._\n35\n36 \" ruby\n37\n38 .\n> TIMELINE 4z\nmain* 0 ( . ) 6 Spaces: 2 JTF-8 F Markdown Spe! 2\n"
  },
  {
    "seconds": 99,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (= ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B - | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’z::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14 -}\nR epac e 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def list\n28 |\n29 end\n30 end\n31 :\n32\n33 ## 3. Create Examples as Tests\n34\n35 _Make a list of examples of how the class will behave in different situations._\n36\n37 \" ruby\n38\n> TIMELINE 4z\nmain* 0 ( . 28, Col1 Spaces: 2 JTF-8 F Markdown Spe! 2\n"
  },
  {
    "seconds": 100,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’z::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14 B\nEnas . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def list\n28 |\n29 end\n30 end\n31\n32\n33 ## 3. Create Examples as Tests\n34\n35 _Make o list of examples of how the class will behave in different situations._\n36\nL 37 \" xuby\n38\n> TIMELINE 4\nmain® 0AC 5 n28,Col3 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 101,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’z::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14 B\nEnas . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def list\n28 #|\n29 end\n30 end\n31\n32\n33 ## 3. Create Examples as Tests\n34\n35 _Make o list of examples of how the class will behave in different situations._\n36\nL 37 \" xuby\n38\n> TIMELINE 4\nmain* 1] [ E n 28, Co Spaces: 2 JTF-8 F Markdown Spe! .\n"
  },
  {
    "seconds": 102,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’z::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14 B\nEnas . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def list\n28 # Return |\n29 end\n30 end\n31\n32\n33 ## 3. Create Examples as Tests\n34\n35 _Make o list of examples of how the class will behave in different situations._\n36\nL 37 \" xuby\n38\n> TIMELINE 4\nmain® 0AC : 28 14 Spaces: 2 TF-8 F  Markdown Spe =\n"
  },
  {
    "seconds": 103,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’z::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14 B\nEnas . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def list\n28 # Returns al\n29 end\n30 end\n31\n32\n33 ## 3. Create Examples as Tests\n34\n35 _Make o list of examples of how the class will behave in different situations._\n36\nL 37 \" xuby\n38\n> TIMELINE 4\nmain® 0AC E 8 17 Spaces: TF-8 [ VPSP Spe .\n"
  },
  {
    "seconds": 104,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design = D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicne_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14 =\nEnas . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def list\n28 # Returns a list of the ({\n29 end\n30 end\n31\n32\n33 ## 3. Create Examples as Tests\n34\n35 _Make o list of examples of how the class will behave in different situations._\n36\n37 \" xuby\n38\n> TIMELINE 2%\nmain® 0AC : 8 30 Spaces: 2 TF-8 F  Markdown Spel )\n"
  },
  {
    "seconds": 105,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea 8 7 > As a user\nv 07.single_cles... 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14 -\nS spac . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 end\n26\n27 def list\n28 # Returns a list of the tasks ggggd\n29 end\n30 end\n31\n32\n33  ## 3. Create Examples as Tests\n34\n35 _Make a list of examples of how the class will behave in different situations._\n36\n37 \" xuby\n38\nB > TIMELINE b\nmain® 0A0 g 28, 40 Spaces: 2 TF-8 F  Markdown Spe =\n"
  },
  {
    "seconds": 106,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea 8 7 > As a user\nv 07.single_cles... 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ phione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14 -\nS spac . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 end I\n26\n27 def list\n28 # Returns a list of the tasks added as 'sngringsi\n29 end\n30 end\n31\n32\n33  ## 3. Create Examples as Tests\n34\n35 _Make a list of examples of how the class will behave in different situations._\n36\n37 \" xuby\n38\nB > TIMELINE b\nmain® 0AO = n 28 51 Spaces TF-8 Markdowr 1Spe .\n"
  },
  {
    "seconds": 107,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea 8 7 > As a user\nv 07.single_cles... 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user [\ni 12 > So that I can focus on tasks to complete T\n¥ phione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 1\nS spac . 15  ## 2. Design the Class Interface !\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction I\n25 end\n26\n27 def list\n28 # Returns a list of the tasks added as strings\n29 end\n30 end\n31\n32\n33  ## 3. Create Examples as Tests\n34\n35 _Make a list of examples of how the class will behave in different situations._\n36\n37 \" xuby\n38\nB > TIMELINE b\nmain® [\\ [ g n25 Col6 Spaces: 2 TF-8 F  Markdowr Spe! .\n"
  },
  {
    "seconds": 108,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea 8 7 > As a user\nv 07.single_cles... 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nS spac . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 |\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31 end\n32\n33\n34 ## 3. Create Examples as Tests\n35\n36 _Make a list of examples of how the class will behave in different situations._\n37\n38 \" xuby\nB > TIMELINE b .\nmain® 0AO = Ln 2 ol5 Spaces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 109,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea 8 7 > As a user\nv 07.single_cles... 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete B\n¥ phione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nS spac . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 £\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31 end\n32\n33\n34 ## 3. Create Examples as Tests\n35\n36 _Make a list of examples of how the class will behave in different situations._\n37\n38 \" xuby\nB > TIMELINE b .\nmain® 0A0 g n 25, Cc . TF-8 F  Markdown Spe! .\n"
  },
  {
    "seconds": 110,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete =\n¥ piione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX opec . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return notH\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31  end\n32\n33\n34 ## 3. Create Examples as Tests\n35\n36 _Make a list of examples of how the class will behave in different situations._\n37\n38 \" ruby\n> TIMELINE b4 .\nmain* 0AC . Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 111,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete E\n¥ piione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX opec . 15  ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end 1\n31  end\n32\n33\n34 ## 3. Create Examples as Tests\n35\n36 _Make a list of examples of how the class will behave in different situations._\n37\n38 \" ruby\n> TIMELINE b4 .\nmain® 0 A ’ n25Col2) Spaces:2 UTF-8 LF Markdowr Spe 3\n"
  },
  {
    "seconds": 112,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX opec . 15  ## 2. Design the Class Interface &\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 det |\n33  end\n38\n35\n36 ## 3. Create Examples as Tests\n37\n38 _Make a list of examples of how the class will behave in different situations._\n> TIMELINE b4 -\nmain® 0 A C = 2 Spaces: 2 TE-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 113,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX opec . 15  ## 2. Design the Class Interface &\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 det compl]\n33  end\n38\n35\n36 ## 3. Create Examples as Tests\n37\n38 _Make a list of examples of how the class will behave in different situations._\n> TIMELINE b4 -\nmain® 0 A C = n 32, Col 1 Spaces: 2 TE-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 114,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\n\" > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n> 06_single_clas... ® 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:'_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nX opec . 15  ## 2. Design the Class Interface |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' 'ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def conpletq\n33 end\n34  end\n3 e\n36\n37 ## 3. Create Examples as Tests\n38\nS TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain* [N (Y. 1 paces: 2 TF-8 F  Markdown Spe S\n"
  },
  {
    "seconds": 115,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  7_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met.. ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 ® o I\n108 single slasi s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nS opao . 15  ## 2. Design the Class Interface Ll\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complet|\n33 end\n34  end\n35 S\n36\n37 ## 3. Create Examples as Tests\n38\n> TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\n— 0 A ( n32 Col15 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 116,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  7_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met.. ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single slasi s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nS opao . 15  ## 2. Design the Class Interface [ ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def conplete(taﬂ)\n33 end\n34  end\n35 S\n36\n37 ## 3. Create Examples as Tests\n38\n> TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® 0AC n 32 19 Spaces: 2 TF-8 LF  Markdown Spe! S\n"
  },
  {
    "seconds": 117,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  7_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met.. ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single slasi s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nS opao . 15  ## 2. Design the Class Interface [ |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task)\n33 end\n34  end\n35 Y\n36\n37 ## 3. Create Examples as Tests\n38\n> TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\n— 0 A ( n 32 22 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 118,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  7_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met.. ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single slasi s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nS opao . 15  ## 2. Design the Class Interface [ |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) 5'\n33 end\n34  end\n35 Y\n36\n37 ## 3. Create Examples as Tests\n38\n> TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® 0AC 24 Spaces: 2 TF-8 LF  Markdown Spe )\n"
  },
  {
    "seconds": 119,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  7_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met.. ® 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single slasi s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piione_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nS opao . 15  ## 2. Design the Class Interface [ |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is o string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) 5'\n33 end\n34  end\n35 Y\n36\n37 ## 3. Create Examples as Tests\n38\n> TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® 0AC 24 Spaces: 2 TF-8 LF  Markdown Spe )\n"
  },
  {
    "seconds": 120,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  7_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles.. ® 8 > So that I can keep track of my tasks\n« lib > 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nB opao . 15  ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 def complete(task) # |\n33 end\n34 end\n35 iy\n36\n37 ## 3. Create Examples as Tests\n38\nS TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® 0AC . n32 Col24 Spaces: 2 JTF-8 LF  Markdown Spe! *\n"
  },
  {
    "seconds": 121,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  97_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles.. ® 8 > So that I can keep track of my tasks\n« lib > 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nB opao . 15  ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 def complete(task) # task is o st|\n33 end\n34 end\n35 iy\n36\n37 ## 3. Create Examples as Tests\n38\nS TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® ) i ) n32 Col36 Spaces: 2 JTF-8 LF  Markdown Spe )\n"
  },
  {
    "seconds": 122,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  97_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles.. ® 8 > So that I can keep track of my tasks\n« lib > 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nB opao . 15  ## 2. Design the Class Interface [ |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 def complete(task) # task is o string repreg\n33 end\n34 end\n35 iy\n36\n37 ## 3. Create Examples as Tests\n38\nS TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® 0 [ n 32 4 Spaces I Markdowr Spel 9\n"
  },
  {
    "seconds": 123,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  97_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles.. ® 8 > So that I can keep track of my tasks\n« lib > 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nB opao . 15  ## 2. Design the Class Interface n\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 def complete(task) # task is o string reer:sentil\n33 end\n34 end\n35 iy\n36\n37 ## 3. Create Examples as Tests\n38\nS TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® 0AC n32 Col51 Spaces:2 UTF F Markdowr Spe .\n"
  },
  {
    "seconds": 124,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e W @o - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 2. Design the Class Interface  97_single_class_design = []\n> 00_scratch B : | # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n5108 single clea s 7 > As a user\nv 07.single_cles.. ® 8 > So that I can keep track of my tasks\n« lib > 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 1\nB opao . 15  ## 2. Design the Class Interface |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is @ string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 def complete(task) # task is o string representing o task to n‘\n33 end\n34 end\n35 iy\n36\n37 ## 3. Create Examples as Tests\n38\nS TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® (Y 32 65 Spaces:2 UTF F Markdowr Spe .\n"
  },
  {
    "seconds": 125,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > # tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch - 1 # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal e 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’:::‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nEepeo . 15  ## 2. Design the Class Interface <]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile 1] 18\nGemfilelock U 19 \" ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing @ instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n31\n32 def complete(task) # task is a string representing a task to mark M4\n33 end\n34 end\n35 .\n36\n37 ## 3. Create Examples as Tests\n38\nS TIMELINE 39 _Make a list of examples of how the class will behave in different situations._\nmain® 0AC . n32 Col77 Spaces:2 UTF-8 LF Markdown Spe :\n"
  },
  {
    "seconds": 126,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > # tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal e 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’::::‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nEaepse . 15 ## 2. Design the Class Interface -\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 |\n34 end\n35 end\n6\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE =\nmain® 0 A C = n3 3 . TF-8 Markdown Spe .\n"
  },
  {
    "seconds": 127,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > # tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal e 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’::::‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nEaepse . 15 ## 2. Design the Class Interface -\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 o\n34 end\n35 end\n6\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE =\nmain® 0AC . 3 6 . TF-8 Markdown Spe .\n"
  },
  {
    "seconds": 128,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > # tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal e 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’::::‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nEaepse . 15 ## 2. Design the Class Interface -\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 #\n34 end\n35 end\n6\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE =\nmain® 0AC . 3 7 . TF-8 Markdown Spe .\n"
  },
  {
    "seconds": 129,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > # tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal e 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’::::‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicns_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nEaepse . 15 ## 2. Design the Class Interface -\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 #\n34 end\n35 end\n6\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE =\nmain® 0AC . 3 7 . TF-8 Markdown Spe .\n"
  },
  {
    "seconds": 130,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nRieres « 15  ## 2. Design the Class Interface - |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" 'ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Eﬁgni\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE s\nmain® 0AC . ol 14 Spaces: 2 TF-8 F  Markdown Spe =\n"
  },
  {
    "seconds": 131,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" 'ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true if |\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE s\nmain* 0 ( : n 4 Spaces: 2 TF-8 F Markdown Spe -\n"
  },
  {
    "seconds": 132,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nRieres « 15  ## 2. Design the Class Interface [ |\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" 'ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true if thetas\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE s\nmain® 0AC : 2 paces: 2 TF-8 Markdowr 1Spe .\n"
  },
  {
    "seconds": 133,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface [\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" 'ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true if the task |\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE s\nmain® 0 A C = 33 Col 32 Spaces E F  Markdown Spe .\n"
  },
  {
    "seconds": 134,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single clea s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig__U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface [\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 \" 'ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true if the task |\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE s\nmain® 0 A C = 33 Col 32 Spaces E F  Markdown Spe .\n"
  },
  {
    "seconds": 135,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n108 single cleat s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicns_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaspss e 15 ## 2. Design the Class Interface ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true if the task |\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE 2\nmain® 0AC - Ln 33, Col 32 Spaces: 2 F-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 136,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n108 single cleat s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicns_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaspss e 15 ## 2. Design the Class Interface ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true if the task |\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE 2\nmain® 0AC - Ln 33, Col 32 Spaces: 2 F-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 137,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n108 single cleat s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicns_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaspss e 15 ## 2. Design the Class Interface ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true if the task |\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE 2\nmain® 0AC - Ln 33, Col 32 Spaces: 2 F-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 138,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n108 single cleat s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicns_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaspss e 15 ## 2. Design the Class Interface ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns true [if the task\n34 end\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE 2\nmain* 0 [ . 3, ( 20 (12 selected) Spaces: 2 F-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 139,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging 1 * 6\n108 single cleat s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piicns_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design.. U 14\nRieree . 15  ## 2. Design the Class Interface [\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns ngfiv}l\n34 end )\n35 end\n36\n37\n38 ## 3. Create Examples as Tests\n> TIMELINE 2\nmain® 0 A C = n3 120 Spaces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 140,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’:::_:::‘m\"\" :' 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piions_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodoList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 7|\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0OAO ) Ln 34 7 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 141,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piions_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0 0 : 34 14 Spaces: 2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 142,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piions_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface -\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if the teask 4\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0AO0 : 34 27 paces: 2 TF-8 Markdown 1Spe .\n"
  },
  {
    "seconds": 143,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piions_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if the task '\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain* 0A0 4 5 paces: 2 TF-8 Markdowr Spe! .\n"
  },
  {
    "seconds": 144,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piions_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if the task doesn't ui\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0A0 n 34 35 Spaces: 2 TF-8 F  Markdown Spe! .\n"
  },
  {
    "seconds": 145,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n108 single cles s 7 > As a user\nv 07.single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ piions_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nSaopec . 15 ## 2. Design the Class Interface B\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list 1\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if the task doesn't exist\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0A0 n34 38  Spaces: TE-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 146,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nBaeree . 15 ## 2. Design the Class Interface ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if the task doesn't exist\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0AO = n34 Col38 Spaces: 2 TF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 147,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig_U 13 > I want to mark tasks as complete and have them disappear from the list.\n¥ tasks_design... U 14\nBaeree . 15 ## 2. Design the Class Interface ]\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if the task doesn't exist\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0AO = n34 Col38 Spaces: 2 TF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 148,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig_U 13 > I want to mark tasks as complete and have them disappear from the list. +\n¥ tasks_design... U 14\nBaeree . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings{}\n30 end\n3\n32 def complete(task) # task is a string representing a task to mark complete\n33 # Returns nothing\n34 # Fails if the task doesn't exist\n35 end\n36 end\n37\n38\nS TIMELINE 39 ## 3. Create Examples as Tests\nmain® 0AO0 . 1 Spaces:2 UTF-8 LF Markdown Spe s\n"
  },
  {
    "seconds": 149,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig_U 13 > I want to mark tasks as complete and have them disappear from the list. B\n¥ tasks_design... U 14\nBaeree . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 # |\n31 end\n32\n33 def complete(task) # task is a string representing a task to mark complete\n34 # Returns nothing\n35 # Fails if the task doesn't exist\n36 end\n37 end\n3\n> TIMELINE 29\nmain® oA0 : ol 7 Spaces: 2 TF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 150,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - |:|\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\nD108 single cleal s 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nv.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /plicos_desig_U 13 > I want to mark tasks as complete and have them disappear from the list. B\n¥ tasks_design... U 14\nBaeree . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 # Except the |\n31 end\n32\n33 def complete(task) # task is a string representing a task to mark complete\n34 # Returns nothing\n35 # Fails if the task doesn't exist\n36 end\n37 end\n3\n> TIMELINE 29\nmain® 0AO ) P )l 1 naces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 151,
    "text": "[N tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single cleall & 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\nV.’m‘m\"\" ': 11 > As a user\ni 12 > So that I can focus on tasks to complete\n¥ /piions_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list. | 18\n¥ tasks_design... U 14\nBaeree . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 # Except the conplottdl\n31 end\n32\n33 def complete(task) # task is a string representing a task to mark complete\n34 # Returns nothing\n35 # Fails if the task doesn't exist\n36 end\n37 end\n38 e\n> TIMELINE 9\nmain® YN = = 28 Spaces: 2 1F-8 F  Markdown 1Spe .\n"
  },
  {
    "seconds": 152,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interface  @7_single_class_design - D\n> 00_scratch B 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2\n> 02_testing_bites 3  ## 1. Describe the Problem\nBl > 03_single_met... * 4\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._\n> 05_debugging_1 * 6\n5108 single cleall & 7 > As a user\nv 07single_cles... ® 8 > So that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n10\n- M‘m . 11 > As a user\n~inachnes i \" 12 > So that I can focus on tasks to complete\n¥ /piions_desig_ U 13 > I want to mark tasks as complete and have them disappear from the list. | 18\n¥ tasks_design... U 14\nBaeree . 15 ## 2. Design the Class Interface\n@ phone_book... U 16\n@ spec_helper.... U 17 _Include the initializer and public methods with all parameters and return\n-rspec v values._\nGemfile u 18\nGemfilelock U 19 ' ruby\n> 08_debugging... * 20 class TodolList\n> 09_multi_class... * 21 def initializer\n> 10_multi_class... * 22 end\n23\n24 def add(task) # task is a string representing o instruction\n25 # Return nothing\n26 end\n27\n28 def list\n29 # Returns a list of the tasks added as strings\n30 # Except the completed ones\n31 end\n32\n33 def complete(task) # task is a string representtnz a task to mark complete\n34 # Returns nothing\n35 # Fails if the task doesn't exist\n36 end\n37 end\n38 e\n> TIMELINE 9\nmain® (LN : ) 3 3 . TF-8 F Markdowr Spe! ]\n"
  },
  {
    "seconds": 153,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\n“ RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > & ## 2. Design the Class Interface  @7_single_class_design - [|\n> 00_scratch ° 8 > So that I can keep track of my tasks\n> 01_intro_and_git 9 > I want a program that I can add todo tasks to and see a list of them.\n> 02_testing_bites * 19\n93 D A 11 > As a user\nS, 12 > So that I can focus on tasks to complete\no B 13 > I want to mark tasks as complete and have them disappear from the list.\n> 05_debugging 1 * 14\nDL LR 15  ## 2. Design the Class Interface\nv 07_single_clas... * 16\nvib > 17 _Include the initializer and public methods with all parameters and return\n@ phone_book.... U values._\npALecREY e 18\n¥ phone_desig... U 19 ** \" xuby\n¥ tasks_design... U 20 class TodoList IE)\nv spec ® 21 def initializer\n@ phone_book... U 22 end\n@ spec_helper.... U 23\nrspec v 24 def add(task) # task is a string representing a instruction\nGemfile u 25 # Return nothing\nGemfilelock U 26 end\n> 08_debugging... * 27\n> 09_multi_class... * 28 def list\n> 10_multi_class_. ® 29 # Returns a list of the tasks odded as strings\ne 30 #lExcept the completed ones\n31 end\n32\n33 def complete(task) # tosk is a string representing a task to mark complete\n34 # Returns nothing\n35 # Fails if the task doesn’'t exist\n36 end\n37 end\n3\n39\n40  ## 3. Create Examples as Tests 1\n41\n42 _Make a list of exomples of how the class will behave in different situations._\n43\n44 \" ruby\n45\na6\n> TIMELINE p\n— A n 3 32 Spaces:2 UTF-8 LF Markdowr Spe .\n"
  },
  {
    "seconds": 154,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design. md Qn Tasks Class Design Rec pe : ## 2. Design the Class Interface  97_single_class_design - D\n> 00_scratch . 14\n> 01_intro_and_git 15  ## 2. Design the Class Interface\n> 02_testing_bites * 16\n¢ > 03_single_met... * 17 _Include the initializer and public methods with all parameters and return\n> 04_single_met... ® values._\n> 05_debugging 1 * 18\n> 06_single_clas... * 19 \" xuby\nv 07_single_clas.. * 20 class TodolList\nv lib s 21 def initializer\n@ phone_book.... U 22 end\nv recipes B 23\n¥ phone_desig... U 24 def add(task) # task is a string representing @ instruction\n¥ tasks_design... U 25 # Return nothing -\n= s 26 end\n@ phone_book... U 27\n@ sec Raler 11 28 def list\nP . 29 # Returns a list of the tasks added as strings\n£ 30 ilErcept the completed ones\nGemfile u\n31 end\nGemfile.lock v 32\n> 08_debugging... © 33 def cJ-plotc(task) # task is a string representing a task to mark complete\n> 09_multi_class... 34 # Returns nothing\n> 10_multi_class... o 35 # Fails if the task doesn't exist\n36 end\n37 end\n3\n39\n40  ## 3. Create Examples as Tests\n41\n42 _Make a list of examples of how the class will behave in different situations._\na3\na4 \" 'ruby\n45\n46 s\na7\n48 _Encode each example as a test. You can add to the above list as you go._\na9\n50 ## 4. Implement the Behavioux\n51\n> TIMELINE 52 _After each test you write, follow the test-driving process of red, green,\nmain® 0A0 n3 32 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 155,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X n@ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design. md Qn Tasks Class Design Rec pe : ## 2. Design the Class Interface  97_single_class_design - D\n> 00_scratch . 14\n> 01_intro_and_git 15  ## 2. Design the Class Interface\n> 02_testing_bites * 16\n« > 03_single_met... * 17 _Include the initializer and public methods with all parameters and return\n> 04_single_met... ® values._\n> 05_debugging 1 * 18\n> 06_single_clas... * 19 \" xuby\nv 07_single_clas.. * 20 class TodolList\nv lib s 21 def initializer\n@ phone_book.... U 22 end\nv recipes B 23\n¥ phone_desig... U 24 def add(task) # task is a string representing @ instruction\n¥ tasks_design... U 25 # Return nothing -\n= s 26 end\nU e ;: def list\n.’x_m\"\" : 29 # Returns a list of the tasks added as strings\ny £ 30 ‘Ercept the completed ones\nGemfile u\n31 end\nGemfile.lock v 32\n> 08_debugging... © 33 def complete(task) # taosk is a string representing o task to mark complete\n> 09_multi_class... 34 # Returns nothing\n> 10_multi_class... o 35 # Fails if the task doesn't exist\n36 end\n37 end\n3\n39\n40  ## 3. Create Examples as Tests\n41\n42 _Make a list of examples of how the class will behave in different situations._\na3\na4 \" 'ruby\n45\na6\na7\n48 _Encode each example as a test. You can add to the above list as you go._\na9\n50 #¢# 4. Implement the Behavioux\n51\n> TIMELINE 52 _After each test you write, follow the test-driving process of red, green,\n= N - Zasciad Tl Snaces 2l UTEEB LT iarkdown Spe .\n"
  },
  {
    "seconds": 156,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design. md > Elr: Tasks Class Design Recipe : ## 2. Design the Class Interface  97_single_class_design - |:|\n> 00_scratch . 14\n> 01intro_and_git 15  ## 2. Design the Class Interface\n> 02_testing_bites ® 16\n- > 03_single_met... * 17 _Include the initializer and public methods with all parameters and return\n> 04_single_met... ® values._\n> 05_debugging 1 * 18\n> 06_single_clas... * 19 \" ruby\nv 07_single_clas... * 20 class TodoList\nv lib B 21 def initializer\n@ phone_book.... U 22 end\nv recipes B 23\n¥ phone_desig... U 24 def add(task) # task is a string representing a instruction\nVitsakaldesn U 25 # Return nothing -\nT wpac e 26 end\n@ phone_book... U 27\n@ soec Ralnar 11 28 def list\nP - 29 # Returns a list of the tasks added as strings\n30 # [except the completed ones\nGemfile u\n31 end\nGemfile.lock v 32 I\n> 08_debugging... © 33 def complete(task) # task is a string representing a task to mark complete\n> 09_multi_class... 34 # Returns nothing\n> 10_multi_class... * 35 # Fails if the task doesn't exist\n36 end\n37 end\n3\n39\n40  ## 3. Create Examples as Tests\n41\n42 _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n45\n%\n47\na8 _Encode each example as a test. You can add to the above list as you go._\n49\n50 ## 4. Implement the Behavioux\n51\n> TIMELINE 52 _After each test you write, follow the test-driving process of red, green,\nmain* 0AC 30, Col 7 Spaces:2 UTF-8 LF Markdown Spe! ®\n"
  },
  {
    "seconds": 157,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design. md > Elr: Tasks Class Design Recipe : ## 2. Design the Class Interface  97_single_class_design - |:|\n> 00_scratch . 14\n> 01intro_and_git 15  ## 2. Design the Class Interface\n> 02_testing_bites ® 16\n- > 03_single_met... * 17 _Include the initializer and public methods with all parameters and return\n> 04_single_met... ® values._\n> 05_debugging 1 * 18\n> 06_single_clas... * 19 \" ruby\nv 07_single_clas... * 20 class TodoList\nv lib B 21 def initializer\n@ phone_book.... U 22 end\nv recipes B 23\n¥ phone_desig... U 24 def add(task) # task is a string representing a instruction\nVitsakaldesn U 25 # Return nothing -\nT wpac e 26 end\n@ phone_book... U 27\n@ soec Ralnar 11 28 def list\nP - 29 # Returns a list of the tasks added as strings\n30 # [except the completed ones\nGemfile u\n31 end\nGemfile.lock v 32\n> 08_debugging... © 33 def coLplntc(task) # task is a string representing a task to mark complete\n> 09_multi_class... 34 # Returns nothing\n> 10_multi_class... * 35 # Fails if the task doesn't exist\n36 end\n37 end\n3\n39\n40  ## 3. Create Examples as Tests\n41\n42 _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n45\n%\n47\na8 _Encode each example as a test. You can add to the above list as you go._\n49\n50 ## 4. Implement the Behavioux\n51\n> TIMELINE 52 _After each test you write, follow the test-driving process of red, green,\nmain* 0AC 30, Col 7 Spaces:2 UTF-8 LF Markdown Spe! ®\n"
  },
  {
    "seconds": 158,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\n RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > & ## 2. Design the Class Interface  @7_single_class_design - [|\n> 00_scratch B 19 \" ruby\n> 01_intro_and_git 20 class TodoList\n> 02_testing_bites 21 def initializer\nBl > 03_single_met.. ® 22 end\n> 04_single_met.. * 23\n> 05_debugging_1 ® 24 def add(task) # task is a string representing a instruction\n> 06_single_clas... 25 # Return nothing\nv 07_single_clas... * 2 ond\nv lib ' ;; def list\ne s\ne pwone_book e 29 # Returns a list of the tasks added as strings\n. e 30 # [except the completed ones\n¥ phone_desig... U 3 ond £\n¥ tasks_design... U 32\nSaepes . 33 def complete(task) # task is a string representing a task to mark complete\n@ phone_book... U 34 # Returns nothing\n@ spec_helper.... U 35 # Fails if the task doesn't exist\n-rspec v 36 end\nGemfile u 37  end\nGemfile.lock v 38 e\n> 08_debugging... * 39\n> 09_multi_class... * 40 ## 3. Cxhate Examples as Tests\n> 10_multi_class... » 41\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" “xuby\n45\n6\na7\n48 _Encode each example as a test. You can add to the above list as you go._\n49\n50 ## 4. Implement the Behaviour\n51\n52 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n53\n> TIMELINE\nmain® 0AC 130,Col 7 Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 159,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > 5 ## 2. Create Examples as Tests 07_single_class_design - D\n> 00_scratch B 19 \" ruby\n> 01_intro_and_git 20 class TodoList\n> 02_testing_bites 21 def initializer\nBl > 03_single_met.. ® 22 end\n> 04_single_met.. * 23\n> 05_debugging_1 ® 24 def add(task) # task is a string representing a instruction\n> 06_single_clas... 25 # Return nothing\nv 07_single_clas... * 2 ond\nv lib ' ;; def list\ne s\nvl’:::_book.,.. :’ 29 # Returns a list of the tasks added as strings\ni 30 # Except the completed ones\n¥ phone_desig... U 2 ond\n¥ tasks_design... U 32\nSaepes . 33 def complete(task) # task is a string representing a task to mark complete\n@ phone_book... U 34 # Returns nothing\n@ spec_helper.... U 35 # Fails if the task doesn't exist\n-rspec v 36 end\nGemfile 1] 37 end\nGemfile.lock v 38 e |}\n> 08_debugging... * 39\n> 09_multi_class... * 40 ## 3. Create Examples as Tests\n> 10_multi_class... » 41\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" xuby\na5 | 1\na6\na7\n48 _Encode each example as a test. You can add to the above list as you go._\n49\n50 ## 4. Implement the Behaviour\n51\n52 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n53\n> TIMELINE\nmain* 0AC 45, Col1 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 160,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > 5 ## 2. Create Examplas as Tests 07_single_class_design - D\n> 00_scratch B 19 \" ruby\n> 01_intro_and_git 20 class TodoList\n> 02_testing_bites 21 def initializer\nBl > 03_single_met.. ® 22 end\n> 04_single_met.. * 23\n> 05_debugging_1 ® 24 def add(task) # task is a string representing a instruction\n> 06_single_clas... 25 # Return nothing\nv 07_single_clas... * 2 ond\nv lib ' ;; def list\ne s\ne pwone_book e 29 # Returns a list of the tasks added as strings\nM recees i i 30 # Except the completed ones\n¥ phone_desig... U 2 ond\n¥ tasks_design... U 32\nSaepes . 33 def complete(task) # task is a string representing a task to mark complete\n@ phone_book... U 34 # Returns nothing\n@ spec_helper.... U 35 # Fails if the task doesn't exist\n-rspec v 36 end\nGemfile u 37  end\nGemfile.lock v 38 e |}\n> 08_debugging... * 39\n> 09_multi_class... * 40 ## 3. Create Examples as Tests\n> 10_multi_class... » 41\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" “ruby\na5 |\na6 Vil\na7\n48 _Encode each example as a test. You can add to the above list as you go._\n49\n50 ## 4. Implement the Behaviour\n51\n52 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n53\n> TIMELINE\nmain* 0AC nd 1 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 161,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Create Examples as Tests  @7_single_class_design -+ D\n> 00_scratch B 19 \" ruby\n> 01_intro_and_git 20 class TodolList\n> 02_testing_bites 21 def initializer\nBl > 03_single_met.. ® 22 end\n> 04_single_met... * 23\n> 05_debugging_1 * 24 def add(task) # task is a string representing a instruction\n> 06_single_clas... 25 # Return nothing\nv 07_single_clas... * o4 end\ne B = [\nv.’m‘m\"\" ‘: 29 # Returns a list of the tasks added as strings\n_ 30 # Except the completed ones\n¥ phone_desig... U n end\n¥ tasks_design... U 32\nEaeres . 33 def complete(task) # task is a string representing a task to mark complete\n@ phone_book... U 34 # Returns nothing\n@ spec_helper.... U 35 # Fails if the task doesn't exist\n-rspec v 36 end\nGemfile u 37  end\nGemfile.lock v 38 A -\n> 08_debugging... * 39\n> 09_multi_class... * 40 ## 3. Create Examples as Tests\n> 10_multi_class... * 41\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" \"ruby\na5 #1\nw |\na7 o\n48\n49 _Encode each example as a test. You can add to the above list as you go._\n50\n51 ## 4. Implement the Behaviour\n52\n53 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n54\n> TIMELINE\nmain® [N n 46 11 Spaces: 2 JTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 162,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2] # Tasks Class Design Recipe > () ## 2. Create Examples as Tests  97_single_class_design » D\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n“ > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... ® 23 ‘\nv 07_single_clas... * 24 def add(task) # task is a string representing a instruction\nv lib ° 25 # Return nothing\n@ phone_book.... U A4 [yend\nVv recipes o o\n¥ phone_desig... U 28 def list\no 29 # Returns a list of the tasks added as strings\n¥ tasks_design... U\n30 # Except the completed ones\nb L p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no -/ 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end -\n> 08_debugging... * 37 end 1\n> 09_multi_class... * 38 s\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 #1\na6 |\na7 o\n48\n49  _Encode each example as a test. You can add to the above list as you go._\n50\n51 ## 4. Implement the Behaviour\n52\n53 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n54\n> TIMELINE\nmain® [N n 46 11 Spaces: 2 JTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 163,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2] # Tasks Class Design Recipe > () ## 2. Create Examples as Tests  97_single_class_design » D\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n“ > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... ® 23 ‘\nv 07_single_clas... * 24 def add(task) # task is a string representing a instruction\nv lib ° 25 # Return nothing\n@ phone_book.... U A4 [yend\nVv recipes o o\n¥ phone_desig... U 28 def list\no 29 # Returns a list of the tasks added as strings\n¥ tasks_design... U\nS eac = 30 # Except the completed ones\n3 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no -/ 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end -\n> 08_debugging... * 37 end\n> 09_multi_class... * 38 s\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 #1\na6 tq\na7 o\n48\n49  _Encode each example as a test. You can add to the above list as you go._\n50\n51 ## 4. Implement the Behaviour\n52\n53 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n54\n> TIMELINE\nmain® 0AC 46,Col3 Spaces:2 UTF-8 LF Markdown Spe =\n"
  },
  {
    "seconds": 164,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2] # Tasks Class Design Recipe > () ## 2. Create Examples as Tests  @7_single_class_design + D\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n“ > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... ® 23 ‘\nv 07_single_clas... * 24 def add(task) # task is a string representing a instruction\nv lib ° 25 # Return nothing\n@ phone_book.... U A4 [yend\nVv recipes o o\n¥ phone_desig... U 28 def list\no 29 # Returns a list of the tasks added as strings\n¥ tasks_design... U\nS eac = 30 # Except the completed ones\n3 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no -/ 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end -\n> 08_debugging... * 37 end\n> 09_multi_class... * 38 s\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 #1\na6 todo\na7 o\n48\n49  _Encode each example as a test. You can add to the above list as you go._\n50\n51 ## 4. Implement the Behaviouxr\n52\n53 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n54\n> TIMELINE\nmain® [N n 46 5 Spaces:2 JTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 165,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (=) ## 2. Create Examples as Tests  97_single_class_design » D\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n“ > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... ® 23 ‘\nv 07_single_clas... * 24 def add(task) # task is a string representing a instruction\nv lib ° 25 # Return nothing\n@ phone_book.... U A4 [yend\nVv recipes o o\n¥ phone_desig... U 28 def list\no 29 # Returns a list of the tasks added as strings\n¥ tasks_design... U\n30 # Except the completed ones\nb L p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no -/ 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end -\n> 08_debugging... * 37 end\n> 09_multi_class... * 38 s\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 #1\na6 todo_list = I\na7 o\n48\n49  _Encode each example as a test. You can add to the above list as you go._\n50\n51 ## 4. Implement the Behaviouxr\n52\n53 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n54\n> TIMELINE\nmain® [N n 46, Col 13 Spaces: 2 JTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 166,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging 1 ® 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n2 29 # Returns a list of the tasks added as strings\n¥ tasks_design.. U\n30 # Except the completed ones\nYoopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\nepee - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfilelock U 36 end -\n> 08_debugging... * 37  end\n> 09_multi_class... * 38 SO\\\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 # 1\n46 todo_list = Todol|\na7 o\n48\n49  _Encode each example as a test. You can add to the above list as you go._\n50\n51  ## 4. Implement the Behaviour\n52\n53 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n54\n> TIMELINE\nmain® 0AC n 4€ 18 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 167,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging 1 ® 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n2 29 # Returns a list of the tasks added as strings\n¥ tasks_design.. U\n30 # Except the completed ones\nYoopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\nepee - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfilelock U 36 end -\n> 08_debugging... * 37  end\n> 09_multi_class... * 38 SO\\\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 # 1\n46 todo_list = TodoList.new\na7 o\n48\n49  _Encode each example as a test. You can add to the above list as you go._\n50\n51  ## 4. Implement the Behaviour\n52\n53 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n54\n> TIMELINE\nmain* 0 ( n 46 )l 25 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 168,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging 1 ® 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n2 29 # Returns a list of the tasks added as strings\n¥ tasks_design.. U\n30 # Except the completed ones\nYoopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\nepee - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock u 36 end | =\n> 08_debugging... * 37  end\n> 09_multi_class... * 38 SO\\\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 #1\na6 todo_list = TodoList.new\na7\n48 -\n49\n50 _Encode each example as a test. You can add to the above list as you go._\n51\n52 ## 4. Implement the Behaviour\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 55\nmain® 0AC n a7 1 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 169,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging 1 ® 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n2 29 # Returns a list of the tasks added as strings\n¥ tasks_design.. U\n30 # Except the completed ones\nYoopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\nepee - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock u 36 end | =\n> 08_debugging... * 37  end\n> 09_multi_class... * 38 SO\\\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 #1\na6 todo_list = TodoList.new\na7\n48 -\n49\n50 _Encode each example as a test. You can add to the above list as you go._\n51\n52 ## 4. Implement the Behaviour\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 55\nmain® 0AC n a7 1 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 170,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging 1 ® 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n2 29 # Returns a list of the tasks added as strings\n¥ tasks_design.. U\n30 # Except the completed ones\nYoopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\nepee - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock u 36 end | =\n> 08_debugging... * 37  end\n> 09_multi_class... * 38 SO\\\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 #1\na6 todo_list = TodoList.new\n47  todo\n48 :\n49\n50 _Encode each example as a test. You can add to the above list as you go._\n51\n52 ## 4. Implement the Behaviour\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 55\nmain® 0AC na 5 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 171,
    "text": "@eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > &) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n¥ tasks_design... U 29 # Returns a list of the tasks added as strings\n- 30 # Except the completed ones\nYiopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end B\n> 08_debugging... * 37 end\n> 09_multi_class... * 38 SON\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 # 1\n46  todo_list = TodoList.new\n47 todo_list.1i]\n8\n49\n50 _Encode each example as a test. You can add to the above list as you go._\n51\n52  ## 4. Implement the Behaviour\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 55\nmain® 0AC YA Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 172,
    "text": "@eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > &) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n¥ tasks_design... U 29 # Returns a list of the tasks added as strings\n- 30 # Except the completed ones\nYiopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end B\n> 08_debugging... * 37 end\n> 09_multi_class... * 38 SON\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 # 1\n46  todo_list = TodoList.new\n47  todo_list.list # o\n8\n49\n50 _Encode each example as a test. You can add to the above list as you go._\n51\n52  ## 4. Implement the Behaviour\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 55\nmain® (N 147,Col 19 Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 173,
    "text": "@eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > &) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n¥ tasks_design... U 29 # Returns a list of the tasks added as strings\n- 30 # Except the completed ones\nYiopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end B\n> 08_debugging... * 37 end\n> 09_multi_class... * 38 SON\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 # 1\n46  todo_list = TodoList.new\n47  todo_list.list # => []|\n8\n49\n50 _Encode each example as a test. You can add to the above list as you go._\n51\n52  ## 4. Implement the Behaviour\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 55\nmain® 0AC 47,Col23 Spaces:2 UTF-8 LF Markdown Spe S\n"
  },
  {
    "seconds": 174,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > # tasks_design.md > [ # Tasks Class Design Recipe > &) ## 3. Create Examples as Tests 07_single_class_design - [|\n> 00_scratch . values. _\n> 01_intro_and_git 18\n> 02_testing_bites 19 \" ruby\n\" > 03_single_met... * 20 class TodoList\n> 04_single_met... * 21 def initializer\n> 05_debugging_1 * 22 end\n> 06_single_clas... *® 23\nv 07_single_clas.. * 24 def add(task) # task is a string representing a instruction\nv b ° 25 # Return nothing\n@ phone_book.... U 26 end\nVv recipes o £\ne 28 def list\n¥ tasks_design... U 29 # Returns a list of the tasks added as strings\n- 30 # Except the completed ones\nYiopee p 31 end\n@ phone_book... U 32\n@ spec_heiper.... U 33 def complete(task) # task is a string representing a task to mark complete\no - 34 # Returns nothing\nGemfile L 35 # Fails if the task doesn't exist\nGemfile.lock v 36 end B\n> 08_debugging... * 37 end\n> 09_multi_class... * 38 SON\n> 10_multi_class... * 39\n40  ## 3. Create Examples as Tests\na1\na2 _Make a list of examples of how the class will behave in different situations._\n43\na4 \" ruby\na5 # 1\n46  todo_list = TodoList.rfew\n47  todo_list.list # => []|\n8\n49\n50 _Encode each example as a test. You can add to the above list as you go._\n51\n52  ## 4. Implement the Behaviour\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 55\nmain® 0AC 47,Col23 Spaces:2 UTF-8 LF Markdown Spe S\n"
  },
  {
    "seconds": 175,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - D\n> 00_scratch ° <9 Caddd 1UUULLD L\n- 21 def initializer\n> 01_intro_and_git 22 end\n2 > 02_testing_bites 23\n: 2103 angie_met_ e 24 def add(task) # task is a string representing @ instruction\n> 04_single_met... © 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 07_single_clas... * 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design.. U 33 def complete(task) # task is a string representing a task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\nP v 37 end\nGemfile u 38 U\nGemfilelock U i |\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\n> 09_multi_class... * a1\n510 mut class.. & 42 _Make a list of examples of how the class will behave in different situations._\na3\na4 * \" 'ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []|\n48 R\na9\n50 _Encode each example Js a test. You can add to the above list as you go._\n51\n52 ## 4. Implement the Behavioux\n53\n54 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n55\n> TIMELINE\nmain® 0AC 'y 3 Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 176,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - [|\n> 00_scratch ° “~v Caddd> 1UUULASL\nS 01-mro gt 21 def initializer\nS 22 end\n2 > 02_testing_bites * 23\n. 2103 singie et . 24 def add(task) # task is a string representing a instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 07_single_clas... * 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design.. U 33 def complete(task) # task is a string representing a task to mark complete\nv spec © 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns v 37  end\nGemfile u 8 U\nGemfilelock U i u\n> 08_debugging... 40 ## 3. Create Examples as Tests\n> 09_multi_class... * i\nS 10 multl class.. & :; _Make a list of examples of how the class will behave in different situations._\na4 \" \"ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n8 ¢4\n49  todo_list = TodoList.new\n50  todo_list.list # => []\n51\n52\n53 _Encode each example as a test. You can add to the above list as you go._\n54\n55 ## 4. Implement the Behaviour\n56\n57 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n58\n> TIMELINE\nmain® [\\ [i n 48, Col 4 (48 selected) Spaces: 2 JTF-8 LF Markdowr Spel 9\n"
  },
  {
    "seconds": 177,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\nSToa scrateh < 40 Ciasy 1UuULISL\n> 0L jotrosand it 21 def initializer\nS 22 end\n2 > 02_testing_bites * 23\n. 2103 singie et . 24 def add(task) # task is a string representing a instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 07_single_clas... * 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design.. U 33 def complete(task) # task is a string representing a task to mark complete\nv spec © 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns M 37  end\nGemfile u 8 U\nGemfilelock U 39 [\n> 08_debugging... 40 ## 3. Create Examples as Tests\nR 41\nL i 42 Make a list of examples of how the class will behave in different situations\n> 10_multi_class... * 2 - i\na4 \" \"ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => [] 1\n@ |\na9 #1\n50 todo_list = TodoList.new\n51 todo_list.list # => []\n52 i\n53\n54 _Encode each example as a test. You can add to the above list as you go._\n55\n56 ## 4. Implement the Behavioux\nA 57\n58 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n> TIMELINE 59\nmain® 0AC n4 1 Spaces:2 UTF-8 LF Markdowr Spe ]\n"
  },
  {
    "seconds": 178,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\nST007scratch < 40 Ciasy 1UuULISL\nS 01'\"‘\"0 gt 21 def initializer\nS 22 end\n2 > 02_testing_bites * 23\n. 2103 singie et . 24 def add(task) # task is a string representing a instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 07_single_clas... * 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design.. U 33 def complete(task) # task is a string representing a task to mark complete\nv spec © 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns M 37  end\nGemfile u 8 U\nGemfilelock U 39\n> 08_debugging... 40 ## 3. Create Examples as Tests B\n> 09_multi_class... * i\nS 10 multl class.. & :; _Make a list of examples of how the class will behave in different situations._\na4 \" \"ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51 |\n52 todo_list.list # => []\n53\n54\n55 _Encode each example as a test. You can add to the above list as you go._\n56\ng 57 ## 4. Implement the Behavioux\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0 [ 1 1 Spaces: 2 JTF-8 LF Markdowr Spel 9\n"
  },
  {
    "seconds": 179,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\nSToa scrateh < 40 Ciasy 1UuULISL\n> 0L jotrosand it 21 def initializer\nS 22 end\n2 > 02_testing_bites * 23\n. 2103 singie et . 24 def add(task) # task is a string representing a instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 07_single_clas... * 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design.. U 33 def complete(task) # task is a string representing a task to mark complete\nv spec © 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns M 37  end\nGemfile u 8 U\nGemfilelock U 39\n> 08_debugging... 40 ## 3. Create Examples as Tests B\n> 09_multi_class... * i\nS 10 multl class.. & :; _Make a list of examples of how the class will behave in different situations._\na4 \" \"ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51  todo_list|\n52 todo_list.list # => []\n53\n54\n55 _Encode each example as a test. You can add to the above list as you go._\n56\ng 57 ## 4. Implement the Behavioux\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0AC n Spaces:2 UTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 180,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U e @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\nSToa scrateh < 40 Ciasy 1UuULISL\n> 0L jotrosand it 21 def initializer\nS 22 end\n2 > 02_testing_bites * 23\n. 2103 singie et . 24 def add(task) # task is a string representing a instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 07_single_clas... * 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design.. U 33 def complete(task) # task is a string representing a task to mark complete\nv spec © 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns M 37  end\nGemfile u 8 U\nGemfilelock U 39\n> 08_debugging... 40 ## 3. Create Examples as Tests B\nR 41\nL i 42 Make a list of examples of how the class will behave in different situations\n> 10_multi_class... * 2 - i\na4 \" \"ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51  todo_list.add(')\n52 todo_list.list # => []\n53\n54\n55 _Encode each example as a test. You can add to the above list as you go._\n56\ng 57 ## 4. Implement the Behavioux\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0 [ n 51 16 Spaces: 2 JTF-8 LF Markdowr Spel 9\n"
  },
  {
    "seconds": 181,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - [\n> 00_scratch = P CAd33 IUUULASL\n> 01 Jotro.and /it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n- 203 angie_met_1e 24 def add(task) # task is o string representing o instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37  end\nGemfile u 38 o\nGemfilelock U 2\n> 08_debugging... 40 ## 3. Create Examples as Tests =\nR 41\n> 09_multi_class... *\nN T e :; _Make a list of examples of how the class will behave in different situations._\na4 \"7 ruby\n45 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51  todo_list.add()\n52 todo_list.list # => []\n53 R\n54\n55 _Encode each example os o test. You can add to the above list as you go._\n56\n4 57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain* 0AC n51,Col16 Spaces:2 UTF-8 LF Markdown Spe *\n"
  },
  {
    "seconds": 182,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  7_single_class_design - [\n> 00_scratch = P CAd33 IUUULASL\n> 01 Jotro.and /it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n- 203 angie_met_1e 24 def add(task) # task is o string representing o instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37  end\nGemfile u 38 o\nGemfilelock U 2\n> 08_debugging... 40 ## 3. Create Examples as Tests =\nR 41\n> 09_multi_class... *\nN T e :; _Make a list of examples of how the class will behave in different situations._\na4 \"7 ruby\n45 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51  todo_list.add(\"H)\n52 todo_list.list # => []\n53 R\n54\n55 _Encode each example os o test. You can add to the above list as you go._\n56\n4 57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain* 0AC 51 17 Spaces:2 UTF-8 LF Markdown Spe *\n"
  },
  {
    "seconds": 183,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - [\n> 00_scratch ° “v CaAddd> IUUULAS L\nT 21 def initializer\n> 01_intro_and_git 22 end\n3 > 02_testing_bites 23\n- 203 angie_met_1e 24 def add(task) # task is o string representing o instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37  end\nGemfile u 38 o\nGemfilelock U 2\n> 08_debugging... 40 ## 3. Create Examples as Tests =\nR 41\n> 09_multi_class... *\nN T e :; _Make a list of examples of how the class will behave in different situations._\na4 \"7 ruby\n45 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51  todo_list.add(\"Wash the cd)\n52 todo_list.list # => []\n53 R\n54\n55 _Encode each example os o test. You can add to the above list as you go._\n56\n4 57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0AC ns 27 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 184,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - [\n> Oo_scralch ° “v CaAddd> IUUULAS L\n> 01 Jotro.and /it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n- 203 angie_met_1e 24 def add(task) # task is o string representing o instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37  end\nGemfile u 38 o\nGemfilelock U 2\n> 08_debugging... 40 ## 3. Create Examples as Tests B\nR 41\n> 09_multi_class... *\nN T e :; _Make a list of examples of how the class will behave in different situations._\na4 \"7 ruby\n45 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => []|\ns3\n54\n55 _Encode each example os o test. You can add to the above list as you go._\n56\n4 57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0AC 23 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 185,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - [\n> Oo_scralch ° “v CaAddd> IUUULAS L\n> 01 Jotro.and /it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n- 203 angie_met_1e 24 def add(task) # task is o string representing o instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37  end\nGemfile u 38 o\nGemfilelock U 2\n> 08_debugging... 40 ## 3. Create Examples as Tests B\nR 41\n> 09_multi_class... *\nN T e :; _Make a list of examples of how the class will behave in different situations._\na4 \"7 ruby\n45 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [\ns3\n54\n55 _Encode each example os o test. You can add to the above list as you go._\n56\n4 57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0AC Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 186,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - [\n> 00_scratch ° “v CaAddd> IUUULAS L\nS 01'\"‘\"0 gt 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n- 203 angie_met_1e 24 def add(task) # task is o string representing o instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37  end\nGemfile u 38 o\nGemfilelock U 2\n> 08_debugging... 40 ## 3. Create Examples as Tests B\ne :; Make a-list 1 how the ¢l ill behave in di, t situati\nN T e p g a-list of examples of e class w ehave in different situations._\na4 \"7 ruby\n45 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash |}\ns3\n54\n55 _Encode each example os o test. You can add to the above list as you go._\n56\n4 57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0AC 5 8 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 187,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch p U Cia3d IUuULISL\nSOt e ancigt 21 def initializer\nS 22 end\n3 > 02_testing_bites 23\n; 2103 gngie_met_1s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # task is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 8 U\nGemfilelock U >\n> 08_debugging... 40 ## 3. Create Examples as Tests L\n> 09_multi_class... * -\nN T e :; _Make a list of examples of how the class will behave in different situations._\naa \"7 ruby\na5 #1\n46  todo_list = TodoList.new\n47 todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car]|\n53 s\n54\n55 _Encode each example as a test. You can add to the above list as you go._\n56\n57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0AC . 36 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 188,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  @7_single_class_design - |:|\nST00 scrateh p U Cia3d IUuULISL\n5 01'\"‘\"0 ot 21 def initializer\nS 22 end\n3 > 02_testing_bites 23\n; 2103 gngie_met_1s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # task is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 8 U\nGemfilelock U >\n> 08_debugging... 40 ## 3. Create Examples as Tests L\n> 09_multi_class... * -\nN T e :; _Make a list of examples of how the class will behave in different situations._\naa \"7 ruby\na5 #1\n46  todo_list = TodoList.new\n47 todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car”]|\n53 s\n54\n55 _Encode each example as a test. You can add to the above list as you go._\n56\n57 ## 4. Implement the Behaviour\n58\n59 _After each test you write, follow the test-driving process of red, green,\n> TIMELINE refactor to implement the behaviour.\nmain® 0AC 5 7 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 189,
    "text": "eoce tasks_design.md — rspec_setup 08\nIf\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - [|\n> 00_scratch p U Cia3d IUuULISL\nSOt e ancigt 21 def initializer\nS 22 end\n3 > 02_testing_bites 23\n; 2103 gngie_met_1s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # task is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U >\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41 =\n> 09_multi_class... *\nN T e :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #1\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\nsa  #|\n55 s\n56\n57 _Encode each example os @ test. You can add to the above list as you go._\n58\n59 ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC 4,Col3 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 190,
    "text": "eoce tasks_design.md — rspec_setup 08\nIf\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - [|\nST00 scrateh p U Cia3d IUuULISL\n- 21 def initializer\n> 01_intro_and_git 22 end\n3 > 02_testing_bites 23\n; 2103 gngie_met_1s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # task is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U 3 |5\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\ns :: Make a-list 1 how the cl. ill behave in di, t situati\nN T e pe _Make a list of examples of how the class w ehave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 #h\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #\n55 Eat\n56\n57 _Encode each example os @ test. You can add to the above list as you go._\n58\n59 ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC a R ET T J V) S W ¥ PV Spel -\n"
  },
  {
    "seconds": 191,
    "text": "eoce tasks_design.md — rspec_setup 08\nIf\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - [|\n> 00_scratch p U Cia3d IUuULISL\nSOt e ancigt 21 def initializer\nS 22 end\n3 > 02_testing_bites 23\n; 2103 gngie_met_1s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # task is a string representing o task to mark complete\nv spec ° 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U >\n> 08_debugging... ® 40 ## 3. Create Examples as Tests B\nR 41\n> 09_multi_class... *\nN T e :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\n49 # 2\n50 todo_list = TodoList.new\n51  todp_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #\n55 Eat\n56\n57 _Encode each example os @ test. You can add to the above list as you go._\n58\n59 ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® [N n 51 4 Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 192,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nTG0 scratehs . U tiasd IUuULISL\n> (01 jotro and /it 21 def initializer\nSy 22 end\n3 > 02_testing_bites 23\n' 2A03 gl met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41 =\n> 09_multi_class... *\nN ek e :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\nsa #3|\n55 e\n56\n57 _Encode each example as a test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC n 54, 5 Spaces:2 UTF-8 LF Markdown Spe! »\n"
  },
  {
    "seconds": 193,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nTG0 scratehs . U tiasd IUuULISL\n> (01 jotro and /it 21 def initializer\nSy 22 end\n3 > 02_testing_bites 23\n' 2A03 gl met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41 =\n> 09_multi_class... *\nN ek e :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\nsa #3|\n55 e\n56\n57 _Encode each example as @ test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC n 54, 5 Spaces:2 UTF-8 LF Markdown Spe! »\n"
  },
  {
    "seconds": 194,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nTG0 scratehs . U tiasd IUuULISL\n> (01 jotro and /it 21 def initializer\nSy 22 end\n3 > 02_testing_bites 23\n' 2A03 gl met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41 =\n> 09_multi_class... *\nN ek e :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3\n55 e\n56\n57 _Encode each example as a test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC \" 54, 4 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 195,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nTG0 scratehs . U tiasd IUuULISL\n> (01 jotro and /it 21 def initializer\nSy 22 end\n3 > 02_testing_bites 23\n' 2A03 gl met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\n> 09_multi_class... * - [ ]\nN ek e :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 e\n56\n57 _Encode each example as a test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC \" 54, 4 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 196,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nTG0 scratehs . U tiasd IUuULISL\n> (01 jotro and /it 21 def initializer\nSy 22 end\n3 > 02_testing_bites 23\n' 2A03 gl met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib L 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper.... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\n> 09_multi_class... * - [ ]\nN ek e :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3\n55 e\n56\n57 _Encode each example as a test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC \" 54, 4 Spaces:2 UTF-8 LF Markdown Spel -\n"
  },
  {
    "seconds": 197,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nY00 scratch . U tiasd IUuULISL\nS 01-mro oot 21 def initializer\nThpies 22 end\n3 > 02_testing_bites 23\n' 2A03 angie_met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Zsingle_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U bt\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41 =\n> 09_multi_class... *\nN Tk s :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 e\n56\n57 _Encode each example as @ test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain*® 0 ( n54, Col4 Spaces:2 JTF-8 LF Markdowr: Spe ]\n"
  },
  {
    "seconds": 198,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nY00 scratch . U tiasd IUuULISL\nS 01-mro oot 21 def initializer\nThpies 22 end\n3 > 02_testing_bites 23\n' 2A03 angie_met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Zsingle_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile v 38 h |\nGemfilelock U bt\n> 08_debugging... ® 40 ## 3. Create Examples as Tests 4\nR 41\n> 09_multi_class... *\nN Tk s :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\na7 todo_list.list # =>-[]\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todp_list.list # => [“Wash the car\"]\n53\n54 # 3\n55\n56\n57 _Encode each example as @ test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC n 52, 14 Spaces: 2 JTF-8 LF Markdowr Spe! )\n"
  },
  {
    "seconds": 199,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nSTo scrsechs . U tiasd IUuULISL\n> (01 Jotro.and /it 21 def initializer\nThpies 22 end\n3 > 02_testing_bites 23\n' 2A03 angie_met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Zsingle_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U 39 g\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41\n> 09_multi_class... *\nN Tk s :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 ¢4\n50  todo_list = TodoList.new\n51  todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3\n55\n56\n57 _Encode each example as @ test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0AC 4 3 (92 selected) Spaces:2 UTF-8 LF Markdowr: Spe o\n"
  },
  {
    "seconds": 200,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nY00 scratch . U tiasd IUuULISL\nS 01-mro oot 21 def initializer\nThpies 22 end\n3 > 02_testing_bites 23\n' 2A03 angie_met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Zsingle_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 38 h\nGemfilelock U bt |\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41\n> 09_multi_class... *\nN Tk s :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50  todo_list = TodoList.new\n51  todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\nss X\n56\n57 _Encode each example as @ test. You can add to the above list as you go._\n58\n59  ## 4. Implement the Behaviour\n> TIMELINE 60\nmain® 0 ( 50, C 91 selected) Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 201,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\nSTo scrsechs . U tiasd IUuULISL\n> (01 Jotro.and /it 21 def initializer\nThpies 22 end\n3 > 02_testing_bites 23\n' 2A03 angie_met_ e 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Zsingle_clas... ® 28 def list\nv lib * 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing o task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemfile u 8\nGemfilelock U 39\n> 08_debugging... 40 ## 3. Create Examples as Tests\nR 41\n> 09_multi_class... * —\nN Tk s :; _Make a list of examples of how the class will behave in different situations._\naa \"7 ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3 I\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.list # => [“Wash the car\"j‘\n58 .\n59\n> TIMELINE 60 Encode each example as a test. You can add to the above list as you go.\nmain® 0AC 7 Spaces: 2 JTF-8 LF Markdowr Spel ]\n"
  },
  {
    "seconds": 202,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nSTo0 sersichs . U Ciasd IUuULISL\n(01 jotro.and it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n' 2A03 angie et s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing a task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemlfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41\n> 09_multi_class... * T\nN T s :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n; 57 todo_list.add(\"Wash the cax\")|\n58 todo_list.list # => [“Wash the car\"]\n59 b\n> TIMELINE 60\nmain* 0 ( () ol 30 Spaces: 2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 203,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\n100 scratch . U Ciasd IUuULISL\n5 01-mro gt 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n' 2A03 angie et s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing a task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemlfile u 38 h\nGemfilelock U . 1\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\n> 09_multi_class... * o +\nN T s :; _Make a list of examples of how the class will behave in different situations._ &\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n. 57  todo_list.add(\"Wal the cax\")\n58 todo_list.list # => [“Wash the car\"]\n59 b\n> TIMELINE 60\nmain* 0AC n 57, Col 19 (9 selected) Spaces:2 UTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 204,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nSTo0 sersichs . U Ciasd IUuULISL\n(01 jotro.and it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n' 2A03 angie et s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing a task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemlfile u 38 h\nGemfilelock U % ]\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\n> 09_multi_class... * o +\nN T s :; _Make a list of examples of how the class will behave in different situations._ &\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n. 57  todo_list.add(\"Wash the fax\")\n58 todo_list.list # => [“Wash the car\"]\n59 b\n> TIMELINE 60\nmain® 0AC n 57, Col 25 (3 selected) Spaces:2 UTF-8 LF Markdowr Spel -\n"
  },
  {
    "seconds": 205,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nSTo0 sersichs . U Ciasd IUuULISL\n(01 jotro.and it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n' 2A03 angie et s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing a task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemlfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\nR 41\n> 09_multi_class... * =\nN T s :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47 todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\nA 57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car“I\n59 e\n> TIMELINE 60\nmain® [N 5 8 Spaces: 2 JTF-8 LF Markdowr Spel )\n"
  },
  {
    "seconds": 206,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\nSTo0 sersichs . U Ciasd IUuULISL\n(01 jotro.and it 21 def initializer\ne 22 end\n3 > 02_testing_bites 23\n' 2A03 angie et s 24 def add(task) # task is o string representing @ instruction\n> 04_single_met... 25 # Return nothing\n> 05_debugging 1 * 26 end\n> 06_single_clas... * 27\nv 0Z_single_clas... ® 28 def list\nv lib 1 29 # Returns a list of the tasks added as strings\n@ phone_book.... U 30 # Except the completed ones\nv recipes . 31 end\n¥ phone_desig... U 32\n¥ tasks_design... U 33 def complete(task) # tosk is a string representing a task to mark complete\nv spec o 34 # Returns nothing\n@ phone_book... U 35 # Fails if the task doesn't exist\n@ spec_helper... U 36 end\ns v 37 end\nGemlfile u 38 h\nGemfilelock U .\n> 08_debugging... ® 40 ## 3. Create Examples as Tests\n> 09_multi_class... * - B\nN T s :; _Make a list of examples of how the class will behave in different situations._\naa \" “ruby\na5 #1\n46  todo_list = TodoList.new\n47  todo_list.list # => []\n48\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\nA 57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the carf\n59 e\n> TIMELINE 60\nmain® [N r ol 36 Spaces: 2 JTF-8 LF Markdowr Spel )\n"
  },
  {
    "seconds": 207,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - D\n> 00_scratch - 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites * 32\n« > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 1y\nv lib . o\n@ phone_book.... U 4\ni 40  ## 3. Create Examples as Tests\nV recipes o 41\n¥ [piions_desig_U 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U a3\ns . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\") |}\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, 1}\n59\n60\n61 _Encode each example os a test. You can add to the above list as you go._\n62\n63  ## 4. Implement the Behaviour\n64\n65 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n66\n> TIMELINE\nmain* 0 ( n 58, Col 38 Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 208,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  §7_single_class_design » []\n> 00_scratch - 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites ® 32\n« > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 1y\nv lib . o\n@ phone_book.... U 4\ni 40  ## 3. Create Examples as Tests\nV recipes o 41\n¥ [piions_desig_U 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U a3\nv spec ° 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\") |}\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the 4]\n59\n60\n61 _Encode each example os a test. You can add to the above list as you go._\n62\n63  ## 4. Implement the Behaviour\n64\n65 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n66\n> TIMELINE\nmain® 0AC n 58 49 Spaces:2 UTF-8 LF Markdown Spe 0\n"
  },
  {
    "seconds": 209,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  §7_single_class_design » []\n> 00_scratch - 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites ® 32\n« > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 1y\nv lib . o\n@ phone_book.... U 4\ni 40  ## 3. Create Examples as Tests\nV recipes o 41\n¥ [piions_desig_U 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U a3\nv spec ° 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\") |}\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]l\n59\n60\n61 _Encode each example os a test. You can add to the above list as you go._\n62\n63  ## 4. Implement the Behaviour\n64\n65 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n66\n> TIMELINE\nmain* 0 ( r 5 Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 210,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  §7_single_class_design » []\n> 00_scratch - 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites ® 32\n« > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 1y\nv lib . o\n@ phone_book.... U 4\ni 40  ## 3. Create Examples as Tests\nV recipes o 41\n¥ [piions_desig_U 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U a3\nv spec ° 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class.. * 52 todo_list.list # => [“Wash the car\"] |\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59 I\n60\n61 _Encode each example os a test. You can add to the above list as you go._\n62\n63  ## 4. Implement the Behaviour\n64\n65 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n66\n> TIMELINE\nmain® 0 ( n 58 4 Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 211,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  §7_single_class_design » []\n> 00_scratch - 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites ® 32\n« > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 1y L\nv lib . o\n@ phone_book.... U 4\ni 40  ## 3. Create Examples as Tests\nV recipes o 41\n¥ [piions_desig_U 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U a3\ns . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\") ||\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59 o\n60\n61 _Encode each example as a test. You can add to the above list as you go._\n62\n63  ## 4. Implement the Behaviour\n64\n65 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n66\n> TIMELINE\nmain* 0 ( n 58, 53 Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 212,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design -+ |:|\n> 00_scratch B 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites * 32\n9 > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 ond\nv 07_single_clas... ® 37, Senc\nv lib . g\n@ phone_book.... U 22\nAN 40  ## 3. Create Examples as Tests\nVv recipes . 41\ns 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design... U a3\nSepsc . 44 ' ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2 =\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"]\n53 |\n54 #3\n55  todo_list = TodoList.new\n56  todo_list.add(\"Wash-the car\")\n57  todo_list.add(“Wash-the dog\")\n58  todo_list.list # => [“Wosh the car®, “Wash the dog\"]\n59 't\n60\n61 _Encode each example as o test. You can add to the above list as you go._\n62\n63 ## 4. Implement the Behaviour\n64\n65 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n66\n> TIMELINE\nmain® 0 ( 1 1% ol 1 (142 selected) Spaces: 2 JTF-8 LF Markdown Spe! -\n"
  },
  {
    "seconds": 213,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design -+ |:|\n> 00_scratch B 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites * 32\n9 > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 ond\nv 07_single_clas... ® 37, Senc\nv lib . g\n@ phone_book.... U 22\nAN 40  ## 3. Create Examples as Tests\ne . 41\ns 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U a3\ne . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... ® 51  todo_list.add(\"Wash the car\") il\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n59 |\n60 #3\n61  todo_list = TodoList.new\n62  todo_list.add(\"Wash the car\")\n63  todo_list.add(“Wash the dog\")\n64  todo_list.list # => [“Wosh thel car”, “Wash the dog\"]\n65 gl\n66\n67 _Encode each exomple as o test. You can add to the above list as you go._\n68\n> TIMELINE 69 ## 4. Implement the Behaviour\nmain® 0 ( ) n 59 ol 1 (142 selected) Spaces: 2 JTF-8 (3 Markdown Spe -\n"
  },
  {
    "seconds": 214,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design -+ |:|\n> 00_scratch B 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites ® 32\n9 > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 ond\nv 07_single_clas... ® 37, Senc\nv lib . g\n@ phone_book.... U 22\nAN 40  ## 3. Create Examples as Tests\nRoavoRes ‘ a1\ns 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design... U a3\nSepsc . 44 ' ruby\n@ phone_book... U a5 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile v 48 1\nGemfilelock U 49 #2\n> 08_debugging... ® 50 todo_list = TodoList.new d\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] _:_\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 # 3\n61  todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(“Wash the dog\")\n64 todo_list.list # => [“Wash the car”, 'HLsh the dog\"]\n65 e\n66\n67 _Encode each exomple as o test. You can add to the above list as you go._\n68\n> TIMELINE 69 ## 4. Implement the Behaviour\nmain® 0 A C r 64 Col32 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 215,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design -+ |:|\n> 00_scratch B 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites ® 32\n9 > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 ond\nv 07_single_clas... ® 37, Senc\nv lib . g\n@ phone_book.... U 22\nAN 40  ## 3. Create Examples as Tests\nRoavoRes ‘ a1\ns 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design... U a3\nSepsc . 44 ' ruby\n@ phone_book... U a5 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile v 48 1\nGemfilelock U 49 #2\n> 08_debugging... ® 50 todo_list = TodoList.new d\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] _:_\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 # 3\n61  todo_list = TodoList.new\n62  todo_list.add(\"Wash Ehe caxr\")\n63 todo_list.add(“Wash the dog\")\n64 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n65 e\n66\n67 _Encode each exomple as o test. You can add to the above list as you go._\n68\n> TIMELINE 69 ## 4. Implement the Behaviour\nmain® 0 A C r 64 Col32 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 216,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design -+ |:|\n> 00_scratch B 30 # Except the completed ones\n> 01_intro_and_git 31 end\n> 02_testing_bites ® 32\n9 > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 ond\nv 07_single_clas... ® 37, Senc\nv lib . g\n@ phone_book.... U 22\nAN 40  ## 3. Create Examples as Tests\nRoavoRes ‘ a1\ns 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design... U a3\nSepsc . 44 ' ruby\n@ phone_book... U a5 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] -\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 # 3\n61  todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")| I\n64 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n65\n66\n67 _Encode each exomple as o test. You can add to the above list as you go._\n68\n> TIMELINE 69 ## 4. Implement the Behaviour\nmain® 0 A C r 6 al 3 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 217,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites ® 32\ne > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 56 sad\nv 07_single_clas... ® 375\" end\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nv recipes . a\nViphone_desyg 2 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51  todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] T\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")| I\n64 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n65 P\n66\n67 _Encode each example as o test. You can add to the above list as you go._\n68\nS TIMELINE 69  ## 4. Implement the Behaviour\nmain* 0AC ) n63,Col30 Spaces:2 UTF-8 LF Markdown Spe! s\n"
  },
  {
    "seconds": 218,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites ® 32\ne > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 56 sad\nv 07_single_clas... ® 375\" end\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nVv recipes . 41\nViphone_desyg 2 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51  todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] B\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n6 9\n65 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain® 0AO0 . ) : n 64 2 Spaces:2 UTF-8 LF Markdown Spe =\n"
  },
  {
    "seconds": 219,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375\" end\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfile.lock v 49 # 2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51  todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] B\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_)|\n65 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain* 0OA0 ) ' ) n 64, 7 Spaces:2 UTF-8 LF Markdown Spe! 0\n"
  },
  {
    "seconds": 220,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375\" end\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfile.lock v 49 # 2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51  todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] B\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_1 1st’\n65 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain* 0AC ) ' ) 64 Spaces:2 UTF-8 LF Markdown Spe s\n"
  },
  {
    "seconds": 221,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 * 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375\" end\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfile.lock v 49 # 2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51  todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] =\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_llstiﬂmq\n65 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain® 0 A0 = ) ; B4 T naces: 2 TF-8 F  Markdown Spe .\n"
  },
  {
    "seconds": 222,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375 Send\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_heiper.... U 46 todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] =\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list&nmphn(“i{)\n65 todo_list.list # => [\"Wash the car\", \"Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain® 0 ( . ' E n 64 2 Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 223,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375 Send\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_heiper.... U 46 todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] =\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the ca‘)\n65 todo_list.list # => [\"Wash the car\", \"Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain® 0 ( . ' E 64, 32 Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 224,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375 Send\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_heiper.... U 46 todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] T\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the caxr®)\n65 todo_list.list # => [“Wash the car”, Iﬁasn the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain® 0AC ) = g 64 35 Spaces:2 UTF-8 LF Markdown Spe L\n"
  },
  {
    "seconds": 225,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375 Send\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_heiper.... U 46 todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] T\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car®)\n65 todo_list.list # => [“Wash the car\",] “Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain® 0AC ) = g 64 35 Spaces:2 UTF-8 LF Markdown Spe L\n"
  },
  {
    "seconds": 226,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375 Send\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_heiper.... U 46 todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new \"\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] [ |\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car™)\n65 todo_list.list # => [‘Nash the car®, “Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE 4\nmain* 0 ( . ' ) n 65 23 (14 selected) Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 227,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites * 32\ne > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... * 36 end\nv 07_single_clas... ® 375 Send\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nirecRes i a1\n¥ phions_desig_ U a2 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_heiper.... U 46 todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"] [ |\n53\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car™)\n65 todo_list.list # => (| \"Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE 4\nmain* 0 ( . ' E 65, Col 22 Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 228,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch © 30 # Except the completed ones\n> 01_intro_and_git 3 end\n> 02_testing_bites ® 32\ne > 03_single_met... * 33 def complete(task) # task is a string representing a task to mark complete\n> 04_single_met... ® 34 # Returns nothing\n> 05_debugging_1 ® 35 # Fails if the task doesn't exist\n> 06_single_clas... *® P sad\nv 07_single_clas... ® 375 Send\nv lib . 30\n@ phone_book.... U o\nAN, 40 ## 3. Create Examples as Tests\nv recipes . “\nViphone_desg 2 42 _Make a list of examples of how the class will behave in different situations._\n¥ tasks_design.. U 43\nSpee . 44 \" ruby\n@ phone_book... U 45 #1\n@ spec_helper.... U 46  todo_list = TodoList.new\n-rspec v 47  todo_list.list # => []\nGemfile u 48\nGemfilelock U 49 #2\n> 08_debugging... * 50 todo_list = TodoList.new\n> 09_multi_class... * 51 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 52 todo_list.list # => [“Wash the car\"]\n53 M\n54 #3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n59\n60 #3\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car\"™)\n65 todo_list.list # => [“Wash the dog\"] 1\n66\n. 67\n68 _Encode each example as a test. You can add to the above list as you go._\n> TIMELINE i\nmain® 0AC . ' g n65 Col22 Spaces:2 UTF-8 LF Markdown Spe! 0\n"
  },
  {
    "seconds": 229,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O [(azsh a -\nv RSPEC_SETUP j.u‘g:,:‘;r\\;-aagk-‘.:gn recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  @7_single_class_design » |:|\n> 00_scratch .\no ot oo 33 def complete(task) # task is a string representing a task to mark complete\nTN 34 # Returns nothing\n| > 02testing_bites 35 # Fails if the task doesn't exist\n° > 03_single_met... * 36 end\n> 04_single_met... ® 37 end\n> 05_debugging 1 * 33\n> 06_single_clas... * 39\nv 07_single_clas... 40  ## 3. Create Examples as Tests\nv lib . 41\n@ phone_book.... U a2 _Make a list of examples of how the class will behave in different situations._\nv recipes = 43\n¥ phone_desig... U a4 \" xuby\n¥ tasks_design... U a5 #1\nv spec B a6 todo_list = TodoList.new\n@ phone_book... U 47  todo_list.list # => []\n@ spec_helper... U 48\nfonn v 49 #2\nGemfile v 50 todo_list = TodoList.new\n[omm— v 51 todo_list.add(\"Wash the car\")\n> 08_debugging... ® :: todo_list.list # => [“Wash the car\"]\n> 09_multi_class... *\n> 10_muni-class... . &4 it\n= (E 55 todo_list = TodoList.new B\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 ¥ 3I\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64  todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n66 L\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n» 69\n70 ## 4. Implement the Behaviouxr\n71\n> TIMELINE 72 E er each test you write, follow the test-driving process of red, green,\nmain® 0AC n65 Col 37 Spaces:2 UTF-8 LF Markdown Spe! 0\n"
  },
  {
    "seconds": 230,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER ¥ tasks_designmd U @ @O [(azsh a -\nv RSPEC_SETUP j.u‘g:,:‘;r\\;-aagk-‘.:gn recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  @7_single_class_design » |:|\n> 00_scratch .\no ot oo 33 def complete(task) # task is a string representing a task to mark complete\nTN 34 # Returns nothing\ni > 02-testing_bites ¢ 35 # Fails if the task doesn't exist\n° > 03_single_met... * 36 end\n> 04_single_met... ® 37 end\n> 05_debugging 1 * 33\n> 06_single_clas... * 39\nv 07_single_clas... 40  ## 3. Create Examples as Tests\nv lib . 4\n@ phone_book.... U a2 _Make a list of examples of how the class will behave in different situations._\nv recipes = 43\n¥ phone_desig... U a4 \" xuby\n¥ tasks_design... U a5 #1\nv spec B a6 todo_list = TodoList.new\n@ phone_book... U 47  todo_list.list # => []\n@ spec_helper... U 48\nfonn v 49 #2\nGemfile v 50 todo_list = TodoList.new\n[omm— v 51 todo_list.add(\"Wash the car\")\n> 08_debugging... ® :; todo_list.list # => [“Wash the car\"]\n> 09_multi_class... * B\n> 10_muni-class... . &4 it\n= (E 55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #4\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64  todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n66 L\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n69\n70 ## 4. Implement the Behaviouxr\n71\n> TIMELINE 72 E er each test you write, follow the test-driving process of red, green,\nmain® 0 A 60,Cold4 Spaces:2 UTF-8 LF Markdown Spe (]\n"
  },
  {
    "seconds": 231,
    "text": "eoe tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER ¥ tasks_designmd U @ @O [(azsh a -\nv RSPEC_SETUP j.u‘g:,:‘;r\\;-aagk-‘.:gn recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  @7_single_class_design » |:|\nig?'l:‘::\":‘d_g“ b 33 def complete(task) # task is a string representing a task to mark complete\nTN 34 # Returns nothing\ni > 02-testing_bites ¢ 35 # Fails if the task doesn't exist\n° > 03_single_met... * 36 end\n> 04_single_met... * 37 end\n> 05_debugging 1 * 33\n> 06_single_clas... * 39\nv 07_single_clas... 40  ## 3. Create Examples as Tests\nv lib . 4\n@ phone_book.... U a2 _Make a list of examples of how the class will behave in different situations._\nv recipes = 43\n¥ phone_desig... U a4 \" xuby\n¥ tasks_design... U a5 #1\nv spec B a6 todo_list = TodoList.new\n@ phone_book... U 47  todo_list.list # => []\n@ spec_helper... U 48\nfonn v 49 #2\nGemfile v 50 todo_list = TodoList.new\n[omm— v 51 todo_list.add(\"Wash the car\")\n> 08_debugging... ® 52 todo_list.list # => [“Wash the car\"]\n> 09_multi_class... * : s3 |\n20t ciats Be 55  todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #4\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")ll I\n63  todo_list.add(\"Wash the dog\")\n64  todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n66\n67\n68 _Encode each example as a test. You can add to the above list as you go._\n69\n70 ## 4. Implement the Behaviouxr\n71\n> TIMELINE 72 E er each test you write, follow the test-driving process of red, green,\n—= TN 6 130 (102 selected) Spaces:2 UTF-8 LF Markdowr Spe .\n"
  },
  {
    "seconds": 232,
    "text": "eoe tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O [(azsh a -\nv RSPEC_SETUP j.u‘g:,:‘;r\\;-aagk-‘.:gn recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  @7_single_class_design » |:|\n> 00_scratch .\no ot oo 33 def complete(task) # task is a string representing a task to mark complete\nTN 34 # Returns nothing\ni > 02-testing_bites ¢ 35 # Fails if the task doesn't exist\n> 03_single_met... * 36 end\n> 04_single_met... * 37 end\n> 05_debugging 1 * 33\n> 06_single_clas... * 39\nv 07_single_clas... 40  ## 3. Create Examples as Tests\nv lib . 4\n@ phone_book.... U a2 _Make a list of examples of how the class will behave in different situations._\nv recipes = 43\n¥ phone_desig... U a4 \" xuby\n¥ tasks_design... U a5 #1\nv spec B a6 todo_list = TodoList.new\n@ phone_book... U 47  todo_list.list # => []\n@ spec_helper... U 48\nfonn v 49 #2\nGemfile v 50 todo_list = TodoList.new\n[omm— v 51 todo_list.add(\"Wash the car\")\n> 08_debugging... ® :; todo_list.list # => [“Wash the car\"]\n> 09_multi_class... *\n> 10_muni-class... . &4 it M\n= (E 55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 #4\n61 todo_list = TodoList.new\n62 todo_list.add(\"wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\no |\n67 #4\n68  todo_list = TodoList.new\n69 todo_list.add(“Wash the caz®)\n70 todo_list.add(*Wash-the dog\")\n71 todo_list.complete(\"Mash the car)\n> TIMELINE 72 todo_list.list # => [“Nosh the dog’\nmain® 0 L 6 1(161 selected) Spaces: 2 JTF-8 F Markdown Spe -\n"
  },
  {
    "seconds": 233,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP f..rg:,:;,r\\.v.-‘,:h«..gn recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tests  @7_single_class_design » |:|\n> 00_scratch .\nST 33 def complete(task) # task is a string representing a task to mark complete\nS 34 # Returns nothing\ni > 02-testing_bites ¢ 35 # Fails if the task doesn't exist\n° > 03_single_met... * 36 and\n> 04_single_met... * 37 end\n> 05_debugging 1 * 38 S\n> 06_single_clas... * 39\nv 07_single_clas... * 40  ## 3. Create Examples as Tests\nv lib . 41\n@ phone_book.... U a2 _Make a list of examples of how the class will behave in different situations._\nv recipes = 43\n¥ phone_desig... U a4 \" ruby\n¥ tasks_design... U 45 #1\nv spec B a6 todo_list = TodoList.new\n@ phone_book... U 47  todo_list.list # => []\n@ spec_helper... U 48\ns v 49 #2\nGemfile v 50 todo_list = TodoList.new\nGemile.lock v 51 todo_list.add(\"Wash- the car\")\n> 08_debugging... ® :: todo_list.list # => [“Wash the car\"]\n> 09_multi_class... *\n> 10_muni-class... . e dNGAL B\n= 2 55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 # 4\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car™)\n65 todo_list.list # => [“Wash the dog\"]\n66\n67 #4\n68 todo_list = TodoList.new\n69 todo_list.add(\"“Wash the car\")\n70  todo_list.add(\"Wash the dog\")\n71 todo_list.complete(“Wash the car\")\n> TIMELINE 72 todo_list.list # => [“Wash the dog”]\nmain® 0 ( 67, 4 Spaces:2 JTF-8 F Markdown Spe .\n"
  },
  {
    "seconds": 234,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “**yuby\n> 01_intro_and_git 45 1\ni > 02-testing_bites ¢ 46  todo_list = TodoList.new\n; 2203 aingle_met_ie 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging_1 * 9 #2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib 2 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\n« recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56  todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n@ spec_helper... U 59\nrspec v 60 # 4\nE 61 todo_list = TodoList.new\nGemfile u\nOomfle.louk 0 62 todo_list.add(\"Wash the car\")\n08 e 63  todo_list.add(\"Wash the dog\")\n5 09-mum 2o 64 todo_list.complete(“Wash the car\"™)\n= i 65 todo_list.list # => [“Wash the dog\"] L\n> 10_multi_class... » 66\n67 4\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70 todo_list.add(\"Wash the dog\")\n71  todo_list.complete(“Wash the car\")\n72 todo_list.list # => [“Wash thk dog\"]\n73\n74\n75 _Encode each example os o test. You can add to the above list as you go._\n76\n77  ## 4. Implement the Behaviouxr\n78\n79 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n86\n> TIMELINE\nmain® 0AC n67,Cold4  Spaces:2 UTF-8 LF  Markdowr Spe .\n"
  },
  {
    "seconds": 235,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “**yuby\n> 01_intro_and_git 45 1\ni > 02-testing_bites ¢ 46  todo_list = TodoList.new\n; 2203 aingle_met_ie 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging_1 * 9 #2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib 2 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\n« recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56  todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n@ spec_helper... U 59\nrspec v 60 # 4\nGemfile v 61 todo_list = TodoList.new\nOomfle.louk 0 62 todo_llst.add(':uash the cax':)\n08 e 63  todo_list.add(\"Wash the dog\")\n5 R 64 todo_list.complete(“Wash the car\"™)\n> 100_mukl_class... ® 65 todo_list.list # => [“Wash the dog\"] L\n> 10_multi_class... » 66\n67 4\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70 todo_list.add(\"Wash the dog\")\n71 todo_list.conplotc(‘Llash the car\")\n72 todo_list.list # => [“Wash the dog\"]\n73\n74\n75 _Encode each example as o test. You can add to the above list as you go._\n76\n77  ## 4. Implement the Behaviouxr\n78\n79 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n86\n> TIMELINE\nmain® 0AC n67,Cold4  Spaces:2 UTF-8 LF  Markdowr Spe .\n"
  },
  {
    "seconds": 236,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “**yuby\n> 01_intro_and_git 45 1\ni > 02-testing_bites ¢ 46  todo_list = TodoList.new\n; 2203 aingle_met_ie 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging_1 * 9 #2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib 2 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\n« recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56  todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n@ spec_helper... U 59\nrspec v 60 # 4\nGemfile v 61 todo_list = TodoList.new\nOomfle.louk 0 62 todo_llst.add(':uash the cax':)\n08 e 63  todo_list.add(\"Wash the dog\")\n5 09-mum 2o 64 todo_list.complete(“Wash the car\"™)\n= o5 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... » 66\n67 #5 il\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70 todo_list.add(\"Wash the dog\")F\n71  todo_list.complete(“Wash the car\")\n72 todo_list.list # => [“Wash the dog\"]\n73\n74\n75 _Encode each example as o test. You can add to the above list as you go._\n76\n77  ## 4. Implement the Behaviouxr\n78\n79 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n80\n> TIMELINE\nmain® 0 ( R 0 Spaces: 2 JTF-8 F Markdown Spe .\n"
  },
  {
    "seconds": 237,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “**yuby\n> 01_intro_and_git 45 1\ni > 02-testing_bites ¢ 46  todo_list = TodoList.new\n; 2203 aingle_met_ie 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging_1 * 9 #2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib 2 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\n« recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56  todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n@ spec_helper... U 59\nrspec v 60 # 4\nE 61 todo_list = TodoList.new\nGemfile u\nOomfle.louk 0 62 todo_list.add(\"Wash the car\")\n08 e 63  todo_list.add(\"Wash the dog\")\n5 09-mum 2o 64 todo_list.complete(“Wash the car\"™)\n= o5 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66 B\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the cat\")I\n70  todo_list.add(\"Wash the dog\")\n71  todo_list.complete(“\"Wash the car\")\n72 todo_list.list # => [“Wash the dog\"]\n73\n74\n75 _Encode each example aos o test. You can add to the above list as you go._\n76\n77  ## 4. Implement the Behaviouxr\n78\n79 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n80\n> TIMELINE\nmain® 0 ( 9, Col 30 (30 selected Spaces: 2 JTF-8 F Markdown Spe .\n"
  },
  {
    "seconds": 238,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 ***yuby\n> 01_intro_and_git 45 #1\n| > 02testing_bites ¢ 46  todo_list = TodoList.new\ns > 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * 49 # 2\n> 06_single_clas... 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib il 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\ne = 57  todo_list.add(\"Wash the dog\")\n@& phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\n\" 61 todo_list = TodoList.new\nGemfile u z N\nR e 62 todo_list.add(:.uash the cat\")\nS 63 todo_list.add(\"Wash the dog\")\n5 09-m\\mi e 64 todo_list.complete(\"Wash the car\")\n= = 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n=\n67 #5\n68  todo_list = TodoList.new\n69  todo_list.add(\"Wash the car\") |\n70 todo_list.complete(\"Wash the Iar')\n71 todo_list.list # => [“Wash the dog\"]\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\n= oA G n69, Col30 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 239,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 ***yuby\n> 01_intro_and_git 45 #1\n| > 02testing_bites ¢ 46  todo_list = TodoList.new\ns > 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * 49 # 2\n> 06_single_clas... 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib il 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\ne = 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4 I\n\" 61 todo_list = TodoList.new\nGemfile u s g,\nR e 62 todo_list.add(l.uash the cax\") :\nS 63  todo_list.add(\"Wash the dog\")\nST 64  todo_list.complete(“\"Wash the car\") :\n= = 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... » 66\n67 #5 #\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70 todo_list.complete(“Wash the caif')|I |\n71 todo_list.list # => [“Wash the dog\"]\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain* 0 0 7 col 33 Spaces: 2 JTF-8 F Markdown Spe! ]\n"
  },
  {
    "seconds": 240,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 ***yuby\n> 01_intro_and_git 45 #1\n| > 02testing_bites ¢ 46  todo_list = TodoList.new\ns > 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * 49 # 2\n> 06_single_clas... 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib il 52  todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\ne = 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4 I\n\" 61 todo_list = TodoList.new\nGemfile u\nR e 62  todo_list.add(\"Wash the car\") :\n>.08_debugging... ® 63 todo_list.add(\"Wash the dog\")\n5 09-m\\mi W 64  todo_list.complete(“\"Wash the car\") :\n= = 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n=\n67 #5\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70 todo_list.complete(“Wash the far\")\n71 todo_list.list # => [“Wash the dog\"]\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain* 0 0 ¥ 3 selectoed’ Spaces: 2 JTF-8 F Markdown Spe! ]\n"
  },
  {
    "seconds": 241,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02testing_bites ¢ 46  todo_list = TodoList.new\ns > 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * 49 # 2\n> 06_single_clas... 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib il 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\ne = 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4 I\nGemfile v 61 todo_list = TodoList.new\nR e 62  todo_list.add(\"Wash the car\") :\n>.08_debugging... ® 63 todo_list.add(\"Wash the dog\")\n5 09-m\\mi W 64  todo_list.complete(“Wash the car\") :\n= = 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n=\n67 #5\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the kar')\n71 todo_list.list # => [“Wash the dog\"]\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain* 0 0 LY ) (3 selected, Spaces: 2 JTF-8 F Markdown Spe! ]\n"
  },
  {
    "seconds": 242,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02testing_bites ¢ 46  todo_list = TodoList.new\ns > 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * 49 # 2\n> 06_single_clas... 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib il 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\ne = 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4 I\nGemfile v 61 todo_list = TodoList.new\nR e 62  todo_list.add(\"Wash the car\") :\n>.08_debugging... ® 63 todo_list.add(\"Wash the dog\")\n5 09-m\\mi W 64  todo_list.complete(“Wash the car\") :\n= = 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n=\n67 #5\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the klr')\n71 todo_list.list # => [“Wash the dog\"]\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain* 0 0 LY ) (3 selected, Spaces: 2 JTF-8 F Markdown Spe! ]\n"
  },
  {
    "seconds": 243,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “**ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met.. © 47  todo_list.list # =>-[]\n> 04_single_met.. * 48\n> 05_debugging_1 * 9 #2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec u 60 ¥4 |\n: 61 todo_list = TodoList.new\nGemfile v . M\nel U 62 todo_list.add(.ruash the cax\") :\nNoadbohs s 63 todo_list.add( HashAthe dog\") ‘\nN 64 todo_list.complete(“Wash the car\") :\n- - 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n=\n67 #5\n68 todo_list = TodoList.new\n69  todo_list.add(\"Wash the car\")\n70 todo_list.complete(“Wash the faz\")\n71  todo_list.list # => [“Wash the dog\"]\n72 ot\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain® [NV Ln 70, 30 (3 selected) Spaces:2 UTF-8 LF Markdown Spe 9\n"
  },
  {
    "seconds": 244,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬁ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “**ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met.. © 47  todo_list.list # =>-[]\n> 04_single_met.. * 48\n> 05_debugging_1 * 9 #2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec u 60 ¥4 |\n: 61 todo_list = TodoList.new\nGemfile v . M\nel U 62 todo_list.add(.ruash the cax\") :\nNoadbohs s 63 todo_list.add( HashAthe dog\") ‘\nN 64 todo_list.complete(“Wash the car\") :\n- - 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n=\n67 #5\n68 todo_list = TodoList.new\n69  todo_list.add(\"Wash the car\")\n70 todo_list.complete(“Wash the fazx\")\n71  todo_list.list # => [“Wash the dog\"]\n72 ot\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain® [NV Ln 70, 30 (3 selected) Spaces:2 UTF-8 LF Markdown Spe 9\n"
  },
  {
    "seconds": 245,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\n: 61 todo_list = TodoList.new\nGemfile u\nel U 62 todo_list.add(':uash the cax:)\n08 e 63 todo_list.add(“Wash the- dog\")\n5 og'm\"i D 64 todo_list.complete(“Wash the car\")\n- - 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 il\n68 todo_list = TodoList.new\n69  todo_list.add(\"Wash the car\")\n70 todo_list.complete(“Wash the sheepl‘)\n71  todo_list.list # => [“Wash the dog\"]\n72 e\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain® 0 0 70, C 35 Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 246,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\n: 61 todo_list = TodoList.new\nGemfile u\nel U 62 todo_list.add(':uash the cax:)\n08 e 63 todo_list.add(“Wash the- dog\")\n5 og'm\"i D 64 todo_list.complete(“Wash the car\")\n- - 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 il\n68 todo_list = TodoList.new\n69  todo_list.add(\"Wash the car\")\n70 todo_list.complete(“Wash the sheed‘)\n71 todo_list.list # => [“Wash the dog\"I\n72 o\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain® 0 0 70, C 35 Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 247,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nel U 62 todo_list.add(“Wash the car\")\n08 e 63 todo_list.add(“Wash the- dog\")\n5 og'm\"i D 64 todo_list.complete(“Wash the car\")\n- - 65 todo_list.list # => [“Wash the dog\"] [l\n> 10_multi_class... * 66\n67 #5 |\n68 todo_list = TodoList.new\n69  todo_list.add(\"Wash the car\")\n70 todo_list.c lete (“Wash the sheep”)\n7 todo_llsIAIm’-ﬂ‘ [“Wash the dog\"]\n72 o\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain® 0 0 1 15 (22 selected Spaces: 2 JTF-8 LF Markdown Spe ]\n"
  },
  {
    "seconds": 248,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2] # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ® 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nP 62  todo_list.add(\"Wash the car\")\n08 e 63 todo_list.add(\"Wash the dog\")\n= \" 64 todo_list.complete(\"Wash the car\")\nREOU T Cleve_3 & 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 B\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # fd\n72 ot\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain*® 0 0 Al A Spaces: 2 JTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 249,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2] # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ® 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nP 62 todo_list‘add(\"’uash the car:)\n08 e 63 todo_list.add(\"Wash the dog\")\n= \" 64 todo_list.complete(\"Wash the car\")\nREOU T Cleve_3 & 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 B\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # foils\n72 ot\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain*® 0 0 n71 24 Spaces: 2 JTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 250,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2] # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ® 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nP 62 todo_list‘add(\"’uash the car:)\n08 e 63 todo_list.add(\"Wash the dog\")\n= \" 64 todo_list.complete(\"Wash the car\")\nREOU T Cleve_3 & 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 B\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # foils\n72 ot\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain*® 0 0 n71 24 Spaces: 2 JTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 251,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2] # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ® 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nP 62  todo_list.add(\"Wash the car\")\n08 e 63 todo_list.add(\"Wash the dog\")\n] og'm\"i CEESTS 64 todo_list.complete(\"Wash the car\")\n= o 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 B\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # foils \"\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain*® 0 0 n71 )l 25 Spaces: 2 JTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 252,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2] # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... * 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas.. * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ® 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nP 62 todo_list‘add(\"’uash the car:)\n08 e 63 todo_list.add(\"Wash the dog\")\n= \" 64 todo_list.complete(\"Wash the car\")\n> 09_multi_class... * ™ \"\n65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 B\n68  todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # foils \"No such I\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to- implement the behaviour._\n79\n> TIMELINE\nmain*® 0 0 7, 33 Spaces: 2 JTF-8 LF Markdown Spe -\n"
  },
  {
    "seconds": 253,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites ¢ 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\ne > 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nel U 62 todo_list‘add(\"’uash the cax:)\n08 e 63 todo_list.add(\"Wash the dog\")\n= : 64 todo_list.complete(“Wash the car\")\nQEOUTI. Clave_ = 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 =\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep\")\n71 todo_list.list # fails \"No such tnsk“]\n72 or\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to-implement the behaviour._\n79\n> TIMELINE\n[ 0 0 Lral ol 38 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 254,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U @ @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . a4 “** ruby\n> 01_intro_and_git 45 #1\n| > 02-testing_bites ¢ 46  todo_list = TodoList.new\n> 03_single_met... ® 47  todo_list.list # => []\n> 04_single_met... 48\n> 05_debugging 1 * a9 # 2\n> 06_single_clas... * 50 todo_list = TodoList.new\nv 07_single_clas... * 51 todo_list.add(\"Wash the car\")\nv lib ° 52 todo_list.list # => [“Wash the car\"]\n@ phone_book.... U 53\nv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\ne > 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wosh the dog\"]\n@ spec_helper... U 59\n.rspec v 60 #4\nGemfile v 61 todo_list = TodoList.new\nel U 62 todo_list.add(\"Wash the car\")\n08 e 63 todo_list.add(\"Wash the dog\")\n3 og'm\"i LR o 64 todo_list.complete(“Wash the car\")\n= = 65 todo_list.list # => [“Wash the dog\"]\n> 10_multi_class... * 66\n67 #5 =\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep\")\n71 todo_list.list # foils \"N such task.*\n72 or\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behavioux\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to-implement the behaviour._\n79\n> TIMELINE\n[ 0 0 Lral ol 38 Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 255,
    "text": "[ N ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md () # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . 48\n> 01_intro_and_git 49 #2\n1 > 02_testing_bites 50 todo_list = TodoList.new\n: > 03_single_met... * 51 todo_list.add(\"Wash the car\")\n> 04_single_met... * 52 todo_list.list # => [“Wash the car\"]\n> 05_debugging 1 * 53\n> 06_single_clas... * 54 # 3\nv 07_single_clas... * 55 todo_list = TodoList.new\nv lib B 56 todo_list.add(\"Wash the car\")\n@ phone_book.... U 57 todo_list.add(\"Wash the dog\")\nv recipes . 58 todo_list.list # => [“Wash the car”, “\"Wosh the dog\"]\n¥ phone_desig... U 59\n¥ tasks_design... U @ 94\nv spec ® 61 todo_list = TodoList.new\n@ phone_book... U 62 todo_list.add(\"wWash the car\")\n@ sec halper 11 63 todo_list.add(\"Wash the dog\")\ns 5 64 todo_list.complete(\"Wash the car\")\ni 65 todo_list.list # => [“Wash the dog\"]\nGemfile u 66\nGemfilelock U 6 #5\n> 08_debugging... © 68 todo_list = TodoList.new\n> 09_multi_class... ® 69 todo_list.add(\"Wash the car\")\n> 10_multi_class... © 70  todo_list.complete(\"Wash the sheep\")\n71  todo_list.list # fails \"No such task.\"” =\n92\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76 ## 4. Implement the BahaviouxI\n77\n78  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\n[ 0 0 LA ol 38  Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 256,
    "text": "[ N ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md () # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . 48\n> 01_intro_and_git 49 #2\n) > 02_testing_bites 50 todo_list = TodoList.new\n: > 03_single_met... * 51 todo_list.add(\"Wash the car\")\n> 04_single_met... * 52 todo_list.list # => [“Wash the car\"]\n> 05_debugging 1 * 53\n> 06_single_clas... * 54 # 3\nv 07_single_clas... * 55 todo_list = TodoList.new\nv lib B 56 todo_list.add(\"Wash the car\")\n@ phone_book.... U 57 todo_list.add(\"Wash the dog\")\n« recipes ° 58 todo_list.list # => [“Wash the car”, “\"Wash the dog\"]\n¥ phone_desig... U 59\n¥ tasks_design... U @ 94\nv spec ® 61 todo_list = TodoList.new\n@ phone_book... U 62 todo_list.add(\"wWash the car\")\n@ sec halper 11 63 todo_list.add(\"Wash the dog\")\ns 5 64 todo_list.complete(\"Wash the car\")\ni 65 todo_list.list # => [“Wash the dog\"]\nGemfile u 66\nGemfilelock U 6 #5\n> 08_debugging... © 68 todo_list = TodoList.new\n> 09_multi_class... ® 69 todo_list.add(\"Wash the car\")\n> 10_multi_class... © 70  todo_list.complete(“Wash the sheep\")\n71  todo_list.list # fails \"No such task.\"” =\n92\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76 ## 4. Implement the BahaviouxI\n77\n78  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\n[ 0 0 LA ol 38  Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 257,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > & # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . 48\n> 01_intro_and_git 49 * 2\n> 02_testing_bites ® 50 todo_list = TodoList.new\n03 > 03_single_met... ® 51 todo_list.add(\"Wash the car\")\n> 04_single_met... ® 52 todo_list.list # => [“Wash the car\"]\n> 05_debugging 1 * -\n> 06_single_clas... * e\nS O anokicheiis 55 todo_list = TodoList.new\n5 = 56 todo_list.add(\"Wash the car\")\nVo ~ 57  todo_list.add(\"Wash the dog\")\ne phm-m . 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\nv recipes . 59\n¥ phone_desig... U 60 ¢4\n¥ tasks_design... U 61 todo_list = TodoList.new\nv spec > 62 todo_list.add(\"Wash the car\")\n@ phone_book... U 63  todo_list.add(“Wash the dog\")\n@ spec_helper... U 64  todo_list.complete(“Wash the car”)\n.rspec v 65 todo_list.list # => [“Wash the dog\"]\nGemfile v 66\nGemfile.lock v 67 #5\n> 08_debugging... * 68 todo_list = TodoList.new\n> 09_multi_class... * 69  todo_list.add(\"Wash the car\")\n> 10_multi_class... * 70  todo_list.complete(“Wash the sheep”)\n7 todo_list.list # fails \"No such task.\"\n,de K 7\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76 ## 4. Implement the Behaviouxr\n77 I\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\n[ 0 0 Al ol 38  Spaces: 2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 258,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > & # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . s o\n> 01_intro_and_git 4. 2\n> 02_testing_bites ® 50 todo_list = TodoList.new\nS A 51 todo_list.add(\"Wash the car\")\ni = 52 todo_list.list # => [“Wash the car\"]\n> 04_single_met... * 53\n> 05_debugging 1 * 54 #3\n> 06_single_clas... © 55  todo_list = TodoList.new\nVv 0Z_single_clas... * 56 todo_list.add(“Wash the car\")\nVv lib ° 57  todo_list.add(\"Wash the dog\")\n@& phone_book.... U 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\nVv recipes . 59\n¥ phone_desig... U 60 #4\n¥ tasks_design... U 61 todo_list = TodoList.new\nv spec H 62  todo_list.add(\"Wash the car\")\n@ phone_book... U 63 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 64 todo_list.complete(“Wash the car\")\nrspec v 65 todo_list.list # => [“Wash the dog\"]\nGemfile v 66\nGemfilelock U 67 &%\n5108 debugings @ 68  todo_list = TodoList.new\n> 09_multi_class... ® 69  todo_list.add(“Wash the car\")\n> 10_mukti_class... ® 70 todo_list.complete(“Wash the sheep\")\n71 todo_list.list # fails \"No such task.\"\n72 \"' [ |\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76 ## 4. Implement the Behaviour\n77 I\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\n[ 0 0 n71,Col38 Spaces:2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 259,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP r.xrg_l:;,r:..(.a,ciw.xgn recipes > ¥ tasks_design.md > B # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  97_single_class_design » |:|\n> 00_scratch . 49 22\n> 01_intro_and_git 50  todo_list = TodoList.new\ni > 02-testing_bites ¢ 51  todo_list.add(\"Wash the car\")\n> 03_single_met.. ® 52  todo_list.list # => [“Wash the car\"]\n> 04_single_met... * 53\n> 05_debugging 1 * 54 # 3\n> 06_single_clas... ® 55 todo_list = TodoList.new\nv 0Z_single_clas... * 56 todo_list.add(\"Wash the car\")\nv lib . 57 todo_list.add(\"Wash the dog\")\n@ phone_book.... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\nv recipes B 59\n¥ phone_desig... U 60 # 4\n¥ tasks_design... U 61 todo_list = TodoList.new\nv spec . 62 todo_list.add(\"Wash the car\")\n@& phone_book... U 63  todo_list.add(\"Wash the dog\")\n@ spec_helper.... U 64 todo_list.complete(“Wash the car\")\nsapec v 65 todo_list.list # => [“Wash the dog\"]\nGemfile v 66\nGemfilelock U LA\ne i s 68 todo_list = TodoList.new\nI 69 todo_list.add(\"Wash the car\")\nB 70 todo_list.complete(“Wash the sheep\")\nPTG T 71 todo_list.list # fails \"No such task.”\n72 s %1\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76 ## 4. Implement the Behaviouxr\n77 I\n78  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\n[ 0 0 n71,Col38 Spaces:2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 260,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh 8 -\nv RSPEC_SETUP r.xrg_l:;,r:..(.a,ciw.xgn recipes > ¥ tasks_design.md > B # Tasks Class Design Recipe > () ## 3. Create Examples as Tests  97_single_class_design » |:|\n> 00_scratch . 49 22\n> 01_intro_and_git 50  todo_list = TodoList.new\ni > 02-testing_bites ¢ 51  todo_list.add(\"Wash the car\")\n> 03_single_met.. ® 52  todo_list.list # => [“Wash the car\"]\n> 04_single_met... * 53\n> 05_debugging 1 * 54 # 3\n> 06_single_clas... ® 55 todo_list = TodoList.new\nv 0Z_single_clas... * 56 todo_list.add(\"Wash the car\")\nv lib . 57 todo_list.add(\"Wash the dog\")\n@ phone_book.... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\nv recipes B 59\n¥ phone_desig... U 60 # 4\n¥ tasks_design... U 61 todo_list = TodoList.new\nv spec . 62 todo_list.add(\"Wash the car\")\n@& phone_book... U 63  todo_list.add(\"Wash the dog\")\n@ spec_helper.... U 64 todo_list.complete(“Wash the car\")\nsapec v 65 todo_list.list # => [“Wash the dog\"]\nGemfile v 66\nGemfilelock U LA\ne i s 68 todo_list = TodoList.new\nI 69 todo_list.add(\"Wash the car\")\nB 70 todo_list.complete(“Wash the sheep\")\nPTG T 71 todo_list.list # fails \"No such task.\"\n72 s %1\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76 ## 4. Implement the Behaviouxr\n77 I\n78  _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\n[ 0 0 n71,Col38 Spaces:2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 261,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ aom-- zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md () # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . 27\n> 01_intro_and_git 28 def list\n1 > 02_testing_bites 29 # Returns a list of the tasks added as strings\n- > 03_single_met... * 30 # Except the completed ones\n> 04_single_met... ® 31 end\n> 05_debugging 1 * 32\n> 06_single_clas... * 33 def complete(task) # tosk is a string representing a task to mork complete\nv 07_single_clas... 34 # Returns nothing\nv lib N 35 # Fails if the task doesn't exist\n@ phone_book.... U 36 end\n+ recies . 37 end\n¥ phone_desig... U 8\n¥ tasks_design.. U 39\nY Topac = 40 ## 3. Create Examples as Tests\n@ phone_book... U a\n@ sec Ralper 1 :; _Make o list of examples of how the class will behave in different situations._\n.rs| v\nG.:’c“. “ 48 \" ruby\n; a5 #1\nOeufBelook o a6 todo_list = TodoList.new\n> 08_debugging... © 47  todo_list.list # => []\n> 09_multi_class... * 48\n> 10_multi_class... * 49 #2\n50 todo_list = TodoList.new -\n51 todo_list.add(\"wWash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 #3\n55 todo_list = TodoList.new I\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59\n60 # 4\n61 todo_list = TodoList.new\n62  todo_list.add(\"wWash the car\")\n) 63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n> TIMELINE 66\n[ 0 0 n71,Col38 Spaces:2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 262,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ aom-- zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design - |:|\n> 00_scratch P 9 > I want a program that I can add todo tasks to and see a list of them.\n> 01_intro_and_git 10\n> 02_testing_bites SIS 8- grex\n03 > 03_single_met... ® 12 > So that I can focus on tasks to complete\ng 13 > I want to mark tasks as complete and have them disappear from the list.\n> 04_single_met.. * 14\n4 os_d.ebqumg_'l N 15  ## 2. Design the Class Interface\n> 06_single_clas... *® 16\nVv OLsingle_cles... © 17 _Include the initializer and public methods with all parameters and return\nvib - values._\n@ phone_book.... U 18\nV recipes - 19 \" ruby\n¥ phone_desig... U 20 class TodolList\n¥ tasks_design... U 21 def initializer\nv spec ® 22 end\n@ phone_book... U 23\n@ spec_helper... U 24 def add(task) # task is a string representing o instruction\n.rspec [ 25 # Return nothing\nGemfile u 26 end\nGemfilelock U 27\n> 08_debugging... 28 def list\n> 09_multi_class... * 29 # Returns a list of the tasks added as strings\n> 10_multi_class... ® 30 # Except the completed ones\n31 end\n32 B\n33 def complete(task) # tosk is a string representing a task to mark complete\n34 # Returns nothing\n35 # Fails if the task doesn't exist\n36 end\n37  end I\n38 b\n39\n40  ## 3. Create Examples as Tests\n41\n42 _Make a list of examples of how the class will behave in different situations._\na3\n44 \"' 'ruby\n5 a5 #2\n46  todo_list = TodoList.new\na7 todo_list.list # => []\n> TIMELINE an\n[ 0 0 n71,Col38 Spaces:2 JTF-8 LF Markdown Spe |\n"
  },
  {
    "seconds": 263,
    "text": "[ N ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @BO- [(azsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . 4\n> 01_intro_and_git S5 _Put or write the user story here. Add any clarifying notes you might have._\n> 02_testing_bites * .\nN oi e 7 > As-a user\n2 8 > So that I can keep track of my tasks\n> 04_single_met.. *\n9 > I'want a program that I can add todo tasks to and see a list of them.\n> 05_debugging 1 * 10\ni e 11 > As a user\nVv OLsingle_clas... © 12 > So that I can focus on tasks to complete\nvib > 13 > I-want to mark tasks as complete and have them disappear from the list.\n@ phone_book.... U 14\nVv recipes - 15  ## 2. Design the Class Interface\n¥ phone_desig... U 16\n¥ tasks_design... U 17 _Include the initializer and public methods with all parameters and return\nv spec . values. _\n@ phone_book... U 18\n@ spec_helper... U 19 \" ruby\n.rspec v 20 class TodoList\nGemfile 1] 21 def initializer\nGemfilelock U 22 end\n> 08_debugging... * 23\n> 09_multi_class... * 24 def add(task) # task is a string representing o instruction\n> 10_multi_class.. ® 25 # Return nothing\n26 end\n27 u\n28 def list\n29 # Returns a list of the tasks added as strings\n30 # Except the completed ones\n31 end\n32 I\n33 def complete(task) # task is a string representing a task to mark complete\n34 # Returns nothing\n35 # Fails if the task doesn't exist\n36 end\n37 end\n38 e\n39\n40  ## 3. Create Examples as Tests\n41\n42 _Make a list of examples of how the class will behave in different situations._\n> TIMELINE p\nmain*® ) ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe =\n"
  },
  {
    "seconds": 264,
    "text": "[ N ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@m - zsh 8 -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch . 27\n> 01 intro_and_git 28 def list\n1 > 02_testing_bites ® 29 # Returns a list of the tasks added as strings\n¢ > 03_single_met... 30 # Except the completed ones\n> 04_single_met.. * i end\n> 05_debugging 1 * 32\n> 06_single_clas... * 33 def complete(task) # tosk is a string representing a task to mark complete\nv 0Z_single_clas... * 34 # Returns nothing\nv lib B 35 # Fails if the task doesn't exist\n@& phone_book.... U 36 end\n« recipes ° 37 end\n¥ phone_desig... U 38 i\n¥ tasks_design.. U 39\ns 5 40  ## 3. Create Examples as Tests\n@ phone_book... U a\na2 _Make a list of examples of how the class will behave in different situations._\n@ spec_helper... U R\n-rwu.: ] 44 \" ruby\nGemfile u s #1\nGemflle.Jock U 46  todo_list = TodoList.new\n> 08_debugging... * 47 todo_list.list # => []\n> 09_multi_class... * 48\n> 10_multi_class... * 49 #2\n50 todo_list = TodoList.new -\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car”]\n53\n54 #3\n55 todo_list = TodoList.new 1\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n59\n60 # 4\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n> TIMELINE 66\nmain® 0 ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe =\n"
  },
  {
    "seconds": 265,
    "text": "[ N ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @BO- [(azsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ] ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch x 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3\n2 > 02_testing_bites * a4 \" ruby\n> 03_single_met... * a5 #1\n> 04_single_met... * 46  todo_list = TodoList.new\n> 05_debugging 1 * a7 todo_list.list # => []\n> 06_single_clas... * a8\nv 0Z_single_clas... * a9 # 2\nv lib . 50 todo_list = TodoList.new\n@ phone_book.... U 51 todo_list.add(\"Wash the car\")\nv recipes E 52 todo_list.list # => [“Wash the car\"]\n¥ phone_desig... U 53\n¥ tasks_design.. U 54 #3\nv spec ° 55 todo_list = TodoList.new\n@ phone book D) 56 todo_list.add(\"Wash the car\")\n@ soec Ralpar 2 11 57 todo_list.add(\"Wash the dog\")\nP v 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n- 59\nGemfile u\nGemfile.lock v e 4\n61 todo_list = TodoList.new\n2 os'demf”w\"' - 62 todo_list.add(\"Wash the car\")\n> 09_multi_class... ® 63 todo_list.add(\"Wash the dog\")\n> 10.multi_class... © 64  todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"] |-\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sPeep“)\n71 todo_list.list # fails \"No such task.\"”\n72 .\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain*® ) ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe =\n"
  },
  {
    "seconds": 266,
    "text": "[ N ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @BO- [(azsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ] ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch x 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3\n2 > 02_testing_bites * a4 \" ruby\n> 03_single_met... * a5 #1\n> 04_single_met... * 46  todo_list = TodoList.new\n> 05_debugging 1 * a7 todo_list.list # => []\n> 06_single_clas... * a8\nv 0Z_single_clas... * a9 # 2\nv lib . 50 todo_list = TodoList.new\n@ phone_book.... U 51 todo_list.add(\"Wash the car\")\nv recipes E 52 todo_list.list # => [“Wash the car\"]\n¥ phone_desig... U 53\n¥ tasks_design.. U 54 #3\nv spec ° 55 todo_list = TodoList.new\n@ phone book D) 56 todo_list.add(\"Wash the car\")\n@ soec Ralpar 2 11 57 todo_list.add(\"Wash the dog\")\nP v 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n- 59\nGemfile u\nGemfile.lock v e 4\n61 todo_list = TodoList.new\n2 os'demf”w\"' - 62 todo_list.add(\"Wash the car\")\n> 09_multi_class... ® 63 todo_list.add(\"Wash the dog\")\n> 10.multi_class... © 64  todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"] |-\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sPeep“)\n71 todo_list.list # fails \"No such task.\"”\n72 .\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain*® ) ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe =\n"
  },
  {
    "seconds": 267,
    "text": "[ N ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W @BO- [(azsh a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md [ # Tasks Class Design Recipe > ] ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch x 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3\n2 > 02_testing_bites * a4 \" ruby\n> 03_single_met... * a5 #1\n> 04_single_met... * 46  todo_list = TodoList.new\n> 05_debugging 1 * a7 todo_list.list # => []\n> 06_single_clas... * a8\nv 0Z_single_clas... * a9 # 2\nv lib . 50 todo_list = TodoList.new\n@ phone_book.... U 51 todo_list.add(\"Wash the car\")\nv recipes E 52 todo_list.list # => [“Wash the car\"]\n¥ phone_desig... U 53\n¥ tasks_design.. U 54 #3\nv spec ° 55 todo_list = TodoList.new\n@ phone book D) 56 todo_list.add(\"Wash the car\")\n@ soec Ralpar 2 11 57 todo_list.add(\"Wash the dog\")\nP v 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n- 59\nGemfile u\nGemfile.lock v e 4\n61 todo_list = TodoList.new\n2 os'demf”w\"' - 62 todo_list.add(\"Wash the car\")\n> 09_multi_class... ® 63 todo_list.add(\"Wash the dog\")\n> 10.multi_class... © 64  todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"] |-\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sPeep“)\n71 todo_list.list # fails \"No such task.\"”\n72 .\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain*® ) ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe =\n"
  },
  {
    "seconds": 268,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md () # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  @7_single_class_design - |:|\n> 00_scratch ” 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3\n1 > 02_testing_bites a4 \" ruby\n: > 03_single_met... * a5 #1\n> 04_single_met.. * 46  todo_list = TodoList.new\n> 05_debugging 1 * 47  todo_list.list # => []\n> 06_single_clas... * a8\nv 0Z_single_clas... * 49 # 2\nv lib s 50 todo_list = TodoList.new\n@ phone_book.... U 51 todo_list.add(\"Wash the car\")\nv recipes . 52 todo_list.list # => [“Wash the car\"]\n¥ phone_desig... U 53\n¥ tasks_design... U 54 #3\nv spec ° 55 todo_list = TodoList.new\n@ phons booko N 56 todo_list.add(\"Wash the car\")\n@ et el 57 todo_list.add(\"Wash the dog\")\no v 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\nGemfile u ot\nGemfilelock U el\nN s 61 todo_list = TodoList.new\nT 62  todo_list.add(\"Wash the car\")\n> 09_multl_class... ® 63  todo_list.add(\"Wash the dog\")\n> 10_multi_class... ® 64 todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"] |—1\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the speep\")\n71 todo_list.list # fails \"No such task.”\n92\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain*® 0 ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 269,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (&) # Tasks Class Design Recipe > & ## 3. Create Examples as Tests 07_single_class_design - |:|\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites * o “xuby\nGl > 03_single_met.. * . £\nN od T imet it a6 todo_list = TodoList.new\n: a7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg1e_chs.., . 9 #2\n0L snoecles= 56 50 todo_list = TodoList.new\nvl o 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\nv recipes . 53\n¥ phone_desig... U 54 23\n¥ tasks_design... U 55 todo_list = TodoList.new\nv spec o 56 todo_list.add(\"Wash the car\")\n@ phone_book... U 57 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n.rspec v 59\nGemfile v 60 #4\nGemfile.lock v 61 todo_list = TodoList.new\n> 08_debugging... * 62  todo_list.add(\"Wash the car\")\n> 09_multi_class... * 63  todo_list.add(\"Wash the dog\")\n> 10_multi_class.. ® 64  todo_list.complete(“Wash the car\")\nEiEE 65 todo_list.list # => [“Wash the dog\"]\n66 M\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # fails \"No such tosk.”\n92\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain*® 0 ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 270,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > & ## 3. Create Examples as Tests 07_single_class_design - |:|\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites * o “xuby\nGl > 03_single_met.. * . £\nN od T imet it a6 todo_list = TodoList.new\n: a7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg1e_chs.., . 9 #2\n0L snoecles= 56 50 todo_list = TodoList.new\nvl o 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\nV recipes - 53 I\n¥ phone_desig... U 54 23\n¥ tasks_design... U 55 todo_list = TodoList.new\nv spec o 56 todo_list.add(\"Wash the car\")\n@ phone_book... U 57 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n.rspec v 59\nGemfile v 60 #4\nGemfile.lock v 61 todo_list = TodoList.new\n> 08_debugging... * 62  todo_list.add(\"Wash the car\")\n> 09_multi_class... * 63 todo_list.add(\"Wash the dog\")\n> 10_multi_class.. ® 64  todo_list.complete(“Wash the car\")\nEiEE 65 todo_list.list # => [“Wash the dog\"]\n66 M\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # fails \"No such task.\"”\n92\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain*® 0 ( n71,Col38 Spaces:2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 271,
    "text": "eoce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RSPEC.. [} B © @ _single_class_design > recipes > ¥ tasks_design.md > E # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests 07_single_class_design - |:|\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites * 43 = ruby\nGl > 03_single_met.. * .\nN od T imet it a6 todo_list = TodoList.new\n: a7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg1e_chs.., . 9 #2\nMOZsnoecles= 56 50 todo_list = TodoList.new\nM o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\nirecpe x 53\n¥ phone_desig... U 54 23\n¥ tasks_design... U 55 todo_list = TodoList.new\nv spec o 56 todo_list.add(\"Wash the car\")\n@ phone_book... U 57 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\nrspec v 59 -\nGemfile v 60 #4\nGemfilelock U 61 todo_list = TodoList.new |\n> 08_debugging... * 62  todo_list.add(\"Wash the car\")\n> 09_multi_class... ® 63  todo_list.add(\"Wash the dog\") |\n> 10_multi_class.. ® 64  todo_list.complete(“Wash the car\")\nE 2 65 todo_list.list # => [“Wash the dog\"] 1\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # fails \"No such task.\"”\n92 e\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain® 0 ( n 52 27 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 272,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @O - zsh a -\nv RSPEC.. [} B O @ _single_class_design > recipes > ¥ tasks_design.md > E # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests 07_single_class_design - |:|\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites * a4 Tuby\nSl > 03_single_met.. © A £:4\ng 46  todo_list = TodoList.new\n> 04_single_met... *\n47 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\n06_s.mg!e_clcs . 49 22\nB\nLN cles. 50  todo_list = TodoList.new\nP ' 51 todo_list.add(\"Wash the car\")\n@ phone book... U 53 todo_list.list # => [“Wash the car”]\nv recipes . 53\n¥ phone_desig... U 54 ¢ 3\ntasks_design. 55 todo_list = TodoList.new\n|V spec. A Zeo-2o 2ot cdd (“Wash the car\")\na on TR I . \\.osh the dog*)\n@ sp  New Folder st # => [“Wash the car”, “Wash the dog\"]\nrsp Reveal in Finder ® R &\nGen Open in Integrated Terminal\nGem  Run Jest ;?:Li:‘é:e' \"y .\n> 08 d Debug Jest N — . cax\" '\n> 09_m Id(\"wash the dog\") |\n> 10_m Find in Folder.. U0 F mplete(“Wash the car®) )\nst # => [“Wash the dog\"] \\\nOpen Folder History 3\nCut v\nCopy ¢« TodoList.new\nPaste 3 Id(\"Wash the car\")\nmplete (“wWash the sheep”)\nCopy Path % C st # fails \"No such task.”\nCopy Relative Path X 0N\nRename -\nD _ .. | example as a test. You can add to the above list as you go._\nCreate Maven Project lent the Behaviour\nTr\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain*® 0 0 n 52, 27 Spaces: 2 JTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 273,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X @ ao - zsh a -\nv RspEC... [} B3 O @ _single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tests  97_single_class_design = [|\n42  _Make a list of examples of how the class will behave in different situations._\na3\n44 \" ruby\n03 45 #1\na6 todo_list = TodoList.new\n47 todo_list.list # => []\na8\n49 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\nI 57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n59 -\n60 #4\n61 todo_list = TodoList.new i\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\") |\n64  todo_list.complete(“Wash the car\") 3\n65 todo_list.list # => [“Wash the dog\"] I\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71 todo_list.list # fails \"No such task.\"\n72 2\n73\n74 _Encode each example as a test. You can add to the above list as you go._\n75\n76 ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain® 0A0 n 52 27 Spaces:2 UTF-8 LF Markdown Spe! ]\n"
  },
  {
    "seconds": 274,
    "text": "o0ce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@aom - zsh a -\nv RsPEC.. [} B} © @ _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  97_single_class_design - 0\n42  _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n03 45 #1\na6 todo_list = TodoList.new\na7 todo_list.list # => []\na8\n49 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57  todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n59 -\n60 # 4\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car\") ]\n65 todo_list.list # => [“Wash the dog\"] i\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71  todo_list.list # fails \"No such task.\"\n72 ot\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain® 0AC n52 Col27 Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 275,
    "text": "o0ce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@aom - zsh a -\nv RsPEC.. [} B} © @ _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  97_single_class_design - 0\n42  _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n03 45 #1\na6 todo_list = TodoList.new\na7 todo_list.list # => []\na8\n49 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57  todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n59 -\n60 # 4\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car\") ]\n65 todo_list.list # => [“Wash the dog\"] i\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71  todo_list.list # fails \"No such task.\"\n72 ot\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain® 0AC n52 Col27 Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 276,
    "text": "o0ce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X w@aom - zsh a -\nv RsPEC.. [} B} © @ _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > & ## 3. Create Examples as Tests  97_single_class_design - 0\n42  _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n03 45 #1\na6 todo_list = TodoList.new\na7 todo_list.list # => []\na8\n49 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"]\n53\n54 # 3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\na 57  todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n59 -\n60 # 4\n61 todo_list = TodoList.new\n62 todo_list.add(\"Wash the car\")\n63 todo_list.add(\"Wash the dog\")\n64 todo_list.complete(“Wash the car\") ]\n65 todo_list.list # => [“Wash the dog\"] i\n66\n67 #5\n68 todo_list = TodoList.new\n69 todo_list.add(\"Wash the car\")\n70  todo_list.complete(“Wash the sheep”)\n71  todo_list.list # fails \"No such task.\"\n72 ot\n73\n74  _Encode each example as a test. You can add to the above list as you go._\n75\n76  ## 4. Implement the Behaviour\n77\n78 _After each test you write, follow the test-driving process of red, green,\nrefactor to implement the behaviour._\n79\n> TIMELINE\nmain® 0AC n52 Col27 Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 277,
    "text": "[ N ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list_spec.rb X m - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > spec > @ todo_list_spec.rb 07_single_class_design - D\n> 00_scratch . 1\n> 01_intro_and_git\n> 02_testing_bites »\n“ > 03_single_met... *\n> 04_single_met... *\n> 05_debugging_1 *\n> 06_single_clas... * I\nv 07_single_clas... *\nv lib\n@ phone_book.... U\nv recipes B\n® phone_desig... U\n¥ tasks_design.. U\nVv spec ®\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_specrb\nrspec u\nGemfile [\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... *\n> 10_multi_class... *\nBl > TIMELINE\nmain* 0A0 Ln1, Col1 Spaces: 2 TF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 278,
    "text": "[ N ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list_spec.rb U X @ am - zsh a -\nv RSPEC_SETUP 07_single_class_design > spec > @ todo_list_spec.rb 07_single_class_design - D\n> 00_scratch . 1|\n> 01_intro_and_git\n> 02_testing_bites »\n© > 03_single_met... *\n> 04_single_met... *\n> 05_debugging_1 *\n> 06_single_clas... *\nv 07_single_clas... *\nv lib\n@ phone_book.... U\nv recipes B\n# phone_desig... U\n¥ tasks_design.. U L\nVv spec ®\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp.. U\nrspec u\nGemfile [\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... *\n> 10_multi_class... *\nBl > TIMELINE\nmain* 0A0 Ln1, Col1 Spaces: 2 TF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 279,
    "text": "[ N ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list_spec.rb U X @M [azsh 8 -\nv RSPEC_SETUP 07_single_class_design > spec > @ todo_list_spec.rb 07_single_class_design - D\n> 00_scratch B 1 |\n> 01_intro_and_git\n> 02_testing_bites *\nbl > 03_single_met... *\n> 04_single_met... *\n> 05_debugging 1 *\n> 06_single_clas... *\nv 07_single_clas.. *\nv lib .\n@ phone_book.... U\nv recipes .\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp... U\nrspec v\nGemfile v\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... *\n> 10_multi_class... *\nL\nB > TIMELINE\nmain® oAO Ln1,Col1 Spaces:2 UTF-8 LF Ruby {3 Spe -\n"
  },
  {
    "seconds": 280,
    "text": "[ N ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > E) # Tasks Class Design Recipe > B ## 3. Create Examples as T §7_single_class_design - []\n> 00_scratch ° 42  _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43\n> 02_testing_bites ® 44 Tuby\nBl > 03singlemet.. » 45 71\n>.04 single met... 46 todo_list = TodoList.new\n= St 47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nZ:-’_'\"’::-c\"’ i a9 #2\nB\nNaoEanol-cles 50 todo_list = TodoList.new\nA 5 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] il\nVv recipes . 53\n¥ phone_desig... U 54 ¢ 3\n¥ tasks_design... U 55 todo_list = TodoList.new\nv spec . 56 todo_list.add(\"Wish the car®)\n@ phone_book... U 57 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ todo_list_sp.. U 59\n.rspec v 60 # 4\nGemfile v @ todo_list_spec.rb U X ©wam -\nGemfile.lock v\n> 08_debugging ~ 07_single_class_design > spec > @ todo_list_spec.rt\n> 09_multi_class... * c |\n> 10_multi_class... *\n~[Code/tmpj/rubytempjrspec_setup/\n> TIMELINE 07_single_class_design/spec/toda_list_spec.rb «\n= 0 A Untracked n1,Col1 Spaces:2 UTF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 281,
    "text": "XK ) tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X wmao - zsh 8 -\nvrspEC.. [} B3 O @  07single_class_design > recipes > ¥ tasks_design.md > & # Tasks Class Design Recipe > G ## 3. Create Examples as ¢ 97_single_class_design = [|\n> 00_scratch . 42 _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. * & a\nSO e 46 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging_1 * 5!\n> 06_5.\"\\910_(:03... . 9 &2\nNATEanoe-clet R e 50 todo_list = TodoList.new\nR ¥ 51  todo_list.add(\"Wash the car\")\n& Bepsbodcat 52 todo_list.list # => [“Wash the car\"] |\nv recipes . 53\n¥ phone_desig... U 54 #3\n¥ tasks_design.. U 55 todo_list = TodoList.new\nv spec ® 56 todo_list.add(\"Wash the car\")\n@ phone_book... U 57 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ todo_list_sp.. U 59\n.rspec v 60 # 4\nGemfile U @ todo_list_spec.ib U\nGemfile.lock v\n> 08_debugging... ® 07_single_class_design > spec > @ todo_list_spec.rt\n> 09_multi_class... * .\n> 10_multi_class... *\n> TIMELINE\nmain® 0A0 53,Col1 Spaces:2 UTF-8 LF Markdowr Spe s\n"
  },
  {
    "seconds": 282,
    "text": "XK ) tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X wmao - zsh 8 -\nvrspEC.. [} B3 O @  07single_class_design > recipes > ¥ tasks_design.md > & # Tasks Class Design Recipe > G ## 3. Create Examples as ¢ 97_single_class_design = [J\n> 00_scratch . 42 _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. * & a\n2 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging_1 * 5!\n> 06_single_clas... * 49 22\nNATEENON-cist R e 50 todo_list = TodoList.new\nv ¥ 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] -\nv recipes . 53\n¥ phone_desig... U 54 #3\n¥ tasks_design.. U 55 todo_list = TodoList.new\nv spec ® 56 todo_list.add(\"Wash the car\")\n@ phone_book... U 57 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ todo_list_sp.. U 59\n.rspec v 60 # 4\nGemfile U @ todo_list_spec.b U >\nGemfile.lock v\n> 08_debugging... ® 07_single_class_design > spec > @ todo_list_spec.rt\n> 09_multi_class... * .\n> 10_multi_class... *\n> TIMELINE\nmain® 0A0 53,Col1 Spaces:2 UTF-8 LF Markdowr Spe s\n"
  },
  {
    "seconds": 283,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X wmam - zsh 8 -\nvRspEC.. [} B3 O @  07single_class_design > recipes > ¥ tasks_design.md > B # Tasks Class Design Recipe > G ## 3. Create Examples as ¢ 97_single_class_design = [|\n> 00_scratch ° a2 _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3\n> 02_testing_bites * a4 \"\"\" ruby\nBl > 03singlemet.. » 45 71\nSO e 46 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging_1 * e\n> 06_single_clas... * 49 22\n. DEsogle class @ 56 todo_list = TodoList.new\n> B = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [*Wash the car\"] =\nVv recipes . 53\n¥ phone_desig... U 54 #3\ntasks_design 55 todo_list = TodoList.new\nv spec * 56 todo_list.add(\"Wash the car\")\n@ phone_book... U 57 todo_list.add(\"Wash the dog\")\n@ spec_helper... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ todo_list_sp... U 59\nrspec v 60 ¢4\nGemfile Y @& todo_list_spec.rb U\nGemfile.lock (7}\n> 08 debugging single_class_design > spec > @ todo_list_spec.rb\n> 09_multi_class... 1\n> 10_muiti_class... =\n> TIMELINE\nmain® 0 0 n 53, Col1 Spaces: 2 JTF-8 LF Markdowr: Spe |\n"
  },
  {
    "seconds": 284,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W m@m - zsh a -\nvRspeC.. [ B3 O @ 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - [|\n42  _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n94 45 #1\n46 todo_list = TodoList.new\na7 todo_list.list # => []\na8\na9 # 2\n50 todo_list = TodoList.new\ni 51 todo_list.add(\"Wash the car\")\n52 todo_list.list # => [“Wash the car\"] |\n53\n54 # 3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n59\n60 4\n@ todo_list_spec.rb U\n)_single_class_design > spec > @ todo_list_spec.rb\n1\nB > TIMELINE\nmain* 0 0 n 53, Col1 Spaces: 2 JTF-8 LF Markdown Spe! 4\n"
  },
  {
    "seconds": 285,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W m@m - zsh a -\nvRspeC.. [ B3 O @ 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - [|\n42 _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n94 45 #1\n46 todo_list = TodoList.new\na7 todo_list.list # => []\na8\na9 # 2\n50 todo_list = TodoList.new\n51 todo_list.add(\"Wash the car\")\n@ 52 todo_list.list # => [“Wash the car\"] 1\n53\n54 # 3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n59\n60 4\n@ todo_list_spec.rb U\n)_single_class_design > spec > @ todo_list_spec.rb\n1\nB > TIMELINE\nmain* 0 0 n 53, Col1 Spaces: 2 JTF-8 LF Markdown Spe! 4\n"
  },
  {
    "seconds": 286,
    "text": "[ N tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U X W m@m - zsh a -\nvRspeC.. [ B3 O @ 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - [|\n42 _Make a list of examples of how the class will behave in different situations._\na3\na4 \" ruby\n94 45 #1\n46 todo_list = TodoList.new\na7 todo_list.list # => []\na8\na9 # 2\n50 todo_list = TodoList.new\n, 51 todo_list.add(\"Wash the car\")\n@ 52 todo_list.list # => [“Wash the car\"] 1\n53\n54 # 3\n55 todo_list = TodoList.new\n56 todo_list.add(\"Wash the car\")\n57 todo_list.add(\"Wash the dog\")\n58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n59\n60 4\n@ todo_list_spec.rb U\n)_single_class_design > spec > @ todo_list_spec.rb\n1\nB > TIMELINE\nmain* 0 0 n 53, Col1 Spaces: 2 JTF-8 LF Markdown Spe! 4\n"
  },
  {
    "seconds": 287,
    "text": "o0ce 1 todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb x m - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb 07_single_class_design - D\n> 00_scratch 1|\n> 01_intro_and_git\n> 02_testing_bites »\n“ > 03_single_met... »\n> 04_single_met... *\n> 05_debugging 1 *»\n> 06_single_clas... *\nv 07_single_clas.. »\nv lib .\n4@ phone_book.... U\n& todo_list.rb\nv recipes .\n¥ phone_desig... U\n¥ tasks_design.. U\n+ spec .\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp... U\n=Tapes L @ todo_list_spec.rb U\nGemfile v\nGemfile.jock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 2\n> 09_multi_class... *\n> 10_multi_class. .\nB > TIMELINE\nmain® oA0 n1.Col1 Spaces:2 UTF-8 LF Ruby {3 Spel ]\n"
  },
  {
    "seconds": 288,
    "text": "ooe0 tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_listrb U wm@m - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =3 ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . 42 _Moke o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43\n> 02_testing_bites » 4 \" \"Tuby\nS8 5 03_single_met... * ~_ wi\n> 04_single_met... ® a6 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging 1 * a\n> 06_s.m9|e_clas - ® 9 #2\nNI s e 50 todo_list = TodoList.new |\nN . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_list.rb u 53 | |\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec e 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “\"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 #4 1\n<pes ! @ todo_list_spec.rb U\nGemfile u\naeiiiaiok U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 3\n> 09_multi_class... *\n> 10_multi_class... *\n> TIMELINE\nmain* 0OA0 n53,Col1 Spaces: 2 TF-8 LF Markdowr Spe -\n"
  },
  {
    "seconds": 289,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > EJ ## 3. Create Examples as Te @7_single_class_design - D\n> 00_scratch . 42 _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites * a4 Tuby\nol > 03singlemet. o+ 45 71\ns a6 todo_list = TodoList.new\n> 04_single_met.. *\n47 todo_list.list # => []\n> 05_debugging 1 * 48\n> ingll\ngﬁ_s.mg e_clas... * 49 22\nMUL 50 todo_list = TodoList.new\nL = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_list.rb u\n53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\ne Y @& todo_list_spec.rb U x W am -\nGemfile (V] i\nGemfile.lock v 07 ;V!!)l' class_design > spec > @ todo_list_spec.rb\n> 08_debugging... *\n> 09_multi_class... *\n> 10_multi_class... *\n> TIMELINE\nmain* 0AO Ln1,Col1 Spaces:2 UTF-8 LF Ruby {3 Spe ]\n"
  },
  {
    "seconds": 290,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > £ ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42 _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites * a4 Tuby\nol > 03singlemet. o+ 45 71\nAT et a6 todo_list = TodoList.new\n47 todo_list.list # => []\n> 05_debugging 1 *\n> 06_single_clas... * :: 22\n. OL-single_clea_ 1@ 50 todo_list = TodoList.new\nL = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_list.rb v 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\ne Y @& todo_list_specrb U ® o\nGemfile (V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb |\nS, 1 require \"todd\"\n> 09_multi_class... *\n> 10_multi_class... *\n> TIMELINE\nmain* 0AO0 n1,Col14 Spaces:2 UTF-8 LF Ruby <3 Spe >\n"
  },
  {
    "seconds": 291,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > £ ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42  _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites * a4 Tuby\nbl > 03_single_met.. * o e\nAT et 46  todo_list = TodoList.new\n47 todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.mglc_cus‘.‘ L 9 #2\nMO Seaie-cie s 50 todo_list = TodoList.new\nL = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_list.rb u 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nfspec Y & todo_list_spec.b U ® 9 m -\nGemfile (V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n5106 debigolia s 1 require \"todo_list\" )\n> 09_multi_class... * 2 | |\n> 10_multi_class... *\n> TIMELINE\nmain* 0AO0 V. 1 Spaces:2 UTF-8 LF Ruby % Spe >\n"
  },
  {
    "seconds": 292,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > £ ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42  _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites * 4 xuby\nol > 03singlemet. o+ 45 71\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47 todo_list.list # => []\n> 05_debugging 1 * a8\n> ingl\ng‘;’-‘_\"‘gl ‘-c:’ 1 49 #2\ni\nN DO C s 50 todo_list = TodoList.new\nL = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_list.rb v 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\ne Y @& todo_list_specrb U ® W am -\nGemfile (V] i\nGemfile.lock v 07 ;V!!)l' uan-; des '.;;v dr,;ul»:i t‘ todo_list_spec.rb\ne “todo .\n> 08_debugging... * 2 roquiTelstode Ve\n> Iti_class... |\n09_multi_class... 3 RSpt{\n> 10_multi_class... * |\n> TIMELINE\nmain® 0AO0 r I5 Spaces:2 UTF-8 LF Ruby <3 Spe ]\n"
  },
  {
    "seconds": 293,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > £ ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42  _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites * a4 Tuby\nbl > 03_single_met.. * o e\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47 todo_list.list # => []\n> 05_debugging 1 * a8\n> ingll\nz:_s.mgl t_c:s * 49 22\ni\nN DO C s 50 todo_list = TodoList.new\nL = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_list.rb v\n53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\ne Y @& todo_list_specrb U ® W am -\nGemfile (V] i\nGemfile.lock v 07 ']..VH)I' uan-,.‘ des '.;;v dr,;ul»:i t‘ todo_list_spec.rb\ne “todo o\n> 08_debugging... * 3 e atoce_us\n> Iti_class... |\nLRt 3 RSpec .doscribe‘\n> 10_multi_class... * |\n> TIMELINE\nmain* (N n3 1 Spaces:2 UTF-8 LF Ruby {3 Spe 9\n"
  },
  {
    "seconds": 294,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites o Tuby\nBl > 03_single_met.. * i\n3 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nzs_s.mglo_clas . 49 22\nUL o T P 50 todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y & todo_list_spec.b U ® 9 m -\nGemfile V] )\nGemfile.lock v 07 ;Vl{)I'__(,hl'v;_(,l\"-'ll;: d-,p;ri t? todo_list_spec.rb\n> 08_debugging... * 2 xoquire (ot\n> lti_class... B\nL LI 3 RSpec.describe TodoLisq\n> 10_multi_class... *\n> TIMELINE\nmain*® 0A0 n3,Col24 Spaces:2 UTF-8 LF Ruby 3 Spe Q)\n"
  },
  {
    "seconds": 295,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites o Tuby\nBl > 03_single_met.. * i\n3 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.ingllo_c:s . 49 22\n-\nN o 50  todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y & todo_list_spec.b U ® 9 m -\nGemfile V] )\nGemfile.lock v 07 ;Vl{)I'__(,hl'v;_(,l\"-'ll;: d-,p;ri t? todo_list_spec.rb\n> 08_debugging... * 2 xequire Gt\n> lti_class... B\nbl 3 RSpec.describe TodolList dt‘\n> 10_multi_class... *\n> TIMELINE\nmain® 0AQC n3 27 Spaces:2 UTF-8 LF Ruby {3 Spe Q)\n"
  },
  {
    "seconds": 296,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites o Tuby\nBl > 03_single_met.. * i\n3 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.ingllo_c:s . 49 22\n-\nN o 50  todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y & todo_list_spec.b U ® 9 m -\nGemfile V]\nGemfile.lock v 07. ;v|;) |-\"u,|-,-;_r;.--.':l;: d-,p;r-i t? todo_list_spec.rb\n> 08_debugging... * 2 xequire Gt\n> i\nbl 3 RSpec.describe TodolList do B\n> 10_multi_class... *\n4 Al\n5 end\n> TIMELINE\nmain* 0AO 3 Spaces:2 UTF-8 LF Ruby % Spe! 4\n"
  },
  {
    "seconds": 297,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites o Tuby\nBl > 03_single_met.. * i\n3 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.ingllo_c:s . 49 22\n-\nN o 50  todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y & todo_list_spec.b U ® 9 m -\nGemfile V]\nGemfile.lock v 07. ;v|;) |-\"u,|-,-;_r;.--.':l;: d-,p;r-i t? todo_list_spec.rb\n> 08_debugging... * 2 xequire Gt\n> i\nbl 3 RSpec.describe TodolList do B\n> 10_multi_class... *\na2\n5 end\n> TIMELINE\nmain* 0AO 3 Spaces:2 UTF-8 LF Ruby % Spe! 4\n"
  },
  {
    "seconds": 298,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites o Tuby\nBl > 03_single_met.. * i\n3 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.ingllo_c:s . 49 22\n-\nN o 50  todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] -\n@ todo_listrb U 53 |\nv recipes . 54 #3 I\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y & todo_list_spec.b U ® 9 m -\nGemfile V] )\nGemfile.lock v 07 ;Vl{)I'__(,hl'v;_(,l\"-'ll;: d-,p;ri t? todo_list_spec.rb\n> 08_debugging... * 2 xequire Gt\n> Iti_class...\nbl 3 RSpec.describe TodolList do B\n> 10_multi_class... *\n« =\n5 end\n> TIMELINE\nmain* 0AO 3 Spaces:2 UTF-8 LF Ruby % Spe! 4\n"
  },
  {
    "seconds": 299,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ot Tuby\nBl > 03_single_met.. * o 1\n3 46 todo_list = TodoList.new\n> 04_single_met.. *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.ingllo_c:s . 49 22\n-\nR e OO = 50 todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] - |\n@ todo_listrb U\n53\nv recipes : sa #3 1\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y & todo_list_spec.b U ® 9 m -\nGemfile V] )\nGemfile.lock v 07 .‘,1,.,, e_ \\,m; nn,--..(l;:w-,u;r,i t, todo_list_spec.rb\n> 08_debugging... * 2 £0qu:1e o\n> Iti_class...\nGl 3 RSpec.describe TodoList do -\n> 10_multi_class... *\na =\n5 end\n> TIMELINE\nmain® 0AC Ln4, Col3 Spaces:2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 300,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ot Tuby\nBl > 03_single_met.. * o 1\n3 46 todo_list = TodoList.new\n> 04_single_met.. *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nzs_s.mglo_clas . 49 22\nUL o 2 50 todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53 T\nv recipes = 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\ngepes Y & todo_list_spec.b U ® o\nGemfile V] )\nGemfile.lock v 07 .‘,1,.,, e_ \\,m; nn,--..(l;:w-,u;r,i t, todo_list_spec.rb\n> 08_debugging... * 2 Eequ_Le o=See\n> Iti_class...\nGl 3 RSpec.describe TodolList do B\n> 10_multi_class... *\na | ‘\n5 end\n> TIMELINE\nmain® 0AC Ln4, Col3 Spaces:2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 301,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ot Tuby\nBl > 03_single_met.. * o 1\n3 46 todo_list = TodoList.new\n> 04_single_met.. *\na7 todo_list.list # => []\n> 05_debugging 1 * a“\n> i\nz:_s.ingllo_c:s . 49 22\n-\nR e OO = 50 todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car)\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y @ todo_list_spec.b U ® 9 m -\nGemfile V] i\nGemfile.lock v 07 ;,.,, e_ \\,m».-,‘ nl,--..(l;:w-,u;r,i t, todo_list_spec.rb\n> 08_debugging... * 2 roquize =tes\n> Iti_class...\nGl 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns A\n5 end\n> TIMELINE\nmain® 0AC Ln4, Col3 Spaces:2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 302,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ot Tuby\nBl > 03_single_met.. * o 1\n3 46 todo_list = TodoList.new\n> 04_single_met.. *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.ingllo_c:s . 49 22\n-\nR e OO = 50 todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car)\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes : sa #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\ngepes Y @ todo_list_spec.b U ® o\nGemfile V] )\nGemfile.lock v 07 ;,.,, e_ \\,m».-,‘ nl,--..(l;:w-,u;r,i t, todo_list_spec.rb\n> 08_debugging... * 2 roquize =tes\n> Iti_class...\nGl 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns H\n5 end\n> TIMELINE\nmain® 0AC Ln4, Col3 Spaces:2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 303,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ot Tuby\nBl > 03_single_met.. * o 1\n3 46 todo_list = TodoList.new\n> 04_single_met.. *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.ingllo_c:s . 49 22\n-\nR e OO = 50 todo_list = TodoList.new\nVi = 51 todo_list.add(\"Wash the car)\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes : sa #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec o 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\ngepes Y @ todo_list_spec.b U ® o\nGemfile V] )\nGemfile.lock v 07 ;,.,, e_ \\,m».-,‘ nl,--..(l;:w-,u;r,i t, todo_list_spec.rb\n> 08_debugging... * 2 roquize =tes\n> Iti_class...\nGl 3 RSpec.describe TodoList do -\n> 10_multi_class... *\nas o\n5 end\n> TIMELINE\nmain® 0AC Ln4, Col3 Spaces:2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 304,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as T« @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites * 4 xuby\nBl > 03_single_met.. * s &1\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\n36_s.mgie_chs . 9 #2\niOTmngleccles-. =8 50  todo_list = TodoList.new\nN 2 51 todo_list.add(\"Wash the car)\n@ phone_book._..U 52 todo_list.list # => [“Wash the car\"] B\n@ todo_listrb U 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nSopac U @& todo_list_spec.b U ® M -\nGemfile v\nGemilalock v f:‘g_;n«.; e c'.;.:»1 r:.,-*.:)t\" du1<1t‘ todo_list_spec.rb\nS e : require “todo_lis\n> i\n00 JouKl cam— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\n4 &\n5 end\n> TIMELINE\nmain* [N Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ -\n"
  },
  {
    "seconds": 305,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as T« @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites * 4 xuby\nBl > 03_single_met.. * s &1\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\n36_s.mgie_chs . 9 #2\niOTmngleccles-. =8 50  todo_list = TodoList.new\nN 2 51 todo_list.add(\"Wash the car)\n@ phone_book._..U 52 todo_list.list # => [“Wash the car\"] B\n@ todo_listrb U 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nSopac U @& todo_list_spec.b U ® M -\nGemfile v\nGemilalock v f:‘g_;n«.; e c'.;.:»1 r:.,-*.:)t\" du1<1t‘ todo_list_spec.rb\nS e : require “todo_lis\n> i\n00 JouKl cam— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns L\n5 end\n> TIMELINE\nmain* [N Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ -\n"
  },
  {
    "seconds": 306,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as T« @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites * 4 xuby\nBl > 03_single_met.. * s &1\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\n36_s.mgie_chs . 9 #2\niOTmngleccles-. =8 50  todo_list = TodoList.new\nN 2 51 todo_list.add(\"Wash the car)\n@ phone_book._..U 52 todo_list.list # => [“Wash the car\"] B\n@ todo_listrb U 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nSopac U @& todo_list_spec.b U ® M -\nGemfile v\nGemilalock v f:‘g_;n«.; e c'.;.:»1 r:.,-*.:)t\" du1<1t‘ todo_list_spec.rb\nS e : require “todo_lis\n> i\n00 JouKl cam— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns i\n5 end\n> TIMELINE\nmain* [N Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ -\n"
  },
  {
    "seconds": 307,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as T« @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites * 4 xuby\nBl > 03_single_met.. * s &1\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\n36_s.mgie_chs . 9 #2\niOTmngleccles-. =8 50  todo_list = TodoList.new\nN 2 51 todo_list.add(\"Wash the car)\n@ phone_book._..U 52 todo_list.list # => [“Wash the car\"] B\n@ todo_listrb U 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nSopac U @& todo_list_spec.b U ® M -\nGemfile v\nGemilalock v f:‘g_;n«.; e c'.;.:»1 r:.,-*.:)t\" du1<1t‘ todo_list_spec.rb\nS e : require “todo_lis\n> i\n00 JouKl cam— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns i\n5 end\n> TIMELINE\nmain* [N Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ -\n"
  },
  {
    "seconds": 308,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as T« @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites * 4 xuby\nBl > 03_single_met.. * s &1\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\n36_s.mgie_chs . 9 #2\niOTmngleccles-. =8 50  todo_list = TodoList.new\nN 2 51 todo_list.add(\"Wash the car)\n@ phone_book._..U 52 todo_list.list # => [“Wash the car\"] B\n@ todo_listrb U 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nSopac U @& todo_list_spec.b U ® M -\nGemfile v\nGemilalock v f:‘g_;n«.; e c'.;.:»1 r:.,-*.:)t\" du1<1t‘ todo_list_spec.rb\nS e : require “todo_lis\n> i\n00 JouKl cam— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns i\n5 end\n> TIMELINE\nmain* [N Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ -\n"
  },
  {
    "seconds": 309,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ® “ Tuby\nil > 03_single_met... o il AL\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs o 9 #2\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nD ‘ 51  todo_list.add(\"Wash the car})\n8 prooehoocty 52 todo_list.list # =>-[“Wash the car\"] 5\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n(o v f.“'_']..m; e c'.n:»l r;.,-*.:);oaar;:i:\\t? todo_list_spec.rb\n> 08_debugging... * 2 ZOQU_xe o_l1s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns &\n5 end\n> TIMELINE\nmain® 0A0 Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ =\n"
  },
  {
    "seconds": 310,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ® “ Tuby\nil > 03_single_met... o il AL\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs o 9 #2\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nD ‘ 51  todo_list.add(\"Wash the car})\n8 prooehoocty 52 todo_list.list # =>-[“Wash the car\"] 5\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n(o v f.“'_']..m; e c'.n:»l r;.,-*.:);oaar;:i:\\t? todo_list_spec.rb\n> 08_debugging... * 2 ZOQU_xe o_l1s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns &\n5 end\n> TIMELINE\nmain® 0A0 Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ =\n"
  },
  {
    "seconds": 311,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ® “ Tuby\nil > 03_single_met... o il AL\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs o 9 #2\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nD ‘ 51  todo_list.add(\"Wash the car})\n8 prooehoocty 52 todo_list.list # =>-[“Wash the car\"] 5\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n(o v f.“'_']..m; e c'.n:»l r;.,-*.:);oaar;:i:\\t? todo_list_spec.rb\n> 08_debugging... * 2 ZOQU_xe o_l1s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\na &\n5 end\n> TIMELINE\nmain® 0A0 Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ =\n"
  },
  {
    "seconds": 312,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ® “ Tuby\nil > 03_single_met... o il AL\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs o 9 #2\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nD ‘ 51  todo_list.add(\"Wash the car})\n8 prooehoocty 52 todo_list.list # =>-[“Wash the car\"] 5\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n(o v f.“'_']..m; e c'.n:»l r;.,-*.:);oaar;:i:\\t? todo_list_spec.rb\n> 08_debugging... * 2 ZOQU_xe o_l1s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns &\n5 end\n> TIMELINE\nmain® 0A0 Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ =\n"
  },
  {
    "seconds": 313,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ® “ Tuby\nil > 03_single_met... o il AL\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs o 9 #2\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nD ‘ 51  todo_list.add(\"Wash the car})\n8 prooehoocty 52 todo_list.list # =>-[“Wash the car\"] 5\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n(o v f.“'_']..m; e c'.n:»l r;.,-*.:);oaar;:i:\\t? todo_list_spec.rb\n> 08_debugging... * 2 ZOQU_xe o_l1s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns &\n5 end\n> TIMELINE\nmain® 0A0 Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ =\n"
  },
  {
    "seconds": 314,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites ® “ Tuby\nil > 03_single_met... o il AL\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs o 9 #2\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nD ‘ 51  todo_list.add(\"Wash the car})\n8 prooehoocty 52 todo_list.list # =>-[“Wash the car\"] 5\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n(o v f.“'_']..m; e c'.n:»l r;.,-*.:);oaar;:i:\\t? todo_list_spec.rb\n> 08_debugging... * 2 ZOQU_xe o_l1s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... *\ns &\n5 end\n> TIMELINE\nmain® 0A0 Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ =\n"
  },
  {
    "seconds": 315,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites * “ uby\nil > 03_single_met.. * S w2\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs ° 49 22\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nL 2 51 todo_list.add(\"Wash the car)\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes e 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nepec YU @& todo_list_spec.b U ® M -\nGemfile v\nOemflelock: U m,;m;.- ;'.‘.:,1 r;l:‘“-i:ovdm;.i\\tf todo_list_spec.rb\n> 08_debugging... * 2 ZSqLiTe o_11s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... * a |\n5 end\n> TIMELINE\nmain* 0AC Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe! (]\n"
  },
  {
    "seconds": 316,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites * “ uby\nil > 03_single_met.. * S w2\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs ° 49 22\ni OTmnglecles-. < 6 50 todo_list = TodoList.new\nL 2 51 todo_list.add(\"Wash the car)\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes e 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nepec YU @& todo_list_spec.b U ® M -\nGemfile v\nOemflelock: U m,;m;.- ;'.‘.:,1 r;l:‘“-i:ovdm;.i\\tf todo_list_spec.rb\n> 08_debugging... * 2 ZSqLiTe o_11s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do -\n> 10_multi_class... * a I\n5 end\n> TIMELINE\nmain* 0AC Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe! (]\n"
  },
  {
    "seconds": 317,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites * “ uby\nil > 03_single_met.. * S w2\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging_1 * A\n> i\nz:\"_\"'gl\"-c:’ i 9 #2\nB\nNN S 50 todo_list = TodoList.new\nL 2 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] |\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n. 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock u A 1 “todo. 11st\"\n> 08_debugging... * 2 ZSqLiTe o_11s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do =\n> 10_multi_class... * a I\n5 end 1 ‘\n|\n> TIMELINE\nmain* 0OAC Ln4,Col3 Spaces:2 UTF-8 LF Ruby &3 Spe >\n"
  },
  {
    "seconds": 318,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites * “ uby\nil > 03_single_met.. * S w2\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging_1 * A\n> i\nz:\"_\"'gl\"-c:’ i 9 #2\nB\nNN S 50 todo_list = TodoList.new\nL 2 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] 5\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nJopac Y @ todo_list_spec.b U ® M -\nGemfile v\n. 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock u A 1 “todo. 11st\"\n> 08_debugging... * 2 ZSqLiTe o_11s\n> i\n00 Mkl paa— e 3 RSpec.describe TodoList do =\n> 10_multi_class... * a I\n5 end 1 ‘\n|\n> TIMELINE\nmain* 0OAC Ln4,Col3 Spaces:2 UTF-8 LF Ruby &3 Spe >\n"
  },
  {
    "seconds": 319,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (=) ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites * “ uby\nil > 03_single_met.. * S w2\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.mglw_c:s ° 49 22\nB\nNN S 50 todo_list = TodoList.new\nL 2 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] 5\n@ todo_listrb U\n53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nepec YU @& todo_list_spec.b U ® M -\nGemfile v\n07 sinale_class. desian > spec > '@ todo_list spec.rb\n(o v ) _;m,. c Al de thd r1<1 t? do_list_sp t\n> 08_debugging... * 2 ZSqLiTe o_11s\n> i\n00 Mkl paa— e 3 RSpecAdescxifc TodoList do =\n> 10_multi_class... * a I\n5 end ‘\n|\n> TIMELINE\nmain* 0AC Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe! (]\n"
  },
  {
    "seconds": 320,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as T @7 single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites s xuby\nil > 03_single_met.. * S5 w2\n2 a6 todo_list = TodoList.new\n> 04_single_met.. *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.mglw_c:s L4 49 22\n.\nNS s 50 todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes ® 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nepec YU @& todo_list_spec.b U ® M -\nGemfile u\nGerflelock’ U m_;m; e ;-.‘.:,1 r;.:«.;i;;°a<.r;:i<-i\\t? todo_list_spec.rb\n> 08_debugging... * 2 ZSqLiTe o_11s\n> i\n00 K paa— e 3 RSpec.descyibe TodoList do | —]\n> 10_multi_class... a | cf\n5 end\n> TIMELINE\nmain® 0AC Ln4,Col3 Spaces:2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 321,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch o 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites - Tuby\nil > 03_single_met.. * S5 w2\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.mglw_c:s L4 49 22\n.\nMECCANOCH 50  todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes - 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® wo--\nGemfile u\nGemfile.lock v G’_;v\\«; e, Cl.hfi r;.,-«.:;» > <-r;:;-i\\ ‘ todo_list_spec.rb\no8 kbt : require \"todo_list\n> i\n00 P 3 RSpec.describe TodoList do - 1\n> 10_multi_class... * g\na it |\n5 end\n> TIMELINE\nmain* (1} [ n4 ol 7 Spaces: 2 UTF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 322,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as T @7 single_class_design - [|\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites - Tuby\nil > 03_single_met... o Sl L 5\n>:04 single met ® a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nze_s.mg!e_chs L4 49 22\nViOLSoglechs.. @ 50  todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nv recipes ® 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nepec YU @& todo_list_spec.b U ® M -\nGemfile u\nGerflelock’ U 07_single_class_design > spec > @ todo_list_spec.rb\nTG - ; require \"todo_list\n> i\n00 K paa— e 3 RSpec.describe TodoList do |\n.\n> 10_multi_class... a '\"C,.:\n5 end\n> TIMELINE\nmain® 0AC Y 13 (5selected) Spaces:2 UTF-8 LF Ruby s Spe! =\n"
  },
  {
    "seconds": 323,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch o 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites = uby\nBl > oasinglemet. o+ 45 71\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> i\nz:_s.mglw_c:s L4 49 22\n.\nMECCANOCH 50  todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y @& todo_list_specrb U @ 9 m -\nGemfile u\nGerflelock’ U m_;m; e ;-.‘.:,1 r;.,-«.:;;o,dap:;;t? todo_list_spec.rb\n> 08_debugging... * 2 ZOqU_xe o_l1s\n> i\n00 P 3 RSpec.describe TodoList do |1\n> 10_multi_class... * e\na4 context d\n5 end\n> TIMELINE\nmain* [} ( na 1 Spaces:2 UTF-8 LF Ruby s Spe! -\n"
  },
  {
    "seconds": 324,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 s\n> 02_testing_bites - Tuby\nil > 03_single_met.. * S5 w2\n2 a6 todo_list = TodoList.new\n> 04_single_met.. *\n47  todo_list.list # => []\n> 05_debugging_1 * P\n> 06_s.mg1¢_chs... . 49 2\nAL DL T 50 todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes - 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGerflelock’ U 07_single_class_design > spec > @ todo_list_spec.rb\n108 dekina : require \"todo_list\"\nPR Ca e 3  RSpec.describe TodoList do =\n2T E a4 context “given\n5 end\n> TIMELINE\nmain* 0OAC na 18 Spaces:2 UTF-8 LF Ruby {3 Spe! 0\n"
  },
  {
    "seconds": 325,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as Tc @7 single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites - Tuby\nil > 03_single_met.. © S5 w2\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> i\nze_s.mgie_chs L4 49 22\n.\nVOTRngech 50  todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phona_book. -1 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nV recipes - 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nfepec YU @& todo_list_spec.b U ® M -\nGemfile u\nB m_;m;.- ;'.‘.:,1 cu‘hjthovdm:.i\\tf todo_list_spec.rb\n> 08_debugging... * 2 Zoqu:xe o_l1s\n> Iti\n00 Jull came= e 3 RSpec.describe TodolList do =\n-\n2RI s a4 context “given no *\n5 end\n> TIMELINE\nmain® 0 A C Y} 21 Spaces:2 UTF-8 LF Ruby % Spe! -\n"
  },
  {
    "seconds": 326,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git 43\n> 02_testing_bites A3 I i ruby\nil > 03_single_met.. © S5 w2\nS Of kit LS a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging_1 * P\n?) 06_s.mg|e_chs... . 49 2\nNMEOZRngeCles— S8 50 todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nMl o 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.o U ® 9 m -\n3108 detiaoat : require \"todo_list\"\nPEUN T C e 3  RSpec.describe TodolList do B\n2T a4 context “given no *\n5 end\n> TIMELINE\nmain® 0AC na 21 Spaces:2 UTF-8 LF Ruby s Spe’ )\n"
  },
  {
    "seconds": 327,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as Tc @7 single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites - Tuby\nil > 03_single_met.. © S5 w2\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> i\nze_s.mgie_chs L4 49 22\n.\nVL Ngescie. 50  todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phona_book. -1 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U\n53\nV recipes - 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nfepec YU @& todo_list_spec.b U ® M -\nGemfile u\nOemflelock’ U 07_single_class_design > spec > @ todo_list_spec.rb\nL 7 . =\n108 abigaigl 5 require \"todo_list\n> i\n{ :)9_vmm_c‘l:ss ‘ 3 RSpec.describe TodolList do =\n.\n0_mutti_class... a4 context “given no ti\n5 end\n> TIMELINE\nmain® 0AC n4,Col22 Spaces:2 UTF-8 LF Ruby {3 Spe! 0\n"
  },
  {
    "seconds": 328,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as Tc @7 single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 L\n> 02_testing_bites - Tuby\nil > 03_single_met.. © S5 w2\n2 a6 todo_list = TodoList.new\n> 04_single_met.. *\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> i\nz:_s.qnglie_c:s L4 49 22\n.\ne 50 todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phona_book. -1 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nfepec YU @& todo_list_spec.b U ® M -\nGemfile u\n07 sinaleclass. desian > spec > '@ todo_list spec.rb\nGemiialock v ) _;m,. c Al de thd r1<1 t? do_list_spec.rt\n> 08_debugging... * 2 Zoqu:xe o_l1s\n> i\n{ :)9_vmm_c‘l:ss ‘ 3 RSpec.describe TodolList do =\n-\n0_mutti_class... a4 context “given no td'\n5 end\n> TIMELINE\nmain® 0AC na 23 Spaces:2 UTF-8 LF Ruby {3 Spel 0\n"
  },
  {
    "seconds": 329,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (= ## 3. Create Examples as Tc @7 single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git 43 L\n> 02_testing_bites - Tuby\nil > 03_single_met.. © S5 w2\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> i\nze_s.mgie_chs L4 49 22\n.\nVOTRngech 50  todo_list = TodoList.new\nL . 51 todo_list.add(\"Wash the car\")\n@ phona_book. -1 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nIopac Y @ todo_list_spec.o U ® M -\nGemfile u\n07 sinaleclass. desian > spec > '@ todo_list spec.rb\nGemiialock v ) _;m,. c Al de thd r1<1 t? do_list_sp t\n> 08_debugging... * 2 Zoqu:xe o_l1s\n> Iti\n{ ?g‘m |_c:ss ‘ 3  RSpec.describe TodolList do\n. —\nOt close.. 4 context “given no tasks\" do\n5 er|\n6 end\n> TIMELINE\nmain® 0AC n5 Col7 Spaces:2 UTF-8 LF Ruby s Spe .\n"
  },
  {
    "seconds": 330,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Te 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 e\n> 02_testing_bites * “ xuby\nil > 03_single_met.. * &5\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging_1 * e\n> 06_s.mg|e_chs..‘ . 49 22\nMO Rngte cles: =8 50  todo_list = TodoList.new\nL o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes - 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\n-fspec YU @& todo_list_spec.b U ® M -\nGemfile u\n(e, v 07_single_class, r;u«.:;» > spec > ‘ todo_list_spec.rb\n5108 debigging & : require \"todo_list\nX 09_nwn‘|_closs... ‘ 3  RSpec.describe TodolList do\nZHIO TUN clove. RS 4 context “given no tasks\"-do ]\n5 end\n6 end\n> TIMELINE\nmain® 0AO0 n4, Col30 Spaces:2 UTF-8 LF Ruby s Spe! 4\n"
  },
  {
    "seconds": 331,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Te 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git 43 L\n> 02_testing_bites * “ xuby\nil > 03_single_met.. * &5\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_chs..‘ . 49 22\nMO Rngte cles: =8 50  todo_list = TodoList.new\nL o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nVv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\n-fspec Y @& todo_list_spec.b U ® M -\nGemfile v\nGemfile.Jock v 07_single_class, r;.,-«.:;» > spec > ‘ todo_list_spec.rb\n5108 debigging & : require \"todo_list\nX 09_nwn‘|_closs... ‘ 3  RSpec.describe TodolList do\n2T ME 4 context “given no tasks\"-do 7l\n5 it \"\n6 end\n7 end\n> TIMELINE\nmain® 0AQ ns 0 Spaces:2 UTF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 332,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Te 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git 43 L\n> 02_testing_bites * “ xuby\nil > 03_single_met.. * &5\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg|e_chs..‘ . 49 22\nMO Rngte cles: =8 50  todo_list = TodoList.new\nL o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\n-fspec Y @& todo_list_spec.b U ® M -\nGemfile v\nGemfile.Jock v 07_single_class, r;.,-«.:;» > spec > ‘ todo_list_spec.rb\n5108 debigging & : require \"todo_list\nX 09_nwn‘|_closs... ‘ 3  RSpec.describe TodolList do\n2T ME 4 context “given no tasks\"-do 7l\n5 it \"has an emptyf'\n6 end\n7 end\n> TIMELINE\nmain* 0AQ 1 Spaces:2 UTF-8 LF Ruby {3 Spe ]\n"
  },
  {
    "seconds": 333,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch o 42  _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 e\n> 02_testing_bites * “ xuby\nil > 03_single_met.. * &5\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging_1 * e\n> 06_s.ing|e_chs..‘ . 49 22\nNAUS L 50 todo_list = TodoList.new\nL o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nv recipes - 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nfepec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\n(e, v 07_single_class_design > spec > @ todo_list_spec.rb\n5108 idebigoingl : require \"todo_list\"\nX 09_mun‘|_closs... ‘ 3 RSpec.describe TodoList do\nZHIO TUN clove. RS 4 context “given no tasks\"-do -\n5 it \"has an empty list\" d\n6 |\n7 end\n8 end\n> TIMELINE\nmain® 00 ne, ( Spaces:2 UTF-8 LF Ruby 3 Spe Q\n"
  },
  {
    "seconds": 334,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 e\n> 02_testing_bites * “ xuby\nil > 03_single_met.. * &5\n2 a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_chs..‘ o 9 #2\nNAUS L 50 todo_list = TodoList.new\nL o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nVv recipes . 54 # 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec * 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, \"Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nfepec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\n(e, v 07_single_class_design > spec > @ todo_list_spec.rb\n5108 idebigoingl : require \"todo_list\"\nX 09_mun‘|_closs... ‘ 3 RSpec.describe TodoList do\nZHIO TUN clove. RS 4 context “given no tasks\"-do |\n5 it \"has an empty list\" dq\n6 end\n7 end\n> TIMELINE\nmain*® 0 0 ns ol 30 Spaces:2 UTF-8 LF Ruby s Spe' )\n"
  },
  {
    "seconds": 335,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites a Tuby\nBl > 03_single_met.. © s &1\n3 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.|ngle_chs... . 9 #2\npAOZs0oe-Cles= 0 50 todo_list = TodoList.new\nN = 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53\nVv recipes b 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec U @& todo_list_spec.b U ® o\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS e ‘; require \"“todo_list\"\nPR o 3  RSpec.describe TodoList do\nZHIO_UNE cloee. 4 context “given no tasks\" do T\n5 it “has an empty list” dq |\n6 end\n7 end\n8 end\n> TIMELINE\nmain® 0AC nS5 Col30 Spaces:2 UTF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 336,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites a Tuby\nBl > 03_single_met.. © s &1\n3 46 todo_list = TodoList.new\n> 04_single_met... *\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ingle_chs... - ® 02 1\npAOZs0oe-Cles= 0 50 todo_list = TodoList.new\nN = 51 todo_list.add(\"Wash the car\") ‘\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] =\n@ todo_listrb U 53 |\nv recipes © 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec U @& todo_list_spec.b U ® o\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS e ‘; require “todo_list\"\nPR o 3  RSpec.describe TodoList do\nZHIO_UNE cloee. 4 context “given no tasks\" do =\n5 it \"has an empty list\" do\n6\n7 end\n8 end\n9 end\n> TIMELINE\nmain® 0AC 7 Spaces:2 UTF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 337,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U W @RO - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites a Tuby\nBl > 03_single_met.. © s &1\nS Od TR merits 46 todo_list = TodoList .'neu\n47  todo_list.list # => I\n> 05_debugging 1 * 48\n> 06_s.|ngle_chs... . 9 #2\npAOZs0oe-Cles= 0 50 todo_list = TodoList.new ‘\nN = 51 todo_list.add(\"Wash the car\") |\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] i'\n@ todo_listrb U 53 [}\nv recipes b 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n& todo_list_sp... U 60 # a4\ne Y @ todo_list_spec.b U o\nGemfile V]\nOemiledock. U 07_single_class, c.--,:,n spec ,:mu_h».x,-,p--:m\nS e ‘; require “todo_list\nPR o 3  RSpec.describe TodoList do\nZHIO_UNE cloee. 4 context “given no tasks\" do =\n5 it \"has an empty list\" do\n6\n7 end\n8 end\n9 end\n> TIMELINE\nmain* 0AC n 47, Col 22 (1 selected) Spaces: 2 L] F  Markdown Spe! .\n"
  },
  {
    "seconds": 338,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U x @ todo_list.rb U mw@BEO - zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites o Tuby\nBl > 03_single_met.. © 4 &1\nS Od TR merits 46 tgdo_list = TodoList.new\nS (o :; todo_list.list # => []\n> 06_s.ingle_chs... . 9 #2\npAOZs0oe-Cles= 0 50 todo_list = TodoList.new L\nN = 51 todo_list.add(\"Wash the car\") |\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] |\n@ todo_listrb U 53\nv recipes b 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n& todo_list_sp... U 60 # a4\ne U g todolistspecrbu o X\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS e ‘; require “todo_list\"\nPR o 3  RSpec.describe TodoList do\nZHIO_UNE cloee. 4 context “given no tasks\" do —\n5 it \"has an empty list\" do\n6\n7 end\n8 end\n9 end\n> TIMELINE\nmain® 0 ( néd ol 47 selected! Spaces: 2 TF-8 F Markdown Spe! .\n"
  },
  {
    "seconds": 339,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U % @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 .\n> 02_testing_bites o Tuby\nBl > 03_single_met.. © s #1\nS Od TR merits a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.|ngle_chs... . 9 #2\npAOZs0oe-Cles= 0 50 todo_list = TodoList.new\nN = 51 todo_list.add(\"Wash the car\") [\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes b 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® wm--\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS e ‘; require “todo_list\"\nPR o 3  RSpec.describe TodoList do\nZHIO_UNE cloee. 4 context “given no tasks\" do\n5 it \"has an empty list\" do 7l\n6 todo_list = TodoList.new\n7 todo_list.listf# => (]|\n8 end\n9 end\n10 end\n> TIMELINE\n—= 0 A C h7.Col 23 Spaces: 2 F-8 LF Ruby & Spe .\n"
  },
  {
    "seconds": 340,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. * “® £\nSO 46  todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mgte_clcs..‘ . 9 #2\nDACEMON-CISt RS 50 todo_list = TodoList.new\nA = 51 todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes > 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n108 e ‘; require \"todo_list\"\nQI C 3  RSpec.describe TodoList do\n2410 U claes. 4 context “given no tasks\" do\n5 it \"has an empty list” do ]\n6 todo_list = TodoList.new\n7 todo_lidt.1ist # => []]\n8 end\n9 end\n10 end\nB > TIMELINE\nmain® 0 ( n7 Col29 Spaces:2 UTF-8 LF Ruby s Spe )\n"
  },
  {
    "seconds": 341,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43\n> 02_testing_bites * a4 \" ruby\nBl > 03_single_met.. * “® £\nSO 46 todo_list = TodoList.new\no7 > 47 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mgte_clcs..‘ . 9 #2\nDACEMON-CISt RS 50 todo_list = TodoList.new\nA = 51 todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes > 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\n::'v:::lock : 07_single_class_design > spec > @ todo_list_spec.rb\n108 e ‘; require \"todo_list\"\nQI C 3  RSpec.describe TodoList do\n2410 U claes. 4 context “given no tasks\" do\n5 it \"has an empty list” do ]\n6 todo_list = TodoList.new\n7 exftodo_list.list # => []\n8 end\n9 end\n10 end\nB > TIMELINE\nmain® 0AC n7,Col9 Spaces:2 UTF-8 LF Ruby s Spe! 0\n"
  },
  {
    "seconds": 342,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as T 07_single_class_design - D\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites * 44 Tuby\nBl > 03_single_met.. * “® £\n>.04_single met.. ® 46  todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mgte_clcs..‘ = 49 82\nVLS R e 50  todo_list = TodoList.new\nA = 51 todo_list.add(\"Wash the car\") B\n@ pione. book S 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\nGemfile v\nGemflelock U 07_single_class, (ﬁl'u:):v spec ,:uac_m, spec.rb\n5106 dabiging & ‘; require “todo_list\nA0l clse e 3  RSpec.describe TodoList do\nZHIO-TIUNC clase__ B 4 context “given no tasks\" do\n5 it \"has an empty list” do ]\n6 todo_list = TodoList.new\n7 expect(todo_list.list # => []|\n8 end\n9 end\n10 end\nB > TIMELINE\nmain® 0AC 2 6 Spaces:2 UTF-8 LF Ruby {3 Spe 2\n"
  },
  {
    "seconds": 343,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. * “® £\nSO 46 todo_list = TodoList.new\n106 denigoma 11 :; todo_list.list # => []\n> 06_s.mgte_clcs..‘ . 9 #2\nDACEMON-CISt RS 50 todo_list = TodoList.new\nA = 51 todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes > 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n108 e ‘; require \"todo_list\"\nQI C 3  RSpec.describe TodoList do\n2410 U claes. 4 context “given no tasks\" do\n5 it \"has an empty list” do ]\n6 todo_list = TodoList.new\n7 expect(todo_list.1ist|# =5 []\n8 end\n9 end\n10 end\nB > TIMELINE\nmain® 0 ( 28 (8 selected Spaces: 2 UTF-8 LF Ruby s Spe )\n"
  },
  {
    "seconds": 344,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. * “® £\nSO 46 todo_list = TodoList.new\n106 denigoma 11 :; todo_list.list # => []\n> 06_s.mgte_clcs..‘ . 9 #2\nDACEMON-CISt RS 50 todo_list = TodoList.new\nA = 51 todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes > 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n108 e ‘; require \"todo_list\"\nQI C 3  RSpec.describe TodoList do\n2410 U claes. 4 context “given no tasks\" do\n5 it \"has an empty list” do E\n6 todo_list = TodoList.new\n7 expect(todo_list.1ist).to eq |\n8 end\n9 end\n10 end\nB > TIMELINE\nmain® 0 ( € Spaces: 2 UTF-8 LF Ruby s Spe )\n"
  },
  {
    "seconds": 345,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 N\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. © &% el\nA 46 todo_list = TodoList.new\n> 04_single_met...\n47 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ L 9 #2\nN OEMOe-Cls R ® 50 todo_list = TodoList.new\nN o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nY7 eCDes o 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\nGemfile v\nGemfile.lock v 07_single_class, (ﬁl\",.(I]!Y spec ‘ todo_list_spec.rb\n10 e ‘; require “todo_list\nPRI C 3  RSpec.describe TodoList do\n2410 U claes_ i 4 context “given no tasks\" do\n5 it \"has an empty list” do B\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\nB > TIMELINE\nmain® [N n8 Col8 Spaces:2 UTF-8 LF Ruby & Spe 0\n"
  },
  {
    "seconds": 346,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 N\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. © &% el\nA 46 todo_list = TodoList.new\n> 04_single_met...\n47 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ L 9 #2\nN OEMOe-Cls R ® 50 todo_list = TodoList.new\nN o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nY7 eCDes o 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\nGemfile v\nGemfile.lock v 07_single_class, (ﬁl\",.(I]!Y spec ‘ todo_list_spec.rb\n10 e ‘; require “todo_list\nPRI C 3  RSpec.describe TodoList do\n2410 U claes_ i 4 context “given no tasks\" do I\n5 it \"has an empty list” do\n6 todo_list = TodoList.new v\n7 expect(todo_list.list).to eq []\n8 Lnd\n9 end\n10 end\nB > TIMELINE\nmain® [N n8 Col8 Spaces:2 UTF-8 LF Ruby & Spe 0\n"
  },
  {
    "seconds": 347,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 N\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. © &% el\n04 Tata i et 46 todo_list = TodoList.new\n47 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ L 9 #2\nN OEMOe-Cls R ® 50 todo_list = TodoList.new\nN o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes > 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec U @ todo_list_spec.b U ® o\nGemfile v\nGemfile.lock v 07_single_class, (ﬁl\",.(I]!Y spec ‘ todo_list_spec.rb\n10 e ‘; require “todo_list\nPRI C 3  RSpec.describe TodoList do =\n2410 U claes_ i 4 context “given no tasks\" do\n5 )h “has an empty list” do\n6 :[odu_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10  end\nB > TIMELINE\nmain® 0AC r 6 Spaces:2 UTF-8 LF Ruby s Spe' L\n"
  },
  {
    "seconds": 348,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 N\n> 02_testing_bites * a4 Tuby\nBl > 03_single_met.. © &% el\nA 46 todo_list = TodoList.new\n> 04_single_met...\n47 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ L 9 #2\nN OEMOe-Cls R ® 50 todo_list = TodoList.new\nN o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes > 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 ¢4\n-spec YU @ todo_list_spec.rb U X @ am -\nGemfile v\nGemfile.lock v 07_single_class, (ﬁl\",.(I]!Y spec ‘ todo_list_spec.rb\n10 e ‘; require “todo_list\nPRI C 3  RSpec.describe TodoList do -\n2410 U claes_ i 4 context “given no tasks\" do\n5 Hﬂt “has an empty list® do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\nB > TIMELINE\nmain® 0AC r 6 Spaces:2 UTF-8 LF Ruby s Spe' L\n"
  },
  {
    "seconds": 349,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh he +- M8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design - l\n> 00_scratch . 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43 L\n> 02_testing_bites * a4 Tuby\n> 03_single_met... &% el\nSO 46 todo_list = TodoList.new\n47 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_clcs..‘ L 9 #2\nN OEMOe-Cls R ® 50 todo_list = TodoList.new\nN o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nVv recipes i 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\nrspec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class, (ﬁl\",.(I]!Y spec ‘ todo_list_spec.rb\n10 e ; require “todo_list I\nPRI C 3  RSpec.describe TodoList do —\n2410 U claes_ i 4 context “given no tasks\" do\n5 xit “\"has an empty list” do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\nB > TIMELINE\nmain® 0AO0 s Spe .\n"
  },
  {
    "seconds": 350,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - rl\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites s Tuby\nil > 03_single_met.. © &1 e\nN 46 todo_list = TodoList.new\n3106 denigoma il :; todo_list.list # => []\n> 06_s.|ngle_clcs... . 9 #2\nM0ZN0ge_cles=8 8 50 todo_list = TodoList.new\nA . 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes L 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\n-rspec Y @ todo_list_spec.ib U >\nGemfile V]\nGemfile.lock v 07_single_class, m--,:;:v spec ‘ todo_list_spec.rb\nS ‘; require “todo_list\nRE L S 3  RSpec.describe TodoList do -\n2A10- UL claes. /5N 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10  end\n11\n> TIMELINE\nmain® (Y s Spe 0\n"
  },
  {
    "seconds": 351,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design = rspecl\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites s Tuby\nil > 03_single_met.. © &1 e\n3 46 todo_list = TodoList.new\n> 04_single_met... *\n3106 denigoma il :; todo_list.list # => []\n> 06_s.|ngle_clcs... . 9 #2\nM0ZN0ge_cles=8 8 50 todo_list = TodoList.new\nA . 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes L 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\n-rspec Y @ todo_list_spec.ib U >\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS ‘; require “todo_list\"\nRE L S 3  RSpec.describe TodoList do -\n2A10- UL claes. /5N 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10  end\n11\n> TIMELINE\nmain® (Y s Spe 0\n"
  },
  {
    "seconds": 352,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design = rspecl\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites AR AN AEIDY,\nil > 03_single_met.. © &1 e\nN 46 todo_list = TodoList.new\n3106 denigoma il :; todo_list.list # => []\n> 06_s.ingle_clcs... . 9 #2\nM0ZN0ge_cles=8 8 50 todo_list = TodoList.new 11\nA . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes L 54 #3\n¥ phone_desig... U \\55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\n-rspec Y @ todo_list_spec.ib U >\nGemfile V]\nGemfile.lock v 07_single_class, m--,:;:v spec ‘ todo_list_spec.rb\nS ‘; require “todo_list\nRE L S 3  RSpec.describe TodoList do -\n2A10- UL claes. /5N 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10  end\n11\n> TIMELINE\nmain® (Y s Spe 0\n"
  },
  {
    "seconds": 353,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - rspecl\n> 00_scratch ° 42 _Make a list of epgmples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites s Tuby\nil > 03_single_met.. © &1 e\n3 46 todo_list = TodoList.new\n> 04_single_met... *\n3106 denigoma il :; todo_list.list # => []\n> 06_s.ingle_clcs... . 9 #2\nM0ZN0ge_cles=8 8 50 todo_list = TodoList.new 11\nA . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\n-rspec Y @ todo_list_spec.ib U >\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS ‘; require “todo_list\"\nRE L S 3  RSpec.describe TodoList do -\n2A10- UL claes. /5N 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\n> TIMELINE\nmain® (Y s Spe 0\n"
  },
  {
    "seconds": 354,
    "text": "[ N ] ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby X +- D8 -\nv RSPEC_SETUP 07_single_class_design > recipes {';’J tasks_design.md > (=) # Tasks Class Design Recipe > ) ## 3. Create Examples as Tt 07_single_class_design -+ rspec\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._ 1\n> 01_intro_and_git a3 .\n> 02_testing_bites s Tuby\nil > 03_single_met.. © &1 e\n3 46 todo_list = TodoList.new\n> 04_single_met... *\n3106 denigoma il :; todo_list.list # => []\n> 06_s.ingle_clcs... . 9 #2\nM0ZN0ge_cles=8 8 50 todo_list = TodoList.new\nA . 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes L 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 ¢4\n-rspec Y @ todo_list_spec.ib U >\nGemfile V]\nGemfile.lock v 07_single_class, m--,:;:v spec ‘ todo_list_spec.rb\nS ‘; require “todo_list\nRE L S 3  RSpec.describe TodoList do -\n2A10- UL claes. /5N 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\n> TIMELINE\nmain® (Y s Spe 0\n"
  },
  {
    "seconds": 355,
    "text": "[ N ] 1odo_list.rb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U X ©wa-- zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch @ 1 |\n> 01_intro_and_git An error occurred while loading ./spec/todo_list_spec.rb.\nSEmaieRian < I Failure/Exror:\n‘fs ) RSpec.describe TodoList do\n> 03_single_met.. ® context “given no tasks® do\n> 04_single_met... * xit \"has an empty list* do\n> 05_debugging 1 * todo_list = TodoList.new\n> 06_single_clas... ® en:xoect(todo_lxst.l1st).to eq []\nv 07Z_single_clas... * end\nv lib B end\n@ phone_book.... U\n@ todo_listrb U NameErrox: ‘\n: uninitialized constant TodoList\nv recipes . P : : : .\n# ./spec/todo_list_spec.rb:3:in ‘<top (required)>\n¥ phone_desig... U\n¥ tasks_design... U\nv spec . Finished in 0.00016 seconds (files took 0.16908 seconds to load)\n@ phone_book... U 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design - []\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile V] .\nGemfile.lock v 07, ;m;l- clmw;(.n-u:;: d-,ur;,i t, todo_list_spec.rb\nSt : require “todo_lis\n> i\n00 arl e 3 RSpec.describe TodoList do ==\nZRIO-IUNL cleee_C/iR 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\n> TIMELINE\n"
  },
  {
    "seconds": 356,
    "text": "eoce todo_list.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ @ am - zsh 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch . 1 class |\n> 01_intro_and_git An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_'”'i_ tae Failure/Exror:\n.o b RSpec.describe TodoList do\n> 03_single_met... ® context \"given no tasks® do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® en;xpect(todo_lxst.llst) .to eq []\nv 0Z_single_clas... * end\nv b - end\n@ phone_book.... U\n@ todo_listrb U NameErroxr:\n: uninitialized constant TodoList\nvV recipes . - TR B\n# ./spec/todo_list_spec.rb:3:in '<top (required)>\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took 0.16908 seconds to load)\n@ phone_book... U 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design ~ []\n@ todo_list_sp... U\noone YU @ todo_list_spec.ib U\nGemfile v .\nOemflelock U 07 ;m,.- c[d-,z(..-u.i,;y d-,u«;; t, todo_list_spec.rb\nSt : require “todo_lis\n> i\ne 3 RSpec.describe TodoList do -\n2 L 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\n> TIMELINE\nmain® 0AC 1 7 Spaces:2 UTF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 357,
    "text": "eoce todo_list.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch . 1 class Todd\n> 01_intro_and_git An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_'”'i_ tae Failure/Exror:\n.o b RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® en;xpect(todo_lxst.llst) .to eq []\nv 0Z_single_clas... * end\nv b - end\n@ phone_book.... U\n@ todo_listrb U NameErroxr:\n: uninitialized constant TodoList\nvV recipes . - TR B\n# ./spec/todo_list_spec.rb:3:in '<top (required)>\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took 0.16908 seconds to load)\n@ phone_book... U 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design ~ []\n@ todo_list_sp... U\noone YU @ todo_list_spec.ib U\nGemfile v .\nGemfilelock U 07, ;H()I' C[,J'v:»’.(.l\";:]: d-,u«;; t, todo_list_spec.rb\n> 08_debugging... * 2 XSqUiLe odo_11s\n> i\ne 3 RSpec.describe TodoList do -\n2 L 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\n> TIMELINE\nmain® 0AC 1,Col11 Spaces:2 UTF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 358,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tam - zsh 8 -\n~ RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList L3\n> 01_intro_and_git 2 an‘ An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_testing_bites ® 3 Failure/Exror:\n.o b RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® I en;xpect(todo_lxst.llst) .to eq []\nv 0Z_single_clas... * end\nv lib . end\n@ phone_book.... U\n@ todo_listrb U NameError:\n: uninitialized constant TodoList\nvV recipes . - TR B\n# ./spec/todo_list_spec.rb:3:in '<top (required)>\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took 0.16908 seconds to load)\n@ phone_book... U 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design ~ []\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\nGemfile v .\nGemfilelock U 07, ;H()l' C[,J'v:»’.(.l\";.(liv d-,u«;; t, todo_list_spec.rb\nD 0a o : require “todo_lis\n> i\ne 3 RSpec.describe TodoList do -\n2 L 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\n> TIMELINE\nmain® 0 [ L. )l 4 Spaces: 2 UTF-8 LF Ruby s Spe’ )\n"
  },
  {
    "seconds": 359,
    "text": "[ XN ] ruby — rspec_setup 08\n@ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U > ruby X +-ma -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList | ¥\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_'”'i_ tae 3 Failure/Exror:\n.o b RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® expect(todo_list.list).to eq []\ne X end\nv 0Z_single_clas... * end\nv lib B end\n@ phone_book.... U\n@ todo_listrb U NameError:\n: uninitialized constant TodoList\nvV recipes . - TR B\n# ./spec/todo_list_spec.rb:3:in ‘<top (required)>\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took 0.16908 seconds to load)\n@ phone_book... U 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper... U 07_single_class_design - rspec\n@ todo_list_sp... U I\n-rspec Y @ todo_list_spec.ib U\nGemfile v .\nGemfilelock U 07, ;H()l' C[,J'v:»’.(.l\";.(liv d-,u«;; t, todo_list_spec.rb\nSt : require “todo_lis\n> i\nOO 3 RSpec.describe TodoList do -\n2 L 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10 end\n11\n> TIMELINE\nmain® 0A0 s Spe Q)\n"
  },
  {
    "seconds": 360,
    "text": "[ XN ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +-ma -\n~ RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodolList |\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_'u'i_ tae 3 Failure/Exror:\no g b RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... expect(todo_list.list).to eq []\nFuEn e end\nv 0Z_single_clas... * end\nv lib s end\n@ phone_book.... U\n@ todo_listrs U NameError:\n: uninitialized constant TodoList\nv recipes . - T -\n# ./spec/todo_list_spec.rb:3:in '<top (required)>\n¥ phone_desig... U\n¥ tasks_design... U\nv spec ° Finished in 0.00016 seconds (files took ©.16908 seconds to load)\n@ phiona’ bock iUl 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design - rspec\n@ todo_list_sp... U sereiuiame ol\noone Y @ todo_list_spec.ib U . _\nGemfile v Pending: (Failures listed here are expected and do not affect your\nGemfile.dock v 07. ;nq.-,cu-.:cl--,q: d-,u;{; t‘ todo_list_spec.rb suite's status)\nrequire “todo_list\"\n> 08_debugging... * 2 1) TodoList given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit\n3  RSpec.describe TodolList —_ 3\n> 10_multi_class... * P n do # ./spec/todo_list_spec.rb:5\n= = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n8 end\n9 end 07_single_class_design -*I\n10 end\n11\n> TIMELINE\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 361,
    "text": "L ICN 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList |\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_lesli_ TRate 3 Failure/Exror:\nA = ng.. RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging 1 * todo_list = TodoList.new\n> 06_single_clas... ® expect(todo_list.list).to eq []\nRN ERTE end\nv 0Z_single_clas... * end\nv lib ° end\n@ phone_book.... U\n@ todo_listrb U NameError:\ng uninitialized constant TodoList\nVv reci .\ne h # ./spec/todo_list_spec.rb:3:in '<top (required)>’\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took ©.16908 seconds to load)\n8 phicos’ back Rt 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design » rspec\n@ todo_list_sp... U i wmmmmnl\nopas YU @ todo_list_spec.ib U ' _\nGemfile v Pending: (Failures listed here are expected and do not affect your\n(o e, v O,’_;v|(; .;,:;-,-,lu;-~..(l;:°d;u«:1 t, todo_list_spec.rb suite's status)\nrequir _lis\n> 08_debugging... * 2 1) TodoList given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit\n3  RSpec.describe TodolList —_ R\n> 10_multi_class... * P 20 b # ./spec/todo_list_spec.rb:5\n= = 4 context “given no tasks\" do I\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.60685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n° ¢nd 07_single_class_desi [ ]\n-\n9 end _single_class_design\n10  end\n11\n> TIMELINE\nmain® 0AQ s Spe' '\n"
  },
  {
    "seconds": 362,
    "text": "eoe0 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U 2sh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_lesli_ TRate 3 Failure/Exror:\nA = ng.. RSpec.describe TodoList do\n> 03_single_met... ® context \"given no tasks® do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® expect(todo_list.list).to eq []\no X end\nv 0Z_single_clas... * end\nv lib ° end\n@ phone_book.... U\n@ todo_listrb U NameErroxr:\nS, g uninitialized constant TodoList\nP! # ./spec/todo_list_spec.rb:3:in ‘<top (required)>’\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took ©.16908 seconds to load)\n8 phicos’ back Rt 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design » rspec\n@ todo_list_sp... U i wmmmmnl\nopas YU @ todo_list_spec.ib U ' _\nGemfile v Pending: (Failures listed here are expected and do not affect your\nGemfile.lock v 07 .‘;\"q l:;,l t‘;th“ouflri t, todo_list_spec.rb suite's status)\nrequir _lis\n> 08_debugging... * 2 1) TodoList given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit\n3  RSpec.describe TodolList —_ R\n> 10_multi_class.. * P o do # ./spec/todo_list_spec.rb:5\n= = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00‘85 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n: ond 07_single_class_desi [ ]\n-\n9 end _single_class_design\n10  end\n11\n> TIMELINE\nmain® 0AQ s Spe' '\n"
  },
  {
    "seconds": 363,
    "text": "eoe0 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U 2sh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_lesli_ TRate 3 Failure/Exror:\nA = ng.. RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® expect(todo_list.list).to eq []\nRN ERTE end\nv 0Z_single_clas... * end\nVv lib ° end\n@ phone_book.... U\n@ todo_listrb U NameError:\nS, g uninitialized constant TodoList\nP! # ./spec/todo_list_spec.rb:3:in ‘<top (required)>’\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took ©.16908 seconds to load)\n8 phicos’ back Rt 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design » rspec\n@ todo_list_sp... U i wmmmmnl\nopas YU @ todo_list_spec.ib U ' _\nGemfile v Pending: (Failures listed here are expected and do not affect your\n(o e, v O,’_;v|(; .;,:;-,-,lu;-~..(l;:°d;u«:1 t, todo_list_spec.rb suite's status)\nrequir _lis\n> 08_debugging... * 2 1) TodoList given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped wilth xit\n3  RSpec.describe TodolList —_ &\n> 10_multi_class... * P 20 b # ./spec/todo_list_spec.rb:5\n= = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n: ond 07_single_class_desi [ ]\n-\n9 end _single_class_design\n10  end\n11\n> TIMELINE\nmain® 0AQ s Spe' '\n"
  },
  {
    "seconds": 364,
    "text": "eoe0 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U 2sh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n> 02_testing_bites 3 R A o ;\nA = - RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® expect(todo_list.list).to eq []\nRN ERTE end\nv 0Z_single_clas... * end\nVv lib ° end\n@ phone_book.... U\n@ todo_listrb U NameError:\net g uninitialized constant TodoList\no] # ./spec/todo_list_spec.rb:3:in ‘<top (required)>’\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took ©.16908 seconds to load)\n8 phicos’ back Rt 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design » rspec\n@ todo_list_sp... U DY\nopas YU @ todo_list_spec.ib U ' _\nGemfile v Pending: (Failures listed here are expected and do not affect your\nGemfileJock v 07_single_class_design > spec > @ todo_list_spec.rb suite's status)\n) 1 require “todo_list\"\n> 08_debugging... * 2 1) TodoList given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with Kif\n3  RSpec.describe TodolList —_ &\n> 10_multi_class... * P 20 b # ./spec/todo_list_spec.rb:5\n= = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n° ¢nd 07_single_class_desi [ ]\n-\n9 end _single_class_design\n10  end\n11\n> TIMELINE\nmain® 0AQ s Spe' '\n"
  },
  {
    "seconds": 365,
    "text": "eoe0 2sh — rspec_setup 08\n@ EXPLORER -+ ¥ tasks_design.md U @ todo_listrb U zsh X +- M08 -\n~ RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n> 02_testing_bites 3 R A o ;\nA = - RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list\" do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... ® expect(todo_list.list).to eq []\nRN ERTE end\nv 0Z_single_clas... * end\nv lib ° end\n@ phone_book.... U\n@ todo_listrb U NameError:\net g uninitialized constant TodoList\no] # ./spec/todo_list_spec.rb:3:in ‘<top (required)>’\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B Finished in 0.00016 seconds (files took ©.16908 seconds to load)\n8 phicos’ back Rt 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design » rspec\n@ todo_list_sp... U i wmmmmnl\nopas YU @ todo_list_spec.ib U ' _\nGemfile v Pending: (Failures listed here are expected and do not affect your\nGemfileJock v 07_single_class_design > spec > @ todo_list_spec.rb suite's status)\n) 1 require “todo_list\"\n> 08_debugging... * 2 1) TodoList given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit J\n3  RSpec.describe TodolList —_ &\n> 10_multi_class... * P 20 b # ./spec/todo_list_spec.rb:5\n= = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, O failures, 1 pending\n8 end . .\n9 end 07_single_class_design » ||\n10  end\n11\n> TIMELINE\nmain® 0AQ s Spe' '\n"
  },
  {
    "seconds": 366,
    "text": "o0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_c I.V.f.j.(bgn lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList jul\n> 01_intro_and_git 2 end An error occurred while loading ./spec/todo_list_spec.rb.\n5 02_'”'i_ e 3 Failure/Exror:\n& = ng.. RSpec.describe TodoList do\n> 03_single_met... context “given no tasks” do\n> 04_single_met... * xit \"has an empty list” do\n> 05_debugging_1 * todo_list = TodoList.new\n> 06_single_clas... expect(todo_list.list).to eq []\ne end\nv 0Z_single_clas... * end\nv lib ° end\n@ phone_book.... U\n@ todo_listrb U NameExrox:\ne < uninitialized constant TodoList\nbt # ./spec/todo_list_spec.rb:3:in '<top (required)>*\n¥ phone_desig... U\n¥ tasks_design... U\nv spec . Finished in 0.00016 seconds (files took ©.16908 seconds to load)\n@ phone’ ookt Ul 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 07_single_class_design - rspec\n@ todo_list_sp... U wnmmmment\no - @ todo_list_spec.rb U i X\nGemfile v Pending: (Failures listed here are expected and do not affect your\nPR v o«_;y|(; .-__:;-J-,i_c;--.:;:“;u;: t, todo_list_spec.rb suite's status)\n. requir _lis\n> 08_debugging... * 2 1) TodoList given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit\n3  RSpec.describe TodolList —_ .\n> 10_multi_class... * P e 2 # ./spec/todo_list_spec.rb:5\n= = 4 context “given no tasks\" do\n5 xit “\"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n2 end 07_single_class_desi [ ]\n-\n9 ond _single_class_design\n10  end\n11\n> TIMELINE\nmain® 0AC 3 Spe .\n"
  },
  {
    "seconds": 367,
    "text": "o0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U x @ todo_listrb U m - zsh 8 -\nv RSPEC_SETUP 07_sing r~,c|.1r,r.,$2, gn > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design = rspec\n> 00_scratch . 42 _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 A:nxtlano;Eoccurmd while loading ./spec/todo_list_spec.rb.\n: - 44 *‘ruby ailure/Exrox:\no8 i g;‘l“\"r“m“ i 45 #1 RSpec.describe TodoList do\n_single_met... ® o =\n; 46 todo_list = TodoList.new CONERXLE, ELUeTIINONLASKE} (SO\n> 04_single_met... * 14 1 xit \"has an empty list\" do\n> 05_debugging_1 * :; SodolliseRtistivcandil todo_list = TodoList.new\ni expect(todo_list.list).to eq []\n>\n:6-’_\"'9\"-\"” “ 9 #2 end\n.\nVOEsnge cles 50  todo_list = TodoList.new _ end\nv b . 51 todo_list.add(\"Wash the car\") end\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] ]\n@ todo_listrb U 53 NameErroxr: ‘\no 3 uninitialized constant TodoList\ne T 54 #3 # ./spec/todo_list_spec.rb:3:in ‘<top (required)>'\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec s 57  todo_list.add(\"Wash the dog\") Finished in 0.060016 seconds (files took ©.16908 seconds to load)\n@ phone’ ookt Ul 58 todo_list.list # => [“Wash the car”, “Wash the dog\"] 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 59 07_single_class_design » rspec\n@ todo_list_sp... U 60 #4 i\nspec - @ todo_list_spec.rb U i i X\nGemfile v Pending: (Failures listed here are expected and do not affect your\n(s o, v OZ_;v\\c; u_cel;-,-;_c;-u.(l;:“;u;ci tf todo_list_spec.rb suite's status)\n. requir _lis\n> 08_debugging... * 2 1) Todolist given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit\n3  RSpec.describe TodolList —_ .\n> 10_multi_class... * P ‘c,, . d? # ./spec/todo_list_spec.rb:5\n4 context “given no tasks\" do\n5 xit “\"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n2 o 07_single_class_desi I\n-\n9 ond _single_class_design\n10  end\n11\n> TIMELINE\nmain® YN n 46, Col 1 (47 selected) Spaces: 2 F-8 Markdown 3 Spel B\n"
  },
  {
    "seconds": 368,
    "text": "o0ce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U w@O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design = rspec\n> 00_scratch ° 42 _Make o list of eramples of how the class will behave in different situations._\n> 01_intro_and_git a3 An tlano; occurred while loading ./spec/todo_list_spec.Ib.\nSl 44 ' ruby Failure/Exror:\no8 i g;‘l“\"r“m“ i 45 #1 RSpec.describe TodoList do\n_single_met... ® s o =\n1 46 fodo_list = TodoList.new CONERXLE, ELUeTIINONLASKE} (SO\n> 04_single_met... * \" fet.11st xit \"has an empty list\" do\n> 05_debugging_1 * :; todo_listildstigim>al) todo_list = TodoList.new\ni expect(todo_list.list).to eq []\n>\n:6-’_\"'9\"-\"” “ 9 #2 end\n.\nVOEsnge cles 50  todo_list = TodoList.new L end\nv b . 51 todo_list.add(\"Wash the car\") end\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] ]\n@ todo_listrb U 53 NameErroxr: ‘\nN 3 uninitialized constant TodoList\ne T 54 #3 # ./spec/todo_list_spec.rb:3:in ‘<top (required)>'\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec s 57  todo_list.add(\"Wash the dog\") Finished in 0.060016 seconds (files took ©.16908 seconds to load)\n@ phona book TN 11 58 todo_list.list # => [“Wash the car®, “Wash the dog\"] 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 59 07_single_class_design » rspec\n@ todo_list_sp... U 60 #4 i\nrspec YU @ todo_list_spec.ib U\ni Pending: (Failures listed here are expected and do not affect your\nGemfile v o i (Fail 1 11\ne tock i OZ_;v\\c; l-_cei;-,-,i_c;-ufltw;u;; tf todo_list_spec.rb suite's status) ,\n. requir _1lis\n> 08_debugging... * 2 1) Todolist given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit\n3  RSpec.describe TodolList —_ .\n> 10_multi_class... * P ‘c,, e d? # ./spec/todo_list_spec.rb:5\n4 context “given no tasks\" do\n5 xit “\"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n2 end 07_single_class_desi 0\n-\n9 end _single_class_design\n10  end\n11\n> TIMELINE\nmain® ( [ n 46, Cc 47 selected’ paces: 2 F-8 Markdown Spel S\n"
  },
  {
    "seconds": 369,
    "text": "o0ce tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U w@O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5 # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design = rspec\n> 00_scratch . 42  _Make o list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 An error occurred while loading ./spec/todo_list_spec.Ib.\nL a4 \" ruby Failure/Exror:\no8 i g;‘l“\"r“m“ i 45 #1 RSpec.describe TodoList do\n_single_met... ® > o =\no 46 fodo_list = TodoList.new CONERXLE, ELUeTIINONLASKE} (SO\n> 04_single_met... * i = iet.11st ) xit \"has an empty list” do\n> 05_debugging_1 * 47 ‘todo_list.list # =>[] todo_list = TodoList.new\ni 48 expect(todo_list.list).to eq []\n> &\n:6-’_\"'9\"-\"” “ 9 #2 end\n.\nVOEsnge cles 50  todo_list = TodoList.new _ end\nv b . 51  todo_list.add(\"Wash the car\") end\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"] ]\n@ todo_listrb U 53 NameErroxr: ‘\nVe 3 uninitialized constant TodoList\ne 54 #3 # ./spec/todo_list_spec.rb:3:in ‘<top (required)>'\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec s 57  todo_list.add(\"Wash the dog\") Finished in 0.060016 seconds (files took ©.16908 seconds to load)\n@ phone’ ookt Ul 58 todo_list.list # => [“Wash the car”, “Wash the dog\"] 0 examples, © failures, 1 error occurred outside of examples\n@ spec_heiper.... U 59 07_single_class_design » rspec\n@ todo_list_sp... U 60 #4 i\nspec - @ todo_list_spec.rb U i i X\nGemfile v Pending: (Failures listed here are expected and do not affect your\ne tock i oz_;y\\«; r;ceI;:ls’._::u.(I;:oa;u;cist? todo_list_spec.rb suite's status) ,\n> 08_debugging... * 2 - 1) Todolist given no tasks has an empty list\n> 09_multi_class... * # Temporarily skipped with xit\n3 RS .d ibe TodoList —_— 5\n> 10_multi_class... * pec \"cf e i d? # ./spec/todo_list_spec.rb:5\n— 4 context “given no tasks\" do\n5 xit “\"has an empty list\" do\n6 todo_list = TodoList.new Finished in 0.00685 seconds (files took 0.14293 seconds to load)\n7 expect(todo_list.list).to eq [] 9 examples, @ failures, 1 pending\n2 end 07_single_class_desi 0\n-\n9 end _single_class_design\n10  end\n11\n> TIMELINE\nmain® ( [ n 46, Cc 47 selected’ paces: 2 F-8 Markdown Spel S\n"
  },
  {
    "seconds": 370,
    "text": "o0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > 3 ## 3. Create Examples as Tc @7_single_class_design = I\n> 00_scratch ° 42 _Make o list of examples of how the class will behave in different situations._\n> 01 intro_and_git a3 4\n> 02_testing_bites ® a4 \"Tuby\nil > 03_single_met.. * a5 w2\nST a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 28\n> 06_s.mg|e_clcs... . 9 #2\nMOEsOe-clet R o 50  todo_list = TodoList.new\no o 51  todo_list.add(\"Wash the car\") [\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n4 todo_listrb U 53\nY4Tecpes - 54 #3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec YU @ todo_list_spec.rb U\nGemfile v i B . - ey I\nGemfile.lock v 07_single_class. u--,:;n spec ‘ todo_list_spec.rb\nD108 oo e : require \"todo_list\nX 09_mu|t.|_clcss... ‘ 3 RSpec.describe TodoList do -\nQNI claes= R 4 context “given no tasks\" do\n5 xit “\"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10  end\n11\n> TIMELINE\n== 0 A C Spe .\n"
  },
  {
    "seconds": 371,
    "text": "[ XN J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > () ## 3. Create Examples as Tt 07_single_class_design - l\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites 44 i ruby\no > 03_single_met... * e\nS or R ot a6 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.mgle_clcs..‘ o 9 #2\nM OZsogle-cles=3'® 50 todo_list = TodoList.new =\nV.o . 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec YU @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class, u.--.:;n spec ‘ todo_list_spec.rb\n(i e : require “todo_list\nX og‘mn_l‘cm'\" ‘ 3 RSpec.describe TodoList do -\nIV claes = 4 context “given_no tasks\" do\n5 xit \"has an J:pty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10  end\n11\n> TIMELINE\nmain® 0A0 Spe .\n"
  },
  {
    "seconds": 372,
    "text": "[ XN J 10d0_Uis1_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - []\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites 44 i ruby\no > 03_single_met... * e\nS a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.mgle_chs..‘ o 9 #2\nM OZsogle-cles=3'® 50 todo_list = TodoList.new\nV.o o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nM -/ @ todo_list_spec.rb U x -\nGemfile u\nGemfile.lock v 07_single_class, u.--.:;n spec ‘ todo_list_spec.rb\n(i e : require “todo_list\nX 09_nw|t.|_closs... ‘ 3 RSpec.describe TodoList do 1\nIV claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new 1 1\n7 expect(todo_list.list).to eq []\n8 end\n9  end\n10  end\n11\n> TIMELINE\nmain® 0A0 EX paces: 2 5 Ruby & Spe 0\n"
  },
  {
    "seconds": 373,
    "text": "eoe 10d0_Uis1_spec.rb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - []\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites 44 i ruby\n> 03_single_met... ® e\nS a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.mgle_chs..‘ o 9 #2\nM OZsogle-cles=3'® 50 todo_list = TodoList.new\nV.o o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\n-rspec Y @& todo_list_spec.b U ® M -\nGemfile u\nGemfile.lock v 07_single_class, u.--.:;n spec ‘ todo_list_spec.rb\n(i e : require “todo_list\nX 09_nw|t.|_closs... ‘ 3 RSpec.describe TodoList do\nIV claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.1list).to eq [] i\n8 end\n9 end\n10\n1 context |\n12 end\n13\n> TIMELINE\n"
  },
  {
    "seconds": 374,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - []\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites 44 i ruby\no > 03_single_met... * e\nS a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.mgle_chs..‘ o 9 #2\nM OZsogle-cles=3'® 50 todo_list = TodoList.new\nV.o o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\n-rspec Y @& todo_list_spec.b U ® M -\nGemfile u\nGemfile.lock v 07_single_class, u.--.:;n spec ‘ todo_list_spec.rb\n(i e : require “todo_list\nX 09_nw|t.|_closs... ‘ 3 RSpec.describe TodoList do\nIV claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.1list).to eq [] i\n8 end\n9 end\n10\n11 context “given twcl\"\n12 end\n13\n> TIMELINE\nmain® (N 21 Spaces: 2 8 Ruby & Spe 0\n"
  },
  {
    "seconds": 375,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - []\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites 44 i ruby\n> 03_single_met... ® e\nS a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.mgle_chs..‘ o 9 #2\nM OZsogle-cles=3'® 50 todo_list = TodoList.new\nV.o o 51 todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 # 4\n-rspec Y @& todo_list_spec.b U ® M -\nGemfile u\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n(i e : require \"todo_list\"\nX 09_nw|t.|_closs... ‘ 3 RSpec.describe TodoList do\nIV claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.1list).to eq [] i\n8 end\n9 end\n10\n11 context \"given two tasksl\"\n12 end\n13\n> TIMELINE\n"
  },
  {
    "seconds": 376,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... s 1\nN od R e a6 todo_list = TodoList.new\no detaokaile 47  todo_list.list # => []\n> 06_single_clas... * =\nR a9 #2\nMOEMoe-cles. L0 50 todo_list = TodoList.new\nv ' 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n(e : require “todo_list\"\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nI claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] [ |\n8 end\n9 end\n10\n11 context “given a tslvi‘\n12 end\n13\n> TIMELINE\nmain® 0OAO nn, . Spaces:2 UTF-8 LF Ruby s Spe! -\n"
  },
  {
    "seconds": 377,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... s 1\nA a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ . 9 #2\nMOEMoe-cles. L0 50 todo_list = TodoList.new\nv ' 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n(e : require “todo_list\"\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nI claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] [ |\n8 end\n9 end\n10\n11 context “given a task” dq\n12 end\n13\n> TIMELINE\nmain® 0AO nn 28 Spaces:2 UTF-8 LF Ruby &3 Spe s\n"
  },
  {
    "seconds": 378,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... s 1\nA a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ . 9 #2\nMOEMoe-cles. L0 50 todo_list = TodoList.new\nv ' 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n(e : require “todo_list\"\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nI claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] - |\n8 end\n9 end\n10\n11 context “given a task” do\n12 |\n13 end\n14  end\n15\n> TIMELINE\nmain® 0AO0 r 6 Spaces:2 UTF-8 LF Ruby s Spe! >\n"
  },
  {
    "seconds": 379,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... s 1\nA a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ . 9 #2\nMOEMoe-cles. L0 50 todo_list = TodoList.new\nv ' 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class. r,'l--,:;n spec ‘ todo_list_spec.rb\n(e : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nI claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] - |\n8 end\n9 end\n10\n11 context “given a task” do\n12 xit\n13 end\n14  end\n15\n> TIMELINE\nmain® oA0 n 12, Col 1 Spaces:2 UTF-8 LF Ruby s Spe’ S\n"
  },
  {
    "seconds": 380,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > () ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... s 1\nA a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_clcs..‘ . 9 #2\nMOEMoe-cles. L0 50 todo_list = TodoList.new\nv ' 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class. r,'l--,:;n spec ‘ todo_list_spec.rb\n(e : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nI claes = 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] - |\n8 end\n9 end\n10\n11 context “given a task” do\n12 xit\n13 end\n14  end\n15\n> TIMELINE\nmain® oA0 n 12, Col 1 Spaces:2 UTF-8 LF Ruby s Spe’ S\n"
  },
  {
    "seconds": 381,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 Iz\n> 02_testing_bites ® o ‘xuby\no > 03_single_met... s 1\nN oA R a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing!e_chs..‘ . 9 #2\nMOEMOe-clos.1® 50 todo_list = TodoList.new\nv b . 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGerflelock. U 07_single_class, c.--):;n spec ‘ todo_list_spec.rb\n> 08.debugging.. ® : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nDL 2 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] - |\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"puts the*\n13 end\n14  end\n15\n> TIMELINE\nmain® 0A0 n 12 18 Spaces:2 UTF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 382,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® o xuby\no > 03_single_met... s 1\nol ety a6 todo_list = TodoList.new\n_single_\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing!e_chs..‘ . 9 #2\nMOEMOe-clos.1® 50 todo_list = TodoList.new\nv b . 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGerflelock. U 07_single_class, u.--):;n spec ,'.odu__h‘.( spec.rb\n> 08.debugging.. ® : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nDL 2 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] - |\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"puts the taf\n13 end\n14  end\n15\n> TIMELINE\nmain® 0A0 n12,Col21 Spaces:2 UTF-8 LF Ruby 3 Spel 0\n"
  },
  {
    "seconds": 383,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® o xuby\no > 03_single_met... s 1\nA a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing!e_chs..‘ . 9 #2\nMOEMOe-clos.1® 50 todo_list = TodoList.new\nv b . 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGerflelock. U 07_single_class, u.--):;n spec ,'.odu__h‘.( spec.rb\n> 08.debugging.. ® : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nDL 2 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] - |\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"puts the task in the JJ*\n13 end\n14  end\n15\n> TIMELINE\nmain® 0A0 Ln1 Spaces:2 UTF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 384,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 Iz\n> 02_testing_bites ® o ‘xuby\no > 03_single_met... s 1\nN oA R a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_chs..‘ . 9 #2\nMOEMOe-clos.1® 50 todo_list = TodoList.new\nv b . 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGerflelock. U 07_single_class, r:.--;:;n spec ,'.odu__h‘.( spec.rb\n> 08.debugging.. ® : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nDL 2 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] =\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"puts the task in the list\" do\n13 erf\n14 end\n15 end\n16\n> TIMELINE\nmain® 0A0 3,Col9 Spaces:2 UTF-8 LF Ruby {3 Spe 2\n"
  },
  {
    "seconds": 385,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® o xuby\no > 03_single_met... s 1\nA a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg!e_chs..‘ . 9 #2\nMOEMOe-clos.1® 50 todo_list = TodoList.new\nv b . 51  todo_list.add(\"Wash the car\") B\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08.debugging.. ® : require “todo_list\"\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nDL 2 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] [ |\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit “puts the task in the 1list\" do\n13 end\n14 end\n15 end\n16\n> TIMELINE\nmain® 0A0 12,Col 10 Spaces:2 UTF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 386,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... a4 1\nS e et a6 todo_list = TodoList.new\n_single_\n47  todo_list.list # => []\n> 05_debugging_1 ® e\n> 06_s.ing!e_clcs..‘ . 9 #2\nDACEMOC-CIet RS 50 todo_list = TodoList.new\nv o 51  todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n3108 dohupta il : require \"todo_list\"\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\n2 HIL G 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] [ ]\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit “returng the task in the list\" do\n13 end\n14 end\n15 end\n» 16\n> TIMELINE\nmain® 0A0 n12, Col17 Spaces:2 UTF-8 LF Ruby &3 Spe .\n"
  },
  {
    "seconds": 387,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... a4 1\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging_1 ® e\n> 06_s.ing!e_clcs..‘ . 9 #2\nDACEMOC-CIet RS 50 todo_list = TodoList.new\nv o 51  todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.ib % 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n3108 dohupta il : require “todo_list\"\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\n2 HIL G 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] -\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit “returns the task in the list\" do\n13\n14 end\n15 end\n; 16  end\n17\n> TIMELINE\nmain® 0A0 ni %7 Spaces:2 UTF-8 LF Ruby % Spe! )\n"
  },
  {
    "seconds": 388,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 Iz\n> 02_testing_bites ® A4 ‘xuby\no > 03_single_met... a4 1\nS e et a6 todo_list = TodoList.new\n_single_\n47  todo_list.list # => []\n> 05_debugging_1 ® e\n> 06_s.ing!e_clcs..‘ . 9 #2\nDACEMOC-CIet RS 50 todo_list = TodoList.new\nv o 51  todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class. ul-'.iJ:: spec ‘ todo_list_spec.rb\n3108 dohupta il : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\n2 HIL G 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new [ |\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “given a task\" do\n12 xit “retffrns the task in the list\" do\n13\n14 end\n15 end\n; 16  end\n17\n> TIMELINE\nmain*® 0 0 12, Col 14 Spaces: 2 UTF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 389,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® A4 xuby\no > 03_single_met... a4 1\ns a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging_1 ® e\n> 06_s.mg!e_clcs..‘ . 9 #2\nDACEMOC-CIet RS 50 todo_list = TodoList.new\nv o 51  todo_list.add(\"Wash the car\") I\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 £ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class. ul-'.iJ:: spec ‘ todo_list_spec.rb\n3108 dohupta il : require “todo_list\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\n2 HIL G 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new [ |\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “given a task\" do\n12 xit \"has the tasl& in the list\" do\n13\n14 end\n15 end\n; 16  end\n17\n> TIMELINE\nmain* oOA0 12 1 Spaces:2 UTF-8 LF Ruby % Spe! )\n"
  },
  {
    "seconds": 390,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43\n> 02_testing_bites ® 44 °'ruby\no > 03_single_met... a4 1\nN ARt a6 todo_list = TodoList.new\n= = 47  todo_list.list # => []\n> 05_debugging_1 ® e\n> 06_s.mg!e_clcs..‘ . 9 #2\nDACEMOC-CIet RS 50 todo_list = TodoList.new\nv o 51  todo_list.add(\"Wash the car\") m\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53 1\nv recipes . 54 #3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\n::;:::lock : 07_single_class_design > spec > @ todo_list_spec.rb\n3108 dohupta il : require “todo_list\"\nX 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\n2 HIL G 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new |9\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13\n14 end\n15 end\n; 16  end\n17\n> TIMELINE\nmain* oOA0 12 1 Spaces:2 UTF-8 LF Ruby % Spe! )\n"
  },
  {
    "seconds": 391,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U W @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 p\n> 02_testing_bites ARy\nil > 03_single_met.. * s #1\n>.04._single met.. ® a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.|ng!e_cus..‘ B 49 82\nVi OzMgeccle= 9 50 fodo_list = TodoList.new\ne * X1 todo_list.add(\"Wash the car') 18\n@ phone_hooke iU/ 52 todo_list.list # => [“Wash the car”]\n@ todo_listrb U 53\nv recipes . 54 ¢ 3\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nHepes - @ todo_list_spec.rb U ¢\nGemfile v\nGemfile.lock v 07_sing l-_cuus,_cn--..(l;n spec ‘ todo_list_spec.rb\n08 g : require “todo_list\n£ 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nR 4 context “given no tasks\" do\n5 xit \"has an empty list\" do\n6 todo_list = TodoList.new L\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit “\"has the task in the list\" do\n13\n14 end\n15 end\nA 16 end\n17\n> TIMELINE\nmain* 0AC Ln 5¢ 1(91selected) Spaces:2 UTF-8 Markdown Spe -\n"
  },
  {
    "seconds": 392,
    "text": "eoce todo_list_spec.(b — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U % @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (&) # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git 43\n> 02_testing_bites ® 44 \"'ruby\n“ > 03_single_met... * s #1\n>.04_single met.. ® a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|ng!e_cus..‘ L 9 #2\nMAOZnge-Cles= 0 50 todo_list = TodoList.new\ne . 51  todo_list.add(\"Wash the car\") )\n@ /poge. book =3 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® tm -\nz:;:::lock : 07_single_class_design > spec > @ todo_list_spec.rb\n3108 oo : require \"todo_list\" |\n% 09_nw|t.|_clcss... ‘ 3 RSpec.describe TodoList do\nRU-TRNG cRee: 4 context “given no tasks\" do\n5 xit “\"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq [] -\n8 end\n9 end\n10\n11 context \"given a task\" do\n12 xit “\"has the task in the list\" do\n13| 1\n14 end\n15 end\nA 16 end\n17\n> TIMELINE\nmain® 0AC n 1 Spaces: 2 TF-8 1 Ruby 3 Spe >\n"
  },
  {
    "seconds": 393,
    "text": "eoce todo_list_spec.(b — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U % @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > 5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 p\n> 02_testing_bites ® 44 \"'ruby\no > 03_single_met... ® ;s\noA a6 todo_list = TodoList.new\n_single_\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.ing!e_cus..‘ L 9 #2\nMAOZnge-Cles= 0 50 todo_list = TodoList.new\ne . 51  todo_list.add(\"Wash the car\") [\n@ /poge. book =3 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® tm -\nGemfile v - o I\nGemflelock. U 07_;\\%4;,.,;_& 'gr:as.;n{ en:t)}mfx‘stJ ;;o m\n> 08_debugging... * 6 todo_list = TodoList.new\n> 09_multi_class... * 7 expect(todo_list.list).to eq []\n> 10_multi_class... * 8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit “has the task in the list\" do B\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 todo_list.list # => [\"Wash the cav\"J'\n16 end\n17 end\n18  end\n19\n> TIMELINE\nmain® 0AC 15 7 Spaces: 2 TF-8 1 Ruby 3 Spe >\n"
  },
  {
    "seconds": 394,
    "text": "eoce todo_list_spec.(b — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U % @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® “ xuby\nBl > 03singlemet. » 45 71\n>.04_single met.. ® a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.ing!e_cus..‘ L 9 #2\nMAOZnge-Cles= 0 50 todo_list = TodoList.new\n. > 51 todo_list.add(\"Wash the car\") |\n@ /poge. book =3 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® tm -\nGemfile v\nGemMalock U “-unoke_class_dasign > spec ) @ toda st specd\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... 8 end\n> 10_multi_class... * 9 end\n10\n11 context “\"given a task\" do\n12 xit “\"has the task in the list\" do\n13 todo_list = TodoList.new B\n14 todo_list.add(\"u*h-vtht car\")\n15  todo_list.list # => [“Wash the car”]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® 0AC 14 49 selected) Spaces: 2 TF-8 L Ruby 3 Spe »\n"
  },
  {
    "seconds": 395,
    "text": "eoce todo_list_spec.(b — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U % @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 p\n> 02_testing_bites ® 44 \"'ruby\nBl > 03singlemet. » 45 71\n>.04_single met.. ® a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.ing!e_cus..‘ L 9 #2\nMAOZnge-Cles= 0 50 todo_list = TodoList.new\n. > 51 todo_list.add(\"Wash the car\") |\n@ /poge. book =3 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec L 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® tm -\nGemfile v\nGemMalock U “-unoke_class_dasign > spec ) @ toda st specd\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... 8 end\n> 10_multi_class... * 9 end\n10\n11 context “\"given a task\" do\n12 xit “\"has the task in the list\" do\n13 todo_list = TodoList.new B\n14 todo_list. ad% \"Hash’-_shg ~ca_§c\"<)\n15 | | todo_list.list # => [\"Wosh the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® 0 A C 18 2 (53 selected) Spaces:2 UTF-8 LF Ruby <{& Spe .\n"
  },
  {
    "seconds": 396,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites * “ xuby\nBl > 03singlemet. s 45 71\n>.04 single met. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_clos... . 9 #2\nMAOEMNOe-cles RS 50 todo_list = TodoList.new\nV. s 51 todo_list.add(\"Wash the car\") [\n8 Ee-hooc 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nv recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGemiieliock UM 7-tinoke_class_design 3 spec ) @) todo.isttpecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... ® 9 end\n10\n11 context “given a task” do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new ]\n14 todo_list.add(\"Wash the car\")\n15 | | ‘todo_list.1lisk # => [\"Wash the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® 0 A C Ln14 4 (55 selected! Spaces: 2 - Ruby s Spe' 0\n"
  },
  {
    "seconds": 397,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites * “ xuby\nBl > 03singlemet. s 45 71\n>.04 single met. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_clos... . 9 #2\nMAOEMNOe-cles RS 50 todo_list = TodoList.new\nV. s 51 todo_list.add(\"Wash the car\") [\n8 Ee-hooc 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nv recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGemiieliock UM 7-tinoke_class_design 3 spec ) @) todo.isttpecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... ® 9 end\n10\n11 context “given a task” do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new [ |\n14 todo_list.add('liash the car\")\n15 todo_list.list # => [“Wash the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® 0AC 20 Spaces:2 UTF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 398,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites * “ xuby\nBl > 03singlemet. s 45 71\n>.04 single met. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg|e_clos... . 9 #2\nMAOEMNOe-cles RS 50 todo_list = TodoList.new\nV. s 51 todo_list.add(\"Wash the car\") [\n8 Ee-hooc 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nv recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGemiieliock UM 7-tinoke_class_design 3 spec ) @) todo.isttpecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... ® 9 end\n10\n11 context “given a task” do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new [ |\n14 todo_list.add(\"Wash the car\")\n15 todo_list.list]# => [“Wash the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® 0AC 20 Spaces:2 UTF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 399,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites * “ xuby\n> 03_single_met.. o 45 ¥1\n>.04 single met. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_clos... . 9 #2\nMAOEMNOe-cles RS 50 todo_list = TodoList.new\nV. s 51 todo_list.add(\"Wash the car\") [\n8 Ee-hooc 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nv recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGemiieliock UM 7-tinoke_class_design 3 spec ) @) todo.isttpecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... ® 9 end\n10\n11 context “given a task” do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new b\n14 todo_list.add(\"Wash the car\")\n15 Jtodo_11st.1ist # => [“Wash the car”]\n16 end\n17 end\n18 end\n19\n> TIMELINE\n"
  },
  {
    "seconds": 400,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch o 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites * “ xuby\n> 03_single_met.. o 45 ¥1\n>.04 single met. ® 46 todo_list = TodoList.new\n06 Taabioeioa1le a7 todo_list.list # => []\n> 06_single_clas... * i\nS a9 #2\nMAOEMNOe-cles RS 50 todo_list = TodoList.new\nV. s 51 todo_list.add(\"Wash the car\") [\n@ ppone_book >34 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nv recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGemiieliock UM 7-tinoke_class_design 3 spec ) @) todo.isttpecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... ® 9 end\n10\n11 context “given a task” do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new b\n14 todo_list.add(\"Wash the car\")\n15 expect(ftodo_list.1ist # => [“Wash the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\n"
  },
  {
    "seconds": 401,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites * “ xuby\nBl > 03singlemet. s 45 71\n>.04 single met. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_clos... . 9 #2\nMAOEMNOe-cles RS 50 todo_list = TodoList.new\nV. s 51 todo_list.add(\"Wash the car\") [\n8 Ee-hooc 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nv recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGemiieliock UM 7-tinoke_class_design 3 spec ) @) todo.isttpecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... ® 9 end\n10\n11 context “given a task” do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new b\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_lﬂt.list-q => [“Wash the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® 0 ( 30 (2 selected Spaces: 2 TF-8 L Ruby s Spe' )\n"
  },
  {
    "seconds": 402,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LT\n> 02_testing_bites * a4 xuby\nBl > 03singlemet. » 45 71\n>.04 single met... ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg|e_clos... . 9 #2\nM OEMnoe-cles-. RO 50 todo_list = TodoList.new\nVb ' 51 todo_list.add(\"Wash the car\") [\n@ phone_book.....U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n% phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n4 todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nek v 07 11\\(; e c[,.-,-,_ct-::;iv_‘i;ﬁr; ‘““\\:d::!‘(;::‘ rb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new B\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list l_,;cp~|[‘msh the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® () [ n15 34 (6 selected Spaces: 2 AL I Ruby s Spe’ )\n"
  },
  {
    "seconds": 403,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LT\n> 02_testing_bites * a4 xuby\nBl > 03singlemet. » 45 71\n>.04 single met... ® 46 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg|e_clos... . 9 #2\nM OEMnoe-cles-. RO 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\") [\n@ phone_book.....U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n% phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n4 todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nek v 07 11\\(; e c[,.-,-,_ct-::;iv_‘i;ﬁr; ‘““\\:d::!‘(;::‘ rb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new -\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list) ,I[\"Hash the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® N n1s, ¢ 30 Spaces: 2 LU T Y T ) s Spe! )\n"
  },
  {
    "seconds": 404,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LT\n> 02_testing_bites * a4 xuby\nBl > 03singlemet. » 45 71\n>.04 single met... ® 46 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mg|e_clos... . 9 #2\nM OEMnoe-cles-. RO 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\") [\n@ phone_book.....U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n% phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n4 todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nek v 07 11\\(; e c[,.-,-,_ct-::;iv_‘i;ﬁr; ‘““\\:d::!‘(;::‘ rb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new -\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq |[\"Hash the car\"])\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® N 15 5 Spaces: 2 LU T Y T ) s Spe! )\n"
  },
  {
    "seconds": 405,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LT\n> 02_testing_bites * a4 xuby\nil > 03_single_met.. * s #1\n>.04 single met... ® 46 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_clos... . 9 #2\nM OEMnoe-cles-. RO 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\") [\n@ phone_book.....U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n% phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n4 todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nSEEE ST - thobe._class.esign > spec ) € todo et tpecid\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new -\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18 end\n19\nI\n> TIMELINE\nmain® N 15, C¢ Spaces: 2 LU T Y T ) s Spe! )\n"
  },
  {
    "seconds": 406,
    "text": "o0 todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch . 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LT\n> 02_testing_bites * a4 xuby\nBl > 03singlemet. » 45 71\n>.04 single met... ® 46 todo_list = TodoList.new\na7 todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ing|e_clos... . 9 #2\nM OEMnoe-cles-. RO 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\") [\n@ phone_book.....U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nv recipes . 54 #3\n% phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n4 todo_list_sp... U 60 # 4\n-rspec YU @ todo_list_spec.rb U X W am -\nGemfile u\nek v 07 11\\(; e c[,.-,-,_ct-::;iv_‘i;ﬁr; ‘““\\:d::!‘(;::‘ rb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task” do 1\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") -\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end I\n18 end\n19\n> TIMELINE\nmain® N n1 ; Spaces: 2 LU T Y T ) s Spe! )\n"
  },
  {
    "seconds": 407,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites * “ xuby\nBl > 03singlemet. » 45 71\n>.04 single met.. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.ingte_clcs..‘ . 9 #2\nD OEanoe-cles R 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\") [\n@ phone_book..... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53\nV recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\n-rspec YU @ todo_list_spec.rb U X W am -\nGemfile u\nGemieliock IRUN  '-tinoke_class_design 3 spec > @) todo_istspecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task\" do 1\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") T\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18 end\n19\n> TIMELINE\nmain® 0 [ nt 6 Spaces: 2 LU T Y ) s Spe! >\n"
  },
  {
    "seconds": 408,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42  _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites ® “ Tuby\nBl > 03singlemet. » 45 71\n>.04 single met.. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|n9|e_chs... . 9 #2\nM OZNnoe-cles- EO 50 todo_list = TodoList.new\nv N 51 todo_list.add(\"Wash the car\") [\n@ phone_book..... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nV recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\n-rspec Y @ todo_list_spec.rb U ® 9 m -\nGemfile u\nGemieliock IRUN  '-tinoke_class_design 3 spec > @) todo_istspecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task\" do\n12 xit “has the task in the list\" do\n13 todo_list = TodoList.new =\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18 |\n19 context \"given a task® do\n20 ' xit *has the task in the 1ist’ do\n21 | todo_list = TodoList.new\n2 [ [ ‘todo_list.add(\"Wash the car®)\n23 l *expect(todo_list.1ist).to eq [“Wash the car']\n> TIMELINE 24 'ft 'end\nmain® (N n 18, Col 1 (199 selected) Spaces: 2 TF-8 LF Ruby 3 Spe 3\n"
  },
  {
    "seconds": 409,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites ® “ Tuby\nBl > 03singlemet. » 45 71\n>.04 single met.. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.in9|e_chs... . 9 #2\nM OZNnoe-cles- EO 50 todo_list = TodoList.new\nv N 51  todo_list.add(\"Wash the car\") o\n@ phone_book..... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53\nV recipes . 54 #3\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the caz\")I\nVv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\n-rspec Y @ todo_list_spec.rb U ® 9 m -\nGemfile u\nGemieliock IRUN  '-tinoke_class_design 3 spec > @) todo_istspecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task” do\n12 xit “has the task in the list\" do\n13 todo_list = TodoList.new B\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18 |\n19 context \"given a task® do\n20 ' xit *has the task in the 1ist’ do\n21 | todo_list = TodoList.new\n2 [ [ ‘todo_list.add(\"Wash the car®)\n23 l *expect(todo_list.1ist).to eq [“Wash the car']\n> TIMELINE 24 'ft 'end\nmain® (N n 18, Col 1 (199 selected) Spaces: 2 TF-8 LF Ruby 3 Spe 3\n"
  },
  {
    "seconds": 410,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U x @ todo_listrb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites ® “ xuby\n- > 03_single_met... ® s 1\n>.04 single met.. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|n910_chs.., . 9 #2\nM OZNnoe-cles- EO 50 todo_list = TodoList.new\nv ' 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car]\n@ todo_listrb U 53 =\nv recipes B 54 #3 .\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57  fodo_1ist.add(\"Wash the dog\")I\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nP - @ todo_list_spec.rb U ®\nGemfile u\nGemieliock IRUN  '-tinoke_class_design 3 spec > @) todo_istspecrb\n> 08_debugging... * 7 expect(todo_list.list).to eq []\n> 09_multi_class... * 8 end\n> 10_multi_class... * 9 end\n10\n11 context “given a task” do\n12 xit “has the task in the list\" do\n13 todo_list = TodoList.new =\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given a task\" do\n20 xit “has the task in the 1list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car®)\n23 expect(todo_list.list).to eq [“Wash the car\"]\n> TIMELINE 24 end\n= N n 57, 29 selected) Spaces:2 UTF-8 LF Markdown Spe 0\n"
  },
  {
    "seconds": 411,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U X @ todo_listrb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 LTy\n> 02_testing_bites ® “ Tuby\n- > 03_single_met... ® s 1\n>.04 single met.. ® 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|ng|e_chs... . 9 #2\nM OZNnoe-cles- EO 50 todo_list = TodoList.new\nv N 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car]\n@ todo_listrb U 53 |1\nv recipes B 54 #3 .\n% phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57  fodo_1ist.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nP - @ todo_list_spec.rb U ®\nGemfile u\nGemflejock U O7tingle_class_design ) spec > @ todo_fist spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multi_class... * 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... ® 16 end\n17 end\n18\n19 context “given a task\" do\n20 xit “has the task in thd 1ist\" do o]\n21 todo_list = TodolList.new\n22 todo_list.add(\"wWash the car\")\n23 expect(todo_list.list).to eq [\"Wash the car\"]\n24 end\n25 end\n26 end\n27\n> TIMELINE\nmain® 0 ( n 57, 1(29 selected, Spaces: 2 TF-8 F Markdown Spe! >\n"
  },
  {
    "seconds": 412,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Te 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites * “ xuby\nil > 03_single_met.. * o\n>.04 single met. ® 46  todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging_1 ® e\n> 06_s.mglc_clcs..‘ < 49 82\nMOLSngecchs T 50  todo_list = TodoList.new\nv b o 51 todo_list.add(\"Wash the car\")\n@ phone_book.....U 52 todo_list.list # => [“Wash the car“]\n@ todo_listrb U 53 —~\nv recipes L] 54 #3 P\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nVv spec b 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp.. U 60 # 4\nrepec Y @ todo_list_spec.b U ® M -\nGemfile v\nGemfileock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 14 todo_list.add(\"Wash the car\")\n> 09_multi_class... ® 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... 45 end\n17 end\n18 |\n19 context “given I task\" do\n20 | xit \"has the task in the list\" do |\n21 | todo_list = TodoList.new\n22 | | todo_list.add(\"Wash the car\")\n23 | ~expect(todo_list.list).to eq [\"Wash the car\"]\n24 | end\n25 ‘end\n26 end\n27\n> TIMELINE\nmain® (Y Ln 18, Col 1 (199 selected) Spaces: 2 F-8 LF Ruby <& Spe .\n"
  },
  {
    "seconds": 413,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Te @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites ® a4 xuby\nil > 03_single_met.. * o\n>.04 single met. ® 46 todo_list = TodoList.new\n= 47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mglc_chs..‘ . 9 #2\nD20 B00R-Clov_ R 50 todo_list = TodoList.new\nv b o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53 =\nv recipes L] 54 #3 P\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\nrspec Y @ todo_list_spec.b U ® 2 m -\nGemfile v\n(o v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... 45 00\n17 end\n18\n19 context “given two tasl{ do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new =\n22 todo_list.add(\"Wash the car\")\n23 expect(todo_list.list).to eq [\"Wash the car\"]\n24 end\n25 end\n26 end\n27\n> TIMELINE\nmain® [} 0 n19,( 26 Spaces: 2 F-8 LF Ruby s Spe’ )\n"
  },
  {
    "seconds": 414,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Te @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites ® a4 xuby\nil > 03_single_met.. * o\n>.04 single met. ® 46 todo_list = TodoList.new\n= 47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mglc_chs..‘ . 9 #2\nD20 B00R-Clov_ R 50 todo_list = TodoList.new\nv b o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53 =\nv recipes L] 54 #3 P\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\nrspec Y @ todo_list_spec.b U ® 2 m -\nGemfile v\n(o v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... 45 00\n17 end\n18\n19 context “given two taskq' do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new [ |\n22 todo_list.add(\"Wash the car\") I\n23 expect(todo_list.list).to eq [\"Wash the car\"]\n24 end\n25 end\n26 end\n27\n> TIMELINE\nmain® 0OAO0 n19, 27 Spaces: 2 F-8 LF Ruby s Spe! o\n"
  },
  {
    "seconds": 415,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Te @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites ® a4 xuby\nil > 03_single_met.. * o\n>.04 single met. ® 46 todo_list = TodoList.new\n= 47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.inglc_chs..‘ . 9 #2\nD20 B00R-Clov_ R 50 todo_list = TodoList.new\nv b o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53 ™\nN TeCIDes c 54 #3 -\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec ° 57  todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\nrspec Y @ todo_list_spec.b U ® 2 m -\nGemfile v\n(o v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... 45 00\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(“Wash the car\") | |\n23 |\n24 expect(todo_list.list).to eq [\"Wash the car\"]\n25 end\n26 end\n27 end\n28\n> TIMELINE\nmain® 0OAO0 n2 7 Spaces: 2 F-8 LF Ruby s Spe! o\n"
  },
  {
    "seconds": 416,
    "text": "eoe todo_Uist_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Te @7_single_class_design = D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 e\n> 02_testing_bites ® a4 xuby\nil > 03_single_met.. * o\n>.04 single met. ® 46 todo_list = TodoList.new\n= 47  todo_list.list # => []\n> 05_debugging 1 * 48\n> 06_s.mglc_chs..‘ . 9 #2\nD20 B00R-Clov_ R 50 todo_list = TodoList.new\nv b o 51 todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53 ™\nN TeCIDes c 54 #3 -\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp.. U 60 # 4\nrspec Y @ todo_list_spec.b U ® 2 m -\nGemfile v\n(o v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... 45 00\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(“Wash the car\")\n23 todo_list.add(“Wash the dog\")| ]\n24 expect(todo_list.list).to eq [\"Wash the calI’]\n25 end\n26 end\n27 end\n28\n> TIMELINE\nmain® 0OAO0 n 23 36 Spaces: 2 F-8 LF Ruby s Spe! 8]\n"
  },
  {
    "seconds": 417,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® a4 xuby\nil > 03_single_met.. * o F1\n. a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|ng1¢_clns..‘ . 9 #2\nD000 Ceve RS 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53 ™\nv recipes B 54 #3 .\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... * 16 ond\n17 end\n18\n19 context \"given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\") v\n24 expect(todo_list.list).to eq [\"Wash the car\", []\n25 end\n26 end\n27 end\n28\n> TIMELINE\nmain*® 0 0 n 24 Spaces: 2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 418,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® a4 xuby\nil > 03_single_met.. * o F1\n>.04 single met.. ® a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|ng1¢_clns..‘ . 9 #2\nD000 Ceve RS 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53 ™\nv recipes B 54 #3 .\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... * 16 ond\n17 end\n18\n19 context \"given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\") B\n24 expect(todo_list.list).to eq [\"Wash the car\", “Haﬂ']\n25 end\n26 end\n27 end\n28\n> TIMELINE\nmain*® 0 0 n224 Spaces: 2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 419,
    "text": "[N todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites ® 44 °'ruby\nil > 03_single_met.. * o F1\noA me a6 todo_list = TodoList.new\n_single_\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.ing1¢_clns..‘ . 9 #2\nD000 Ceve RS 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53 ™\nv recipes B 54 #3 .\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... * 16 ond\n17 end\n18\n19 context \"given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\") B\n24 expect(todo_list.list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27 end\n28\n: I\n> TIMELINE\nmain*® 0 0 n 24 6 Spaces: 2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 420,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites ® 44 °'ruby\nil > 03_single_met.. * o F1\n. a6 todo_list = TodoList.new\n> 04_single_met... *\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.ing1¢_clns..‘ . 9 #2\nD000 Ceve RS 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53 ™\nY Tecnes r 54 #3 -\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... * 16 ond\n17 end\n18\n19 context \"given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\") | ]\n24 expect(todo_list.list).to eq [\"Wash the car”, \"Wash the dod']\n25 end\n26 end I\n27 end\n28\n> TIMELINE\nmain*® 0 0 n 24 6 Spaces: 2 UTF-8 LF Ruby s Spe! ]\n"
  },
  {
    "seconds": 421,
    "text": "eoe todo_list_spec.tb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tt 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 o\n> 02_testing_bites ® a4 xuby\nil > 03_single_met.. * o F1\n>.04 single met.. ® a6 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging_1 ® e\n> 06_s.ing1e_clcs‘.‘ . 9 #2\npAOZMnoe-Clee =S 50 todo_list = TodoList.new\nN o 51  todo_list.add(\"Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrd U 53 ™\nv recipes s 54 #3 8\n¥ phone_desig... U 55 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n@ spec_helper.... U 59\n@ todo_list_sp... U 60 # 4\nrspec Y @ todo_list_spec.b U ® 9 m -\nGemfile u\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... * 16 ond\n17 end\n18\n19 context \"given two tasks\" do\n20 xit “\"has the task in the list\" do\n21 | todo_1ist = TodoList.new\n22 || todo_list.add(\"Wash the car\") Bl\n23 todo_list.add(\"Wash the dog\")\n24 || expect(todo_list.list).to eq [“Wash the cax\", “Wash the dog\"]\n25  end\n26 end\n27  end\n28\n> TIMELINE\nmain® [N n2 6 (179 selected Spaces:2 UTF-8 LF Ruby s Spe! =\n"
  },
  {
    "seconds": 422,
    "text": "oo todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc 07_single_class_design - D\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites ® 44 °'ruby\nBl > 03_single_met.. © &5 2\nS 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|n910_cus..‘ . 9 #2\nV0L cles-. 1S 50  todo_list = TodoList.new\nL o 51  todo_list.add(“Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53 ™\nv recipes s 54 ¢ 3 .\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car“, “Wash the dog\"]\n@ spec_helper... U 59\n4 todo_list_sp.. U 60 # 4\n-rspec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... o o\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\") ||\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27 corffexE \"given tio Easks™ do’\n28 | | ‘xit-*has the task in the list\" do\n29 B ‘ - tcddo_list = TodoList.new\n30 | todo_list.add(\"Wash the car\")\n31 | todo_list.add(\"Wash the dog\")\n> TIMELINE L e e P P S L o T T e T LR N T T T L\nmain® [N . v Ln 27, Col 6 (248 selected) Spaces: 2 TF-8 LF Ruby % Spe =\n"
  },
  {
    "seconds": 423,
    "text": "oo todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc 07_single_class_design - |:|\n> 00_scratch ° 42 _Make a list of examples of how the class will behave in different situations._\n> 01_intro_and_git a3 .\n> 02_testing_bites ® 44 °'ruby\nBl > 03_single_met.. © &5 2\nS 46 todo_list = TodoList.new\n47  todo_list.list # => []\n> 05_debugging 1 * a8\n> 06_s.|n919_cus..‘ . 9 #2\nMOZMngle_cles-_ '@ 50  todo_list = TodoList.new\nL o 51  todo_list.add(“Wash the car\")\n@ phone_book.... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_listrb U 53 ™\nv recipes s 54 ¢ 3 .\n¥ phone_desig... U §5 todo_list = TodoList.new\n¥ tasks_design... U 56 todo_list.add(\"Wash the car\")\nv spec . 57 todo_list.add(\"Wash the dog\")\n@ phone_book... U 58 todo_list.list # => [“Wash the car“, “Wash the dog\"]\n@ spec_helper... U 59\n4 todo_list_sp.. U 60 # 4\nfepec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... o o\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"hag the task in the list\" do\n21 todo_i{st = TodoList.new\n22 todo_list.add(\"Wash the car\") ||\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27 |\n28 context “given two tasks\" do\n1 29 xit “has the task in the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n> TIMELINE e dd( “Wach the dog®\nmain® 0OAO0 27.Col3 Spaces: 2 TF-8 LF Ruby {3 Spe 9\n"
  },
  {
    "seconds": 424,
    "text": "oo todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch - 49 #2\n> 01_intro_and_git 50  todo_list = TodoList.new\n> 02_testing_bites * 51 todo_list.add(“wash the car\")\n08 > 03_single_met... 52 todo_list.list # => [“Wash the car\"]\n> 04_single_met... ® :: .\niz:::\":'::::' : 55 todo_list = TodoList.new\n3 56 todo_list.add(\"Wash the car\")\nv 0Z_single_clas... *\nb - 57 todo_list.add(\"wash the dog\")\n58 todo_list.llJt # => [“Wash the car”, \"Wash the dog\"]\n@ phone_book.... U 59\n@ todo_listrb U 0 #4 =\nv recipes c 61 todo_list = TodoList.new .\n¥ phone_desig... U 62 todo_list.add(\"Wash the car\")\n¥ tasks_design... U 63  todo_list.add(\"Wash the dog\")\nv spec bt 64 todo_list.complete(“Wash the car\")\n@ phone_book... U 65 todo_list.list # => [“Wash the dog\"]\n@ spec_helper... U 66\n4 todo_list_sp... U 67 #5\nfepec Y @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.add(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... - o\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\") .\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27 |\n28 context “given two tasks\" do\n1 29 xit “has the task in the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n> TIMELINE o dd(*Wach . the dogs®\nmain* 0AO ] ‘ n27 Col3 Spaces:2 TF-8 LF Ruby {3 Spe )\n"
  },
  {
    "seconds": 425,
    "text": "oo todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . i\n> 01_intro_and_git 54 #:3\n3 2 55 todo_list = TodoList.new\n> 02_testing_bites ® - .\nA e 56 todo_list.add(“Wash the car\")\nSOV 57 todo_list.add(\"Wash the dog\")\no i ) 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nVv 07_single_clas... ® 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") [\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec o 68  todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(“Wash the sheep”)\n@& todo_list_sp... U 71 todo_list.list # foils \"No such task.”\nfepec Y @ todo_list_spec.b U ® 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 14 todo_list.adq(\"Wash the car\")\n> 09_multl_class... 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 10_multi_class... o o\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"has the task in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\") .\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27 |\n28 context “given two tasks\" do\n29 xit “has the task in the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n> TIMELINE e dd(“Wach. the dag\"\n= oA ¢ n27,Col3 Spaces:2 UTF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 426,
    "text": "oo todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . e\n> 01_intro_and_git 54 &\n3 2 55 todo_list = TodoList.new\n> 02_testing_bites ® = <\nA e 56 todo_list.add(\"Wash the car\")\nSOV 57 todo_list.add(\"Wash the dog\")\nT - X 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv 0Z_single_clas... * 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car”) i\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(“\"Wash the sheep”)\n@& todo_list_sp... U 71 todo_list.list # foils \"No such task.”\nrspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 20 xit “\"has the task in the list\" do\n> 09_multi_class... * 21 todo_list = TodoList.new\n70 makiiciee 1 h 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\")\n25 end\n26 end\n27 |\n28 context \"gllen two tasks\" do |}\n29 xit \"has the task in the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog”]\n34 end\n35 end\n36 end\n37\n> TIMELINE\nmain® 0AC n27,Col3 Spaces:2 UTF-8 LF Ruby g Spe 0\n"
  },
  {
    "seconds": 427,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . o\n> 01_intro_and_git o4 g\n> 02_testing_bites 55 todo_list = TodoList.new\no8 oAl m meie 56 todo_list.add(\"Wash the car\")\nS OA‘WE‘MA. : 57 todo_list.add(\"Wash the dog\")\n> ol ) 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nN OLsinole_cles= '8 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(“Wash the sheep”)\n@& todo_list_sp... U 71  todo_list.list # foils \"No such task.”\n-rspec YU @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 20 xit \"has the task in the list\" do\n> 09_multl_class... 21 todo_list = TodoList.new\n10 ik ciose D 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context ‘ﬁiven two tasks\" do\n29 xit \"has the task in the list\" do |\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36  end\n37\n> TIMELINE\nmain® 0AC n 28, Col12 Spaces: 2 TF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 428,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . o\n> 01_intro_and_git o4 g\n> 02_testing_bites 55 todo_list = TodoList.new\no8 oAl m meie 56 todo_list.add(\"Wash the car\")\nS OA‘WE‘M : 57 todo_list.add(\"Wash the dog\")\n> g 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nN OLsinole_cles= '8 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(“Wash the sheep”)\n@& todo_list_sp... U 71  todo_list.list # foils \"No such task.”\n-rspec YU @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 20 xit \"has the task in the list\" do\n> 09_multl_class... 21 todo_list = TodoList.new\n10 ik ciose D 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “given two taskd' do\n29 xit \"has the task in the list\" do |\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36  end\n37\n> TIMELINE\nmain* 0AC 8, Col 27 (15 selected) Spaces: 2 TF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 429,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . o\n> 01_intro_and_git o4 g\n> 02_testing_bites 55 todo_list = TodoList.new\no8 oAl m meie 56 todo_list.add(\"Wash the car\")\nS OA‘WE‘MA. : 57 todo_list.add(\"Wash the dog\")\n> ol ) 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nN OLsinole_cles= '8 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(“Wash the sheep”)\n@& todo_list_sp... U 71  todo_list.list # foils \"No such task.”\n-rspec YU @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 20 xit \"has the task in the list\" do\n> 09_multl_class... 21 todo_list = TodoList.new\n10 ik ciose D 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “given two taskd\" do\n29 xit \"has the task in the list\" do |\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36  end\n37\n> TIMELINE\nmain* 0AC 8, Col 27 (15 selected) Spaces: 2 TF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 430,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . o\n> 01_intro_and_git o4 g\n> 02_testing_bites 55 todo_list = TodoList.new\no8 oAl m meie 56 todo_list.add(\"Wash the car\")\nS OA‘WE‘M : 57 todo_list.add(\"Wash the dog\")\n> g 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nN OLsinole_cles= '8 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(“Wash the sheep”)\n@& todo_list_sp... U 71  todo_list.list # foils \"No such task.”\n-rspec YU @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 20 xit \"has the task in the list\" do\n> 09_multl_class... 21 todo_list = TodoList.new\n10 ik ciose D 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “whd' do\n29 xit \"has the task in the list\" do |\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36  end\n37\n> TIMELINE\nmain® 0AC 8 5 Spaces: 2 TF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 431,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . S\n> 01_intro_and_git o4 g\n> 02_testing_bites 55 todo_list = TodoList.new\no8 oAl m meie 56 todo_list.add(\"Wash the car\")\nS OA‘WE‘M : 57 todo_list.add(\"Wash the dog\")\n> g 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nN OLsinole_cles= '8 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(“Wash the sheep”)\n@& todo_list_sp... U 71  todo_list.list # foils \"No such task.”\n-rspec YU @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... ® 20 xit \"has the task in the list\" do\n> 09_multl_class... 21 todo_list = TodoList.new\n10 ik ciose D 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we compl*' do\n29 xit \"has the task in the list\" do B\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36  end\n37\n> TIMELINE\nmain® 0AC = 6 Spaces: 2 TF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 432,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . e\n> 01_intro_and_git o &\n> 02_testing_bites 55 todo_list = TodoList.new\no8 S A - 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M' 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 4\nM OLsingle_cles- @ 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\n-rspec Y @ todo_list_spec.rb U ® M -\nGemfile v\n(e v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 20 xit \"has the task in the list\" do\n> 09_multi_class... * 21 todo_list = TodoList.new\n3310 kUcieer b 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “when we complete a tasi\" do\n29 xit \"has the task in the list\" do [ |\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36 end\n37\n> TIMELINE\nmain* 0 0 28, 34 Spaces: 2 TF-8 LF Ruby s Spe' .\n"
  },
  {
    "seconds": 433,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . e\n> 01_intro_and_git o &\n> 02_testing_bites 55 todo_list = TodoList.new\no8 > 03_single, ;M‘ 2 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M' 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 4\nM OLsingle_cles- @ 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\n-rspec Y @ todo_list_spec.rb U ® M -\nGemfile v\n(e v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 20 xit \"has t:f task in the list\" do\n> 09_multi_class... * 21 todo_list' = TodoList.new\n3310 kUcieer b 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “when we complete a task\" do\n29 xit \"has the task in the list\" do |\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36 end\n37\n> TIMELINE\nmain® oOAO n28, Col35 Spaces:?2 TF-8 LF Ruby s Spe! 0\n"
  },
  {
    "seconds": 434,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o &\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 AT 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 4\nM OLsingle_cles- @ 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\n-repgc Y @ todo_list_spec.rb U ® 9 m -\nGemfile v\nOemilelock U oz_l;m, e_class tuu-,:u ;w:c t‘ !utdu_‘\\‘m(_ :’oh o\ncontext “given two tasks\"\niz:\"’:n‘i\":::\"::_ o2 xit \"has boy| task in the list\" do\ni 21 todo_list = TodoList.new\n24J0-[URL clese_ 3EH 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end =\n26 end\n27\n28 context “when we complete a task\" do\n29 xit \"has the task in the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AO 0 17 Spaces: 2 TF-8 LF Ruby & Spe )\n"
  },
  {
    "seconds": 435,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o &\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 AT 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘MA 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 4\nM OLsingle_cles- @ 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\n-repgc Y @ todo_list_spec.rb U ® 9 m -\nGemfile v\nOemilelock U oz_l;m“-_cu-.-, tu.,--,:u ;WC t‘ !utdu_:u(_ ~.:;:m\ncontext \"given two tasks\"\niz:\"’:n‘i\":::\"::_ i 20 xit \"has both tasks in the 1list\" do\ni 21 todo_list = TodoList.new\n24J0-[URL clese_ 3EH 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we ctmplete a task\" do B\n29 xit \"has the task in the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AQ r 21 Spaces: 2 TF-8 LF Ruby &3 Spe )\n"
  },
  {
    "seconds": 436,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o &\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 > 03_single ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 4\nM OLsingle_cles- @ 61 todo_list = TodoList.new\nv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\n-repgc Y @ todo_list_spec.rb U ® 9 m -\n:x;::.lock : oz_l;m; e_class tu.,--,:u ;WC t‘ !utdu_:u(_ ~.:;:m\ncontext \"given two tasks\"\niz:\"’:n‘i\":::\"::_ i 20 xit \"has both tasks in the 1list\" do\ni 21 todo_list = TodoList.new\n24J0-[URL clese_ 3EH 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “when we complete a task\" do =\n29 xit \"ﬁ;s the task in the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AO n 28 10 Spaces: 2 TF-8 LF Ruby & Spe )\n"
  },
  {
    "seconds": 437,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 P 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") |\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® M -\nGemfile v\noendlolock. U ozi;y\\c, e_class tul--,:n\"g;w:c t:Omtau;‘\\(w.x\" :-o b\ncontex ven asks\nig:‘d:.:im:::\":. : 20 xit \"has both tasks in the list\" do\niy 21 todo_list = TodoList.new\n2410-TuRtclose_ 1 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do =\n29 xit “has the task in the 1istf do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\nA 34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AQC n 29, Col 34 (24 selected) Spaces: 2 F-8 LF Ruby % Spe! .\n"
  },
  {
    "seconds": 438,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . ;: e3\ni g;\":::;\":i; - 55  todo_list = TodoList.new\no8 3 03_single ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") |\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® M -\n::::::Iock : 07_single_class_design > spec > @ todo_list_spec.rb\n19 context “given two- tasks\" do\nig:‘d:.:im:::\":. : 20 xit \"has both tasks in the list\" do\niy 21 todo_list = TodoList.new\n2410-TuRtclose_ 1 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do =\n29 xit “removes thef' do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\nA 34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AO0 ) 1 Spaces: 2 TF-8 LF Ruby % Spe’ =\n"
  },
  {
    "seconds": 439,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . ;: e3\ni g;\":::;\":i; - 55  todo_list = TodoList.new\no8 3 03_single ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") |\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® M -\n::::::Iock : 07_single_class_design > spec > @ todo_list_spec.rb\n19 context “given two- tasks\" do\nig:‘d:.:im:::\":. : 20 xit \"has both tasks in the list\" do\niy 21 todo_list = TodoList.new\n2410-TuRtclose_ 1 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do B\n29 xit: “removes the task from 1\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\nA 34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AO0 i) Spaces: 2 TF-8 LF Ruby % Spe’ =\n"
  },
  {
    "seconds": 440,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 P 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") |\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® M -\n::::::Iock : 07_single_class_design > spec > @ todo_list_spec.rb\n19 context “given two- tasks\" do\nig:‘d:.:im:::\":. : 20 xit \"has both tasks in the list\" do\niy 21 todo_list = TodoList.new\n2410-TuRtclose_ 1 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do B\n29 xit “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\") 1\n32 todo_list.add(\"Wash the dog\")\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\nA 34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AO0 9, Col 40 Spaces: 2 F-8 LF Ruby & Spe '\n"
  },
  {
    "seconds": 441,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 P 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘MA 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") |\nv recipes . 65 todo_list.list # => [“Wash the dog\"] .\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® M -\nGemfile v\noendlolock. U ozi;y\\c; e_class :.--,:n ;ur,~c t‘ :utau,‘\\(w.x a::m\ncontext “\"given two tasks\"\nig:‘d:.:im:::\":. : 20 xit \"has both tasks in the list\" do\niy 21 todo_list = TodoList.new\n2410-TuRtclose_ 1 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “removes the task from the list” do =\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")| I\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\nA 34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AO0 36 Spaces: 2 F-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 442,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 P 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘MA 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\") 1 =\nv recipes . 65 todo_list.list # => [“Wash the dog\"] Ll\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec B 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® M -\nGemfile v\noendlolock. U ozi;y\\c; e_class :.--,:n ;ur,~c t‘ :utau,‘\\(w.x a::m\ncontext “\"given two tasks\"\nig:‘d:.:im:::\":. : 20 xit \"has both tasks in the list\" do\niy 21 todo_list = TodoList.new\n2410-TuRtclose_ 1 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “removes the task from the list\" do -\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")|\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\nA 34 end\n35 end\n36 end\n> TIMELINE 37\nmain® 0AO0 36 Spaces: 2 F-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 443,
    "text": "eoce tasks_design.md — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U W @O - zsh x 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 ot ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrb U 64  ‘todo_list.complete(“Wash-the-car\")\nv recipes ® 65 todo_list.list # => [“Wash the dog\"] -\n¥ phone_desig... U 66\n¥ tasks_design... U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nAopag - @ todo_list_spec.rb U @\nGemfile v\noendlolock. U ozi;y\\<, e_class, :.,--thn ;,ur:c t‘ (utdu_‘\\‘m( u::lb\ncontext “given two tasks\"\nig:‘::‘bnlim:::\":. : 20 xit \"has both tasks in the list\" do\ne Ay 21 todo_list = TodoList.new\n2410-URL close__ 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “removes the task from the list\" do —\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\") I\n33 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n34 end\n35 end\n36 end\n> TIMELINE 37\nmain* 0AC 64, Col 1(34 selected) Spaces: 2 TF-8 F  Markdown Spe 4\n"
  },
  {
    "seconds": 444,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U x @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 ot ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrb U 64  todo_list.complete(“Wash the car\")\nv recipes . 65 todo_list.list # => [“Wash the dog\"] —_—\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® o m -\nGemfile v\noendlolock. U ozi;y\\<, e_class, :.,--J:n ;,ur:c t‘ (utdu_‘\\‘v-( a::lb\ncontext “given two tasks\"\nig:‘::‘bnlim:::\":. : 20 xit \"has both tasks in the list\" do\ne Ay 21 todo_list = TodoList.new\n2410-URL close__ 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “removes the task from the list\" do >\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the cax“)'\n34 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37  end\n= N 33, Col 41 Spaces: 2 TF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 445,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U x @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 ot ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrb U 64  todo_list.complete(“Wash the car\")\nv recipes . 65 todo_list.list # => [“Wash the dog\"] —_—\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® o m -\nGemfile v\nT R e e e\nig:‘::‘bnlim:::\":. : 20 xit \"has both tasks in the list\" do\ne Ay 21 todo_list = TodoList.new\n2410-URL close__ 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “removes the task from the list\" do\n30 todo_list = TodoList.new [ |\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the cay’ | “Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37  end\nmain® 0AC 4 52 (1selected) Spaces: 2 TF-8 LF Ruby % Spe' .\n"
  },
  {
    "seconds": 446,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U x @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . ;: e3\ni g;\":::;\":i; - 55  todo_list = TodoList.new\no8 N oa_single ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrb U 64  todo_list.complete(“Wash the car\")\nv recipes . 65 todo_list.list # => [“Wash the dog\"] —_—\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.”\nfepec Y @ todo_list_spec.b U ® o m -\n:::;::_bck : 07_single_class_design > spec > @ todo_list_spec.rb\n19 context “given two tasks\" do\nig:‘::‘bnlim:::\":. : 20 xit \"has both tasks in the list\" do\ne Ay 21 todo_list = TodoList.new\n2410-URL close__ 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “removes the task from the list\" do\n30 todo_list = TodoList.new [ |\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"“Wash the car\")\n34 expect(todo_list.list).to eq [B‘gsh,.&ho:cn_g\", “Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37  end\n= 0 A C n 34 38 (15 selected) Spaces:2 UTF-8 LF Ruby &3 Spel .\n"
  },
  {
    "seconds": 447,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER ¥ tasks_designmd U x @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - |:|\n> 00_scratch . e\n> 01_intro_and_git o L&\n> 02_testing_bites ® 55 todo_list = TodoList.new\no8 ot ;M‘ = 56 todo_list.add(\"Wash the car\")\n§ OA‘WE‘M 4 57 todo_list.add(\"Wash the dog\")\n= ezt 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nv/ OLsingle_cles... ® 61  todo_list = TodoList.new\nVv lib ° 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrb U 64  todo_list.complete(“Wash the car\")\nv recipes . 65 todo_list.list # => [“Wash the dog\"] —_—\n¥ phone_desig... U 66\n¥ tasks_design.. U 67 #5\nv spec . 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nfepec Y @ todo_list_spec.b U ® o m -\nGemfile v\noendlolock. U 0/1;V\\<, e_class, :.,--thn ;,ur:c t‘ (utdu_‘\\‘v.( a::m\ncontext “given two tasks\"\nig:‘::‘bnlim:::\":. : 20 xit \"has both tasks in the list\" do\ne Ay 21 todo_list = TodoList.new\n2410-URL close__ 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “removes the task from the list\" do\n30 todo_list = TodoList.new [}\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"“Wash the car\")\n34 expect(todo_list.list).to eq []\"uash the dog\"]\n35 end\n36 end\n> TIMELINE 37  end\nmain® 0AC n3a4 37 Spaces: TF-8 LF Ruby 3 Spe 0\n"
  },
  {
    "seconds": 448,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > =) ## 3. Create Examples as Tc @7_single_class_design - D\n> 00_scratch . e\n> 01_intro_and_git B e\n> 02_testing_bites 55 todo_list = TodoList.new\no8 3 03_single r-m( = 56 todo_list.add(\"Wash the car\")\nS OA‘W\"‘M' < 57 todo_list.add(\"Wash the dog\")\no . 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 05_debugging 1 * 59\n> 06_single_clas... * 60 #4\nVOLsingle_cles... ® 61  todo_list = TodoList.new\nv lib * 62 todo_list.add(\"Wash the car\")\n@ phone_book.... U 63  todo_list.add(\"Wash the dog\")\n@ todo_listrd U 64 todo_list.complete(“Wash the car\")\nv recipes . 65 todo_list.list # => [“Wash the dog\"] -\n¥ phone_desig... U 66 I\n¥ tasks_design... U 67 #5\nv spec - 68 todo_list = TodoList.new\n@ phone_book... U 69 todo_list.add(\"Wash the car\")\n@ spec_helper... U 70 todo_list.complete(\"Wash the sheep”)\n@& todo_list_sp... U 71  todo_list.list # foils \"No such task.\"\nrspec Y @ todo_list_spec.rb U X M -\nGemfile v\nooy e ) 8\nig:‘::‘bnlim:::\":. : 20 xit \"has both tasks in the list\" do\ne 21 todo_list = TodoList.new\n2400-TURL clese__ 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “\"removes the task from the list\" do\n30 todo_list = TodoList.new =\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n» 34 expect(todo_list.list).to eq []\"wash the dog\"]\n35 end\n36 end\n> TIMELINE 37  end\nmain*® 0 ( n 34, Col 37 Spaces: 2 UL I Ruby s Spe’ .\n"
  },
  {
    "seconds": 449,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER <+ % tasks_design.md U @ todo_list.rb U zsh x a -\nv RSPEC_SETUP 0«;:; ing r;‘:v,::n,:.:-:gn“:-\\u?‘c:m .U.l‘.'m::.::v;, gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - |:|\n2400_scratch E 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 01_intro_and_git 59\n3 > 02_testing_bites ® 60 #4\nil > 03_single_met.. © 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... *® 64  todo_list.complete(“Wash the car\")\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\") =\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # foils \"No such task.”\nv spec B 1 Mt\n@ phone_book.. U s\n@ spec_helper.... U 74 _Encode each example as o test. You can add to the above list as you go._\n@ todo_list_sp... U Zs PR A,\nrspec Y @ todo_list_spec.rb U X wm--\nGemfile v\nGemfile.lock v O/l;V|<; e_class, :I\";t()lv ;uv:r; t‘ :utdu ‘\\‘M az: b\ncontext “given two tasks\"\nig:‘::‘bnlim:::\":. : 20 xit \"has both tasks in the list\" do\ne 21 todo_list = TodoList.new\n2400-TURL clese__ 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit “\"removes the task from the list\" do\n30 todo_list = TodoList.new =\n31 todo_list.add(\"Wash ti car\")\n32 todo_list.add(\"Wash tx dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq []\"wash the dog\"]\n35 end\n36 end\n> TIMELINE 37  end\nmain*® 0 ( n 34, )l 37 Spaces: 2 F-8 LF Ruby s Spe’ .\n"
  },
  {
    "seconds": 450,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER <+ % tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP 0 /,:; ing r’.\\.\\:v’:la ;;n“:-\\; .?'r:._m quy«w:., gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - [|\n2400_scratch E 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\n> 01_intro_and_git 59\n> > 02_testing_bites ® 60 #4\nil > 03single_met.. ¢ 61 todo_list = TodoList.new\n> 04_single_met... ® 62  todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... *® 64  todo_list.complete(“Wash the car\")\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\") |\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # foils \"No such taosk.\"\nv spec B 1/ S\n@ phone_book.. U Lt\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U ZS PR A,\n-rspec YU @ todo_list_spec.rb U X M -\nGemfile v )\nGamlelock U e R add(-wash e cax\")\n> 08_debugging... * 23 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> 10_multi_class... * 25 end\n26 end\n27\n28 contfxt “when we complete a task\" do\n29 xit “removes the task from the list\" do I\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") h g\n34 expect(todo_list.list).to eq Q\"wash the dog\"]\n35 end\n36 end\n37 end\n38\n> TIMELINE\nmain*® 0 ( n 34, Col 37 Spaces: 2 F-8 LF Ruby s Spe’ .\n"
  },
  {
    "seconds": 451,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 0 /,:; ing r’.\\.\\:v’:la ;;n“:-\\; .?'r:._m quy«w:., gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - [|\nA pcreteny = 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\nil > 03.single_met.. ¢ 61  todo_list = TodoList.new\n> 04_single_met... ® 62  todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... * 64  todo_list.complete(“Wash the car\")\nv 07_single_clas... 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\") |\n¥ phone_desig... U 70 todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71  todo_list.list # foils \"No such task.\"\nv spec B 1/ S\n@ phone_book.. U Lt\n@ spec_helper... U 74 _Encode each example as o test. You can add to the above list as you go._\n@ todo_list_sp... U 25 RS A ey\nrspec Y @ todo_list_spec.rb U X wo--\nGemfile v i\nGamlelock U e R add(-wash e cax\")\n> 08_debugging... * 23 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> 10_multi_class... * 25 end\n26 end\n27\n28 context “when we complete a task\" do\n29 | | xit “removes the task from the list\" do !\n30 | | todo_list = TodoList.new\n31 | todo_list.add(\"Wash the car®)\n32 | todo_list.add(\"Wash the dog\")\n33 || todo_list.complete(\"Wash the car\")\n34 - expect(todo_list.1list).to eq [\"Wash the dog\"] 5\n35 - end\n36 | end]\n37 end\n38\n> TIMELINE\nmain* OAC 6, Col 286 selected) Spaces: 2 F-8 LF Ruby {3 Spe e\n"
  },
  {
    "seconds": 452,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 0 /,:; ing r’.\\.\\:v’:la ;;n“:-\\; .?'r:._m quy«w:., gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - [|\nA pcreteny = 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\nil > 03.single_met.. ¢ 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... * 64 todo_list.complete(“Wash the car\")\nv 07_single_clas... 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\") [\n¥ phone_desig... U 70 todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71  todo_list.list # foils \"No such task.\"\nv spec B 72 \"\n@ phone_book... U 73\n@ spec_helper... U 74 _Encode each example as o test. You can add to the above list as you go._\n@ todo_list_sp... U 25 I S A\nrspec Y @ todo_list_spec.rb U X o\nGemfile u i\nGamlelock U e R add(-wash The. cax\")\n> 08_debugging... * 23 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> 10_multi_class... * 25 end\n26 end\n27\n28 context “when we complete a task\" do\n29 | xit \"removes the task from the list\" do ‘\n30 | todo_list:= TodoList.new\n31 - todo_list.add(\"Wash the car\")\n32 | todo_list.add(\"Wash the dog\")\n33 || todo_list.complete(\"Wash the car®)\n3¢ | expect(todo_list.list).to eq [\"Wash the dog\"] %)\n35 »ele .M\n36 | end]\n37 end\n38\n> TIMELINE\nmain* OAC 6, Col 6 (286 selected) Spaces: 2 F-8 LF Ruby {3 Spe *\n"
  },
  {
    "seconds": 453,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nli'\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP (1/;(: ng! r:\\‘s‘:vfid im““:-\\:ix;)\"«:;“ !“Lm,:l:n;, gn.md > [ # Tasks Class Design Recipe > &) ## 3. Create Examples as T 07_single_class_design - |:|\nARheate) g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n. > 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64 todo_list.complete(“Wash the car\")\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb U 68 todo_list = TodoList.new\nv recipes B 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # foils \"No such tosk.\"\nv spec B 72 o\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example os a test. You can add to the above list as you go._\n& todo_list_sp... U Z? ey ke =\n-rspec Y @ todo_list_specrb U ® ©wa--\ne o 07_single_class_design > spec > @ todo_list_spec.rb\nCoi ez 28 context “when we complete a task\" do\n> 08_debugging... * 29 xit \"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 pect(todo_list.list).to eq [“Wash the dog\"]\n35 tny\n36 end\n37 context “when we complete a task' do\n3 | xit “removes the task from the list' do\n39 | todo_list = TodoList.new\n40 - todo_list.add(\"Wash the car\") |\n41 | todo_list.add(\"Wash the dog\")\n42 | todo_list.complete(\"Wash the car\")\n43 - expect(todo_list.list).to eq [“\"Wash the dog\"]\n4  end\na5 end\n> TIMELINE 46  end\nmain® YN n 45, Col 6 (286 selected) Spaces:2 UTF-8 LF Ruby {3 Spe >\n"
  },
  {
    "seconds": 454,
    "text": "eoe todo_list_spec.rb — rspec_setup EB\nli‘\\ EXPLORER -+ % tasks_design.md U @ todo_list.rb U zsh X a -\n~ RSPEC_SETUP 07_single_class_des ign > recipes > 2L'uv:', gn.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - [|\nRS- scratch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n. > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\")\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(\"Wash the car\")\nv 07_single_clas... ® 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # fails \"No such tosk.\"\nv spec B 72 o\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n& todo_list_sp... U Z? ey ke =\nspec Y @& todo_list_spec.b U ® -\niz o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRe.lock & 28 contexi “when we complete a task\" do\n> 08_debugging... * 29 xit \"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37 |\n38 context “when we complete a task\" do B\n39 xit “removes the task from the list\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain® 0AO ¥ 3 Spaces:2 UTF-8 LF Ruby s Spe! ®\n"
  },
  {
    "seconds": 455,
    "text": "eoe todo_list_spec.rb — rspec_setup EB\nli‘\\ EXPLORER -+ % tasks_design.md U @ todo_list.rb U zsh X a -\n~ RSPEC_SETUP 07_single_class_des ign > recipes > tL'uv:', gn.md > () # Tasks Class Design Recipe > ) ## 3. Create Examples as Tc @7_single_class_design - [|\nRS- scratch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n. > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\")\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(\"Wash the car\")\nv 07_single_clas... ® 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # fails \"No such tosk.\"\nv spec B 72 o\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n& todo_list_sp... U Z? ey ke =\nspec YU @ todo_list_spec.b U ® -\niz o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRe.lock & 28 contexi “when we complete a task\" do\n> 08_debugging... * 29 xit \"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37 |\n38 context “when we Iomplete a task\" do B\n39 xit “removes the task from the list\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain® 0AO ¥ 3 Spaces:2 UTF-8 LF Ruby s Spe! ®\n"
  },
  {
    "seconds": 456,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP (VZT ng r;_r:::n_:.:: i\"’..-:'\\:'n.::;.. .‘lil“ns::.l:r? gn.md > () # Tasks Class Design Recipe > (= ## 3. Create Examples as Tc @7_single_class_design » I:l\nRS- scratch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\")\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(\"Wash the car\")\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes B 69 todo_list.add(\"Wash the car\") [\n¥ phone_desig... U 70  todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # foils \"No such tosk.\"\nv spec B 72 o\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n& todo_list_sp... U Z? ey ke =\nspec YU @ todo_list_spec.b U ® M-\naiete \" 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock & 28 contexi \"wheﬁ'n conple‘teva task\" do\n> 08_debugging... * 29 xit \"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try | do B\n39 xit “removes the task from the list\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain® 0 0 n 38 4 Spaces: 2 UTF-8 LF Ruby s Spe’ -\n"
  },
  {
    "seconds": 457,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP (VZT ng r;_r:::n_:.:: i\"’..-:'\\:'n.::;.. .‘lil“ns::.l:r? gn.md > () # Tasks Class Design Recipe > (= ## 3. Create Examples as Tc @7_single_class_design » I:l\nRS- scratch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\")\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(\"Wash the car\")\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes B 69 todo_list.add(\"Wash the car\") [\n¥ phone_desig... U 70  todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # foils \"No such tosk.\"\nv spec B 72 o\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n& todo_list_sp... U Z? ey ke =\nspec YU @ todo_list_spec.b U ® M-\naiete \" 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock & 28 contexi \"wheﬁ'n conple‘teva task\" do\n> 08_debugging... * 29 xit \"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to compd* do B\n39 xit “removes the task from the list\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\n45 end\n> TIMELINE 46 end\nmain® ) [ n 38 Spaces: 2 UTF-8 LF Ruby s Spe’ -\n"
  },
  {
    "seconds": 458,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,':::«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes = 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep\")\n¥ tasks_design... U 71 todo_list.list # foils \"No such task.”\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® 2 m -\ns 5 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRedock & 28 ; contexi “when we cmpfet; a task\" do\nDU T T 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-|\" do B\n39 xit “removes the task from the list\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“\"Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain*® 0 ( n38,Cold42 Spaces:2 UTF-8 LF Ruby s Spe’ |\n"
  },
  {
    "seconds": 459,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,':::«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes = 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep\")\n¥ tasks_design... U 71 todo_list.list # foils \"No such task.”\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® 2 m -\ns 5 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRedock & 28 ; contexi “when we cmpfet; a task\" do\nDU T T 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent [ do B\n39 xit “removes the task from the list\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“\"Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain*® 0 ( n 38, 51 Spaces:2 UTF-8 LF Ruby s Spe’ |\n"
  },
  {
    "seconds": 460,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,’:’;“«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes = 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep\")\n¥ tasks_design... U 71 todo_list.list # foils \"No such task.”\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® 2 m -\ns 5 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRedock & 28 ; contexi “when we cmpfet; a task\" do\nDU T T 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"v;uen we try to complete a non-existent task\" do B\n39 xit “removes the task from the list\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“\"Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain*® 0 ( n 38 5 Spaces: 2 UTF-8 LF Ruby s Spe’ |\n"
  },
  {
    "seconds": 461,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh (2} o\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,':::«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > () # Tasks Class Design Recipe > (= ## 3. Create Examples as Tc @7_single_class_design » |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes o 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(\"Wash the sheep”)\n¥ tasks_design... U 71 todo_list.list # faoils \"No such task.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? ol e\nO8O Y @& todo_list_spec.rb U @ o\ne, \" 07_single_class_design > spec > @ todo_list_spec.rb\nG‘\"‘\"\"'bfk & 28 ; contexi “when we cmpfet; a task\" do\nDU T T 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"ze*ves tie task from the list\" do QN\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“\"Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\n45 end\n> TIMELINE 46 end\nmain® YN ) 3 selected) Spaces:2 UTF-8 LF Ruby {3 Spe 0\n"
  },
  {
    "seconds": 462,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,':::«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes = 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep\")\n¥ tasks_design... U 71 todo_list.list # foils \"No such task.”\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® 2 m -\ns 5 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRedock & 28 ; contexi “when we cmpfet; a task\" do\nDU T T 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 xit “fail' do r\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“\"Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain*® 0 ( n B, ( 1 Spaces: 2 UTF-8 LF Ruby s Spe’ |\n"
  },
  {
    "seconds": 463,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,':::«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes = 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep\")\n¥ tasks_design... U 71 todo_list.list # foils \"No such task.”\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® 2 m -\nSetedRe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRelock & 28 ; contexi “when we conp{ete a task\" do\nR S OOTO 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do 0\n40 todo_list = TodoList.newI\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain® 0AC Ln39,Col15 Spaces:2 UTF-8 LF Ruby s Spe' ]\n"
  },
  {
    "seconds": 464,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,':::«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n- > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes = 69 todo_list.add(\"Wash the car\") -\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep\")\n¥ tasks_design... U 71 todo_list.list # foils \"No such task.”\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® 2 m -\nSetedRe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRelock & 28 ; contexi “when we conp{ete a task\" do\nR S OOTO 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do 0\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the gog\"]\na5 end\n> TIMELINE 46 end\nmain® 0AC Ln39,Col15 Spaces:2 UTF-8 LF Ruby s Spe' ]\n"
  },
  {
    "seconds": 465,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,’:’;“«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\n98- scoatch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(\"Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes = 69 todo_list.add(\"Wash the car\") |\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep\")\n¥ tasks_design... U 71 todo_list.list # fails \"No such task.']\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® 2 m -\nSetedRe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRelock & 28 ; contexi “when we conp{ete a task\" do\nR S OOTO 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do 7]\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain® 0AC Ln39,Col15 Spaces:2 UTF-8 LF Ruby s Spe' ]\n"
  },
  {
    "seconds": 466,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U x @ todo_listrb U wm@Oo-- zsh a -\nveseic.. R BR U @ (1«;‘1 ngle_class_des ign > recipes > ._..'LA'('::'::\";' gn.md > B # Tasks Class Design Recipe > B ## 3. Create Examples as T §7_single_class_design - []\nA8 scrtch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n- > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todolistb € 68  [fodo_list = TodoList.new\nv recipes B 69  todo_list.add(\"Wash the caxr\")\n¥ phone_desig... U 70  todo_list.complete(“Wash:the sheep”) =\n¥ tasks_design... U 71 todo_list.list # fails \"No such tosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nL - @ todo_list_spec.rb U o\nSetedRe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRelock & 28 ; contexi “when we conp{ete a task\" do\n> 08_debugging... © 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do 7\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\")\n) 43 todo_list.complete(“Wash the car\")\na4 expect(todo_list.list).to eq [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain*® 0 ( 68, 1 1 {130 selected) Spaces TF-8 F Markdown Spe =\n"
  },
  {
    "seconds": 467,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U X @ todo_listrb U zsh a -\nv RSPEC_SETUP (1/;1 ng r:vs‘:v_na Ejnm‘\"f‘l'\\:‘.l,':::«a“ .‘..'Ln::'.‘:'.,ﬁ gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as Tc 07_single_class_design - |:|\nA8 scotch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes B 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) -\n¥ tasks_design... U 71 todo_list.list # fails \"No such tosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? - =D\nspec Y @ todo_list_spec.b U ® M -\nSetedRe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiRelock & 28 ; contexi “when we conp{ete a task\" do\n> 08_debugging... © 29 xit \"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new =\n41 todo_list.add(\"Wash the car\")\n42 todo_list.add(\"Wash the dog\") 1\n) 43 todo_list.complete(“Wash the car\")\na3 expect(todo_list.list).to eq [\"Wash the dog\"]|\na5 end\n> TIMELINE 46 end\nmain® 0AC 44, Col 52 Spaces: 2 F-8 LF Ruby s Spe .\n"
  },
  {
    "seconds": 468,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nli‘\\ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;(: ng! r:\\‘s‘:vfid :;n“:-\\:w,-:‘ic_m .M.T('::'.‘:“; gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites * 60 #4\n- > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) —\n¥ tasks_design... U 71 todo_list.list # foils \"No such taosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? A =\nspec Y @ todo_list_spec.b U ® M -\nit o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock 0 28 ; contexi “when we compfete a task\" do\n> 08_debugging... © 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 xit “fails\" do [ |\n40 [rodo_list = TodoList.new\n41 | || todo_list.add(\"Wash the car\")\n42 .. todo_list.add(\"Wash- the dog\")\n43 todo_list.complete(\"Wash the car\")\n44 ... expect(todo_list.list).to eq: [\"Wash the dog\"]\na5 end\n> TIMELINE 46 end\nmain*® 0 ( n 40, Ol 189 selected Spaces: 2 UTF-8 LF Ruby s Spe’ 9\n"
  },
  {
    "seconds": 469,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nli‘\\ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/;(: ng! r:\\‘s‘:vfid :;n“:-\\:w,-:‘ic_m .M.T('::'.‘:“; gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites * 60 #4\n- > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) —\n¥ tasks_design... U 71 todo_list.list # foils \"No such taosk.\"\nv spec . 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? A =\nspec Y @ todo_list_spec.b U ® M -\nit o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock 0 28 ; contexi “when we compfete a task\" do\n> 08_debugging... © 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do | |\n40 todo_list = TodoList.new\na todo_ljst.au('yash-tn. car\")\n42 todo_list.complete(\"Wash the sheep\")\n43 todo_list.list # fails \"No such task.*\n44 end\na5 end\n> TIMELINE 46 end\nmain*® 0 ( -5 8 (98 selected) Spaces: 2 UTF-8 LF Ruby s Spe’ 9\n"
  },
  {
    "seconds": 470,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.,-:‘(:m .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) -\n¥ tasks_design... U 71 todo_list.list # foils \"No such taosk.\"\nv spec . 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? A =\nspec Y @ todo_list_spec.b U ® M -\ne o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock 0 28 ; contexi “when we compl-eté- a task\" do\n> 08_debugging... © 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do =\n40 todo_list = TodoList.new\na1 Ioao_11st.a¢¢('_in_nn-t'p‘._,c_u-)\n42 l ' todo_list.complete(“Hash the sheep”)\n43 || todo_list.list # fails \"No such task.\"\n44 end\na5 end\n> TIMELINE 46  end\nmain*® 0 ( 4 14 (110 selected) Spaces: 2 UTF-8 LF Ruby s Spe’ 9\n"
  },
  {
    "seconds": 471,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.,-:‘(:m .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites * 60 #4\n- > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) -\n¥ tasks_design... U 71 todo_list.list # faoils \"No such taosk.\"\nv spec . 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? A =\nspec Y @ todo_list_spec.b U ® M -\ne o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock 0 28 ; contexi “when we compl-eté- a task\" do\n> 08_debugging... © 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do =\n40 todo_list = TodoList.new\na [todo_1ist.add(\"Wash the car\")\n42 todo_list.complete(\"Wash the sheep\")\na3 todo_1iJt.list # fails \"No such task.”\n44 end\na5 end\n> TIMELINE 46 end\nmain*® 0 ( Ln4d 7 Spaces:2 UTF-8 LF Ruby s Spe’ 9\n"
  },
  {
    "seconds": 472,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.,-:‘(:m .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) -\n¥ tasks_design... U 71 todo_list.list # foils \"No such taosk.\"\nv spec . 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? A =\nspec Y @ todo_list_spec.b U ® M -\ne o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock 0 28 ; contexi “when we compl-eté- a task\" do\n> 08_debugging... © 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new [—\n41 todo_list.add(\"Wash the car\")\na2 todo_list.complete(\"Wash the sheep\")\n43 eltodo_lxst.list # fails \"No such task.\"\n44 end\na5 end\n> TIMELINE 46 end\nmain® 0AC a 3 Spaces:2 UTF-8 LF Ruby 3 Spe *\n"
  },
  {
    "seconds": 473,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ % tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.;:‘(:“ .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech e 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“\"Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb V] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep™) -\n¥ tasks_design... U 71 todo_list.list # faoils \"No such tosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? O I =S,\nspec Y @ todo_list_spec.b U ® M -\nefeye o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReock N 28 ; contexi “when we compfete a task\" do\nPG LT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new —\n41 todo_list.add(\"Wash the car\")\n42 todo_list.complete(\"Wash the sheep\")\n43 Jtodo_1ist.1ist # fails \"No such task.”\na4 end\na5 end\n> TIMELINE 46 end\nmain® 0AC Ln43,Col7 Spaces:2 UTF-8 LF Ruby s Spe’ il\n"
  },
  {
    "seconds": 474,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ % tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.;:‘(:“ .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech e 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“\"Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb V] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep™) -\n¥ tasks_design... U 71 todo_list.list # faoils \"No such tosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? O I =S,\nspec Y @ todo_list_spec.b U ® M -\nefeye o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReock N 28 ; contexi “when we compfete a task\" do\nPG LT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new —\n41 todo_list.add(\"Wash the car\")\n42 todo_list.complete(\"Wash the sheep\")\n43 todo_list.list # fails \"No such-task.\"\na4 end\na5 end\n> TIMELINE 46 end\nmain® 0AC nd ol 45 (38 selected) Spaces:2 UTF-8 LF Ruby s Spe’ il\n"
  },
  {
    "seconds": 475,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ % tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.;:‘(:“ .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech e 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“\"Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb V] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep™) -\n¥ tasks_design... U 71 todo_list.list # faoils \"No such tosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? O I =S,\nspec Y @ todo_list_spec.b U ® M -\nefeye o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReock N 28 ; contexi “when we compfete a task\" do\nPG LT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new [\n41 todo_list.add(\"Wash the car\")\n42 expecitodo,list.co-phto(“blash the sheep”)\na3 todo_list.list # fails \"No such task.\"”\na4 end\na5 end\n> TIMELINE 46 end\nmain* 0AC L 12 Spaces:2 UTF-8 LF Ruby s Spe! B\n"
  },
  {
    "seconds": 476,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ % tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.;:‘(:“ .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech e 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“\"Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb V] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep™) -\n¥ tasks_design... U 71 todo_list.list # faoils \"No such tosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? O I =S,\nspec Y @ todo_list_spec.b U ® M -\nefeye o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReock N 28 ; contexi “when we compfete a task\" do\nPG LT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new =\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\")l\na3 todo_list.list # fails \"No such task.\"”\na4 end\na5 end\n> TIMELINE 46 end\nmain* 0AC a ) Spaces:2 UTF-8 LF Ruby s Spe! B\n"
  },
  {
    "seconds": 477,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIfﬂ EXPLORER <+ % tasks_design.md U @ todo_list.rb U zsh a -\nv RSPEC_SETUP (1/:1 ng r:vs‘:v{; :;n“:-\\:.;:‘(:“ .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAog-scraech e 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01 intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“\"Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb V] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep™) -\n¥ tasks_design... U 71 todo_list.list # faoils \"No such tosk.\"\nv spec B 72\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? O I =S,\nspec Y @ todo_list_spec.b U ® M -\nefeye o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReock N 28 ; contexi “when we compfete a task\" do\nDOt 29 Ixit \"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new =\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\")l\na3 todo_list.list # fails \"No such task.\"”\na4 end\na5 end\n> TIMELINE 46 end\nmain* 0AC a ) Spaces:2 UTF-8 LF Ruby s Spe! B\n"
  },
  {
    "seconds": 478,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U X @ todo_listrb U @O - zsh a -\nv RSPEC_SETUP (1/:1 ing r:vs‘:v{; :;n“:-\\:.,-:‘(:m .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAo8-scranch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) |\n¥ tasks_design.. U 71 todo_list.list tﬁfotls \"No such task.\"\nv spec B 72 \"\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? E ke R =\nspec Y @ todo_list_spec.b U o\nQoneEe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock o 28 ; contexi “when we compfete a task\" do\nPUSC AT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new Fl\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\")\n43 todo_list.list # fails \"No such task.\"\n44 end\n45 end\n> TIMELINE 46  end\nmain® 0 ( n71,Col17 Spaces:2 TF-8 LF Markdown Spel 1\n"
  },
  {
    "seconds": 479,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U @ @ todo_listrb U @O - zsh a -\nv RSPEC_SETUP (1/:1 ing r:vs‘:v{; :;n“:-\\:.,-:‘(:m .‘..'Lﬁ::'.‘:'.;' gn.md > (&) # Tasks Class Design Recipe > &) ## 3. Create Examples as T¢ 07_single_class_design - |:|\nAo8-scranch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n. > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70 todo_list.complete(“Wash the sheep\")l _\n¥ tasks_design... U 71 todo_list.list\nv spec B 72 \"\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? E ke R =\nspec Y @ todo_list_spec.b U o\nQoneEe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock o 28 ; contexi “when we compfete a task\" do\nPUSC AT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new Fl\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\")\n43 todo_list.list # fails \"No such task.\"\n44 end\na5 end\n> TIMELINE 46  end\nmain* 0AC n70,Col 37 Spaces: 2 TF-8 LF Markdown Spe! ®\n"
  },
  {
    "seconds": 480,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U @ @ todo_listrb U @O - zsh a -\nv RSPEC_SETUP s r:_x\"‘.-‘,:i.ae.t_.;:‘x::f..flvld:.ai::»{ \":_\"z.:,i-::a::zn lmc [ # Tasks Class Design Recipe > & ## 3. Create Examples as Tests 07_single_class_design - |:|\nAo8-scranch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n. > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70 todo_list.complete(“Wash the sheep”)# fails \"No such task.\" _\n¥ tasks_design... U 71 todo_list.list\nv spec B 72 \"\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? E ke R =\nspec Y @ todo_list_spec.b U o\nQoneEe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock o 28 ; contexi “when we compfete a task\" do\nPUSC AT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new Fl\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\")\n43 todo_list.list # fails \"No such task.\"\n44 end\na5 end\n> TIMELINE 46  end\nmain® 0 ( 7! ol 60 Spaces: 2 TF-8 LF Markdown Spel 1\n"
  },
  {
    "seconds": 481,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U @ @ todo_listrb U @O - zsh a -\nv RSPEC_SETUP s r:_x\"‘.-‘,:i.ae.t_.;:‘x::f..flvld:.ai::»{ \":_\"z.:,i-::a::zn lmc [ # Tasks Class Design Recipe > & ## 3. Create Examples as Tests 07_single_class_design - |:|\nAo8-scranch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n. > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70 todo_list.complete(“Wash the sheep\")[’f fails \"No such task.” _'\n¥ tasks_design... U 71 todo_list.list\nv spec B 72 \"\n@ phone_book... U 73\n@ spec_helper.... U 74 _Encode each example as a test. You can add to the above list as you go._\n@ todo_list_sp... U Z? E ke R =\nspec Y @ todo_list_spec.b U o\nQoneEe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock o 28 ; contexi “when we compfete a task\" do\nPUSC AT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new Fi\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\")\n43 todo_list.list # fails \"No such task.\"\n44 end\na5 end\n> TIMELINE 46  end\nmain® 0 [ n7 ol 37 Spaces: 2 TF-8 LF Markdown Spe °\n"
  },
  {
    "seconds": 482,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U @ @ todo_listrb U @O - zsh a -\nv RSPEC_SETUP s r:_x\"‘.-‘,:i.ae.t_.;:‘x::f..flvld:.ai::»{ \":-\"l..‘m:::d::zn lmc =) # Tasks Class Design Recipe > & ## 3. Create Examples as Tests 07_single_class_design - |:|\nAo8-scranch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n. > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheef') # fails \"No such task.\"\n¥ tasks_design..u 71 ' i\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper.... U 74\n& todo_list_sp... U ZS ## 4. Implement the Behavioux\nspec Y @ todo_list_spec.b U\nQoneEe o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock o 28 ; contexi “when we compfete a task\" do\nPUSC AT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new Fi\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\")\n43 todo_list.list # fails \"No such task.\"\n44 end\na5 end\n> TIMELINE 46  end\nmain® 0 [ A 4 Spaces:2 TF-8 LF Markdown Spe °\n"
  },
  {
    "seconds": 483,
    "text": "eoce tasks_design.md — rspec_setup 08\nIfﬂ EXPLORER <+ ¥ tasks_designmd U @ @ todo_listrb U @O - zsh a -\nv RSPEC_SETUP s r:_x\"‘.-‘,:i.ae.t_.;:‘x::f..flvld:.ai::»{ \":-\"l..‘m:::d::zn lmc =) # Tasks Class Design Recipe > & ## 3. Create Examples as Tests 07_single_class_design - |:|\nAo8-scranch g 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb 1] 68 todo_list = TodoList.new\nv recipes N 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design..u 71 '] 5|\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper.... U 74\n& todo_list_sp... U ZS ## 4. Implement the Behavioux\nspec Y @ todo_list_spec.b U\nQerene o 07_single_class_design > spec > @ todo_list_spec.rb\nGemiReJock o 28 ; contexi “when we compfete a task\" do\nPUSC AT 29 xit “\"removes the task from the list\" do\n> 09_muiti_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new B\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash tfie sheep\")\n43 todo_list.list # fails \"No such task.\"\n44 end\na5 end\n> TIMELINE 46  end\nmain® 0 [ A 4 Spaces:2 TF-8 LF Markdown Spe °\n"
  },
  {
    "seconds": 484,
    "text": "eoce todo_Ust_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U ¢ @ todo_list.rb U zsh 8 -\n- v RSPEC_SETUP ;.wglx:,rw.'.-.i;c‘t:vgj“:oi‘;.::-; \":-HIIJ‘.:\"..;(‘!:‘T‘-‘I(&F /'ml (=) # Tasks Class Design Recipe > 5 ## 3. Create Examples as Tests 07_single_class_design - |:|\ns g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_lfslmg_bnes . 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 1\nv spec B 72\n@ phone_book... U 73 _Encode each example os a test. You can add to the above list as you go._\n@ spec_helper... U 74\n& todo_list_sp... U Zs ## 4. Implement the Behaviour\nrspec Y @ todo_list_spec.b U ® 2 m -\noerihe . 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L 'is > context “when we conpfete_ a task\" do\n2R0f cebigaiaC RS 29 xit “\"removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new B\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") I\n43 todo_list.list # fails \"No such task.\"\na4 end\n45 end\n> TIMELINE 46 end\nmain® YN 42, Col53 Spaces TF-8 LF Ruby <3 Spe .\n"
  },
  {
    "seconds": 485,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U ¢ @ todo_list.rb U zsh 8 -\n- v RSPEC_SETUP ;.wglx:,rw.'.-.i;c‘t:vgj“:oi‘;.::-; \":-HIIJ‘.:\"..;(‘!:‘T‘-‘I(&F /'ml (=) # Tasks Class Design Recipe > 5 ## 3. Create Examples as Tests 07_single_class_design - |:|\ns g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_lfslmg_bnes . 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 1\nv spec B 72\n@ phone_book... U 73 _Encode each example os a test. You can add to the above list as you go._\n@ spec_helper... U 74\n& todo_list_sp... U Zs ## 4. Implement the Behaviour\nrspec Y @ todo_list_spec.b U ® 2 m -\noerihe . 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L 'is > context “when we conpfete_ a task\" do\n2R0f cebigaiaC RS 29 xit “\"removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new ~\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }tpl\n43 todo_list.list # fails \"No such task.\"\na4 end\n45 end\n> TIMELINE 46 end\n== N 42 57 Spaces TF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 486,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U ¢ @ todo_list.rb U zsh 8 -\n- v RSPEC_SETUP ;.wglx:,rw.'.-.i;c‘t:vgj“:oi‘;.::-; \":-HIIJ‘.:\"..;(‘!:‘T‘-‘I(&F /'ml (=) # Tasks Class Design Recipe > 5 ## 3. Create Examples as Tests 07_single_class_design - |:|\ns g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 1\nv spec B 72\n@ phone_book... U 73 _Encode each example os a test. You can add to the above list as you go._\n@ spec_helper... U 74\n& todo_list_sp... U Zs ## 4. Implement the Behaviour\nrspec Y @ todo_list_spec.b U ® 2 m -\noerihe . 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L 'is > context “when we conpfete_ a task\" do\n2R0f cebigaiaC RS 29 xit “\"removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new I\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }44\n43 todo_list.list # fails \"No such task.\"\na4 end\n45 end\n> TIMELINE 46 end\nmain® N A 6 Spaces TF-8 LF Ruby <3 Spe .\n"
  },
  {
    "seconds": 487,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U ¢ @ todo_list.rb U zsh 8 -\n- v RSPEC_SETUP ;.wglx:,rw.'.-.i;c‘t:vgj“:oi‘;.::-; \":-HIIJ‘.:\"..;(‘!:‘T‘-‘I(&F /'ml (=) # Tasks Class Design Recipe > 5 ## 3. Create Examples as Tests 07_single_class_design - |:|\ns g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 1\nv spec B 72\n@ phone_book... U 73 _Encode each example os a test. You can add to the above list as you go._\n@ spec_helper... U 74\n& todo_list_sp... U Zs ## 4. Implement the Behaviour\nrspec Y @ todo_list_spec.b U ® 2 m -\noerihe . 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L 'is > context “when we conpfete_ a task\" do\n2R0f cebigaiaC RS 29 xit “\"removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new B\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to xaisel\n43 todo_list.list # fails \"No such task.\"\na4 end\n45 end\n> TIMELINE 46 end\nmain® N 42,Col63 Spaces TF-8 LF Ruby <3 Spe .\n"
  },
  {
    "seconds": 488,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U ¢ @ todo_list.rb U zsh 8 -\n- v RSPEC_SETUP ;.wglx:,rw.'.-.i;c‘t:vgj“:oi‘;.::-; \":-HIIJ‘.:\"..;(‘!:‘T‘-‘I(&F /'ml (=) # Tasks Class Design Recipe > 5 ## 3. Create Examples as Tests 07_single_class_design - |:|\ns g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 1\nv spec B 72\n@ phone_book... U 73 _Encode each example os a test. You can add to the above list as you go._\n@ spec_helper... U 74\n& todo_list_sp... U Zs ## 4. Implement the Behaviour\nspec Y @ todo_list_spec.b U ® 2 m -\noerihe . 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L 'is > context “when we conpfete_ a task\" do\n2R0f cebigaiaC RS 29 xit “\"removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n> 10_multi_class... © 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new B\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error I\n43 todo_list.list # fails \"No such task.\"\na4 end\n45 end\n> TIMELINE 46 end\nmain® N 42,Col71 Spaces TF-8 LF Ruby <3 Spe .\n"
  },
  {
    "seconds": 489,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U o @ todo_list.rb U zsh . 8 -\n’ v RSPEC_SETUP ;.:rglx:,rw.~,<.<_.;c\\1‘f~v-:vgin‘“:=~i‘;-::»; .':-'ll;1€:‘..‘;dr:‘f\\.llzl‘ /'nd [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - |:|\noscreeh g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_lfslmg_bnes . 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"“Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes - 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 |\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper... U 74\nDY e 1] Zs ## 4. Implement the Behaviour\nrspec Y @ todo_list_spec.b U ® 9 m -\nS o 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L is 3 context “when we conpl—eté a task\" do\n> 08_debugging... * 29 xit “\"removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n> 10_multi_class.. ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try-to complete a non-existent task” do\n39 xit “fails” do\n40 todo_list = TodoList.new r\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No 4\n43 todo_list.list # foils \"No such task.\"\na4 end\n45 end\n> TIMELINE 46  end\nmain*® 0 ( n 42, Col 7! Spaces: 2 UTF-8 LF Ruby s Spe' 2\n"
  },
  {
    "seconds": 490,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U o @ todo_list.rb U zsh . 8 -\n’ v RSPEC_SETUP ;.:rglx:,rw.~,<.<_.;c\\1‘f~v-:vgin‘“:=~i‘;-::»; .':-'ll;1€:‘..‘;dr:‘f\\.llzl‘ /'nd [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - |:|\noscreeh g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"“Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes - 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 |\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper... U 74\nDY e 1] Zs ## 4. Implement the Behaviour\nrspec Y @ todo_list_spec.b U ® 9 m -\nS ; 07_single_class_design > spec > @ todo_list_spec.rb\nCor.dezs o 28 intext \"when we complete a task” do\n> 08_debugging... * 29 xit “removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n2 J0_muki_cless... ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 o\n37\n38 intext \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new [ ]\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\"”) }.to raise_error \"No such task.l\"\n43 todo_list.list # fails “No such task.”\na4 end\n45\n> TIMELINE 46 1\nmain*® 0 ( 42, C 84 Spaces: 2 UTF-8 LF Ruby s Spe' 2\n"
  },
  {
    "seconds": 491,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nIi'\\ EXPLORER ¥ tasks_designmd U o @ todo_list.rb U zsh . 8 -\n’ v RSPEC_SETUP ;.:rglx:,rw.~,<.<_.;c\\1‘f~v-:vgin‘“:=~i‘;-::»; .':-'ll;1€:‘..‘;dr:‘f\\.llzl‘ /'nd [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - |:|\noscreeh g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"“Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes - 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 |\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper... U 74\nDY e 1] Zs ## 4. Implement the Behaviour\nrspec Y @ todo_list_spec.b U ® 9 m -\nS ; 07_single_class_design > spec > @ todo_list_spec.rb\nCor.dezs o 28 ntext \"when we complete a task” do\n> 08_debugging... * 29 xit “removes the task from the list\" do\n> 09_multi_class... 30 todo_list = TodoList.new\n2 J0_muki_cless... ® 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 o\n37\n38 intext \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new -\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep”) }.to raise_error \"No such task.\"\n43 end\n44\n45\n> TIMELINE 46 1\nmain*® 0 ( nda3,( Spaces: 2 UTF-8 LF Ruby s Spe' 2\n"
  },
  {
    "seconds": 492,
    "text": "eoe todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U o @ todo_list.rb U zsh . 8 -\nv RSPEC_SETUP ;.:rglx:,rw.~,<.<_.;c\\1‘f~v-:vgin‘“:=~i‘;-::»; .':-'ll;1€:‘..‘;dr:‘f\\.llzl‘ /'nd [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - |:|\noscreeh g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_lfslmg_bnes . 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"“Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes - 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 |\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper... U 74\nDY e 1] Zs ## 4. Implement the Behaviour\n-rspec YU @ todo_list_spec.rb U X 9 m -\nS ; 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L is \"wh;n ne complete a task\"'do\n> 08_debugging... * 29 ‘'removes the task from the list\" do\n> 09_multi_class... 30 Jo_list = TodoList.new\n2 J0_muki_cless... ® 31 fo_list.add(\"Wash the car\")\n32 fo_list.add(\"wWash the dog\")\n33 fo_list.complete(\"“Wash the car\")\n34 ect(todo_list.list).to eq [\"Wash the dog\"]\n35\n36\n37\n38 : “when we try to complete a non-existent task\" do\n39 ‘'fails” do\n40 lo_list = TodoList.new -\n41  lo_list.add(\"Wash the car\")\n42 ect { todo_list.complete(“\"Wash the sheep\"”) }'ti raise_erroxr \"No such task.\"\n43\n44\n45\n> TIMELINE 46\nmain*® 0 ( nda3,( Spaces: 2 UTF-8 LF Ruby s Spe' 2\n"
  },
  {
    "seconds": 493,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U o @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP ;.:rglx:,rw.~,<.<_.;c\\1‘f~v-:vgin‘“:=~i‘;-::»; .':-'ll;1€:‘..‘;dr:‘f\\.llzl‘ /'nd [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - |:|\noscreeh g 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01_intro_and_git 59\n3 > 02_testing_bites 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(\"“Wash the dog\")\n> 06_single_clas... 64  todo_list.complete(“Wash the car\")\nv 07Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes - 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 |\nv spec ° 72\n@ phone_book... U 73  _Encode each example os o test. You can add to the above list as you go._\n@ spec_helper... U 74\nDY e 1] Zs ## 4. Implement the Behaviour\n-rspec Y @& todo_list_spec.rb U x 9 m -\nGemfile v\nOemilelock. U 07_single_class_design > spec > @ todo,_list_spec.rb ]\n> 08_debugging... * 30 todo_list = TodoList.new\n> 09_multi_class... * 31 todo_list.add(\"Wash the caxr\")\n> 10_multi_class.. ® 32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\na1 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such tasr.\na3 end ‘\na4 end I\n45  end\n46\n> TIMELINE\nmain*® 0 ( Ln 43, Col 8 Spaces: 2 UTF-8 LF Ruby s Spe' 2\n"
  },
  {
    "seconds": 494,
    "text": "eo0ce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER <+ ¥ tasks_designmd U e @ todo_listrb U zsh a -\n: v RSPEC_SETUP ,-.,rgiv»‘,( w.‘-*<:;:‘1‘f~‘::v(in‘d:z~i‘.'-::>; \":_\"l;n::.‘;d(:\\.lnir /rvm [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - D\n2400 scratch ‘ 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(“Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 1\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper... U 74\nYL A1) Zs ## 4. Implement the Behaviour\n-rspec YU @ todo_list_spec.rb U X 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec .‘.\"“fw. list_spec.b ___\n> 08_debugging... * 30 todo_list = TodoList.new\n> 09_multi_class... ® 31 todo_list.add(\"Wash the car\")\n> 10_multi_class.. ® 32 todo_list.add(\"Wash the dog\")\n= = 33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such tasl?:\na3 end\na4 end 1\n45 end\na6\n> TIMELINE\nmain® [NV Ln43,Col8 Spaces:2 UTF-8 LF Ruby s Spe’ L\n"
  },
  {
    "seconds": 495,
    "text": "eo0ce todo_list_spec.rb — rspec_setup 08\nIi‘\\ EXPLORER <+ ¥ tasks_designmd U e @ todo_listrb U zsh a -\n: v RSPEC_SETUP ,-.,rgiv»‘,( w.‘-*<:;:‘1‘f~‘::v(in‘d:z~i‘.'-::>; \":_\"l;n::.‘;d(:\\.lnir /rvm [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - D\n2400 scratch ‘ 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n2 > 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(“Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\"\n¥ tasks_design... U 7 1\nv spec B 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper... U 74\nYL A1) Zs ## 4. Implement the Behaviour\n-rspec YU @ todo_list_spec.rb U X 9 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec .‘.\"“fw. list_spec.b ___\n> 08_debugging... * 30 todo_list = TodoList.new\n> 09_multi_class... ® 31 todo_list.add(\"Wash the car\")\n> 10_multi_class.. ® 32 todo_list.add(\"Wash the dog\")\n= = 33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such tasl?:\na3 end\na4 end 1\n45 end\na6\n> TIMELINE\nmain® [NV Ln43,Col8 Spaces:2 UTF-8 LF Ruby s Spe’ L\n"
  },
  {
    "seconds": 496,
    "text": "eo0ce 2sh — rspec_setup 08\nEXPLORER <+ ¥ tasks_designmd U e @ todo_listrb U zsh x +-ma -\nv RSPEC_SETUP ,-.,rgiv»‘,( w.a«‘«_.;:‘ij;-:v(&:p&::»; \":_\"l;n::.‘;d(:\\.lnir /rvm [ # Tasks Class Design Recipe > [ ## 3. Create Examples as Tests 07_single_class_design - I\n2400 scratch ‘ 58  todo_list.list # => [“Wash the car®, “Wash the dog\"]\n> 01_intro_and_git 59\n> 02_testing_bites ® 60 #4\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\")\n> 05_debugging 1 * 63  todo_list.add(“Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\")\nv 0Z_single_clas... * 65 todo_list.list # => [“Wash the dog\"]\nv lib . 66\n@ phone_book.... U 67 #5\n@ todo_list.rb u 68 todo_list = TodoList.new\nv recipes . 69 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\" I\n¥ tasks_design... U 7 1\nv spec ° 72\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._\n@ spec_helper... U 74\nYL A1) Zs ## 4. Implement the Behaviour\no - @ todo_list_spec.rb U\nGemfile v\nGemfile.lock v 07_single_class_design > spec .‘.\"“fh’. list_spec.b ___\n> 08_debugging... * 30 todo_list = TodoList.new\n> 09_multi_class... ® 31 todo_list.add(\"Wash the car\")\n> 10_multi_class.. ® 32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n43 end\na4 end\n45 end\na6\n> TIMELINE\n"
  },
  {
    "seconds": 497,
    "text": "LN fuby — rspec_setup 08\nEXPLORER ¥ tasks_designmd U o @ todo_list.rb U ruby x +-@0a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2] # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tests  @7_single_class_design » rspec\ne AMU_LA0 Lo\\ GO - LIS UG - - -\n2400 screch ‘ 58  todo_list.list # => [“Wash the car®, “Wash the dog\"] Aokt URN.\n> 01_intro_and_git 59\no i e Pending: (Failures listed here are expected and do not affect your\n= s 60 #4 suite's status)\n> 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\") 1) TodoList given no tasks has an empty list\n> 05_debugging1 * 63  todo_list.add(“Wash the dog\") » 77‘:\"’2:2: S, SENKI\n> 06_single_clas... *® 64 todo_list.complete(“Wash the car\") Loy > 2 -\nDOz sow-Cor e 65 todo_list.list # => [“Wash the dog“] 2) TodoList given a task has the task in the list\nv lib ® 66 # Temporarily skipped with xit\n@& phone_book.... U 67 #5 # ./spec/todo_list_spec.rb:12\n@ todo_list.rb v 68 todo_list = TodoList.new\nv recipes . 69  todo_list.add(\"wash the car\") 3 Im:'““:aﬁ:;“s:\"o us::r:.:;\"h tasks in the list\n¥ phone_desig... U 70 ?t.)do_llst.conplete('uash the sheep”) # fails \"No such task.\" L # ./spec/todo_list_spec.rb:20\n¥ tasks_design... U n\nv spec . 72 4) TodoList when we complete a task removes the task from the lis\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._ t ‘ _\nA helper.... U 74 # Temporarily skipped with xit\nspec_| # ./spec/todo_list_spec.rb:29\nYL A1) Zs ## 4. Implement the Behaviour\n-rspec v @ todo_list_spec.rb U 5) TodolList when we try to r.c-:;ntn a non-existent task fails\nGemfile u # Temporarily skipped with xit\nOemilelock. U 07_single_class_design > spec > @ todo_list_specrd # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 30 todo_list = TodoList.new\n> 09_multi_class... » 31 todo_list.add(\"Wash the car\") Finished in 0.00954 seconds (files took 0.14187 seconds to load)\n> 10_multi_class.. * 32 todo_list.add(\"Wash the dog\") 13 examples, © failures, 5 pending\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] 07_single_class_design *l\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end\na4 end\n45 end\na6\n> TIMELINE\n"
  },
  {
    "seconds": 498,
    "text": "eo0ce 2sh — rspec_setup 08\nEXPLORER ¥ tasks_designmd U o @ todo_list.rb U zsh X ++- 08 -\nv RSPEC_SETUP _single_class_design > recl l:r~~'L L4 t.1f,k<.‘dos|cin md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design = rspec\nA AR ARSI K T A T\nsl 58  todo_list.list # => [“Wash the car®, “Wash the dog\"] et H g\n- cL ot 59 Pending: (Failures listed here are expected and do not affect your\n> 02_testing_bites ® 60 #4 A I8- P! y!\nsuite's status)\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... * 62 todo_list.add(\"Wash the car\") 1) TodoList given no tasks has an empty list\n> 05_debugging_1 * 63 todo_list.add(“Wash the dog\") # Tenporaxily skipped with xit\n> 06_single_clas... * 64  todo_list.complete(\"Wash the car\") R I80sciod s, Spec-shct\nAU 65  todo_list.list # => [“Wash the dog“] 2) TodoList given a task has the task in the list\nv lib . 66 # Temporarily skipped with xit\n@& phone_book.... U 67 #5 # ./spec/todo_list_spec.rb:12\n@ todo_list.rb V] 68 todo_list = TodoList.new\ne . 69 todo_list.add(\"Wash the car\") 3 If““:atg'“sm’:;t:‘:;\"\" tasks In the list\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\" L s jxc/todz_list_spec.m:?e\n¥ tasks_design... U n\nv spec . 72 4) TodoList when we complete a task removes the task from the lis\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._ e ‘ _ _\n@ o0 S T\nN ZS ## 4. Implement the Behaviouxr e LEAE_ PG -\n.rspec U 4 “;do_lm_smm U 5) TodolList when we try to complete a non-existent task fails\nGemfile u # Temporarily skipped with xit\nOmiialock v 07:svv\\§; L-_CI.J-,E-_.(.J:*,‘;)-V > spec > @ todo_list_spec.rb # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 26 end\n> 09_multi_class... * 27 Finished in 0.00954 seconds (files took 0.14187 seconds to load)\n> 10_multi_class... * 28 context “when we complete a task\" do 13 examples, © failures, 5 pending\n29 xit “removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design ~ ||\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Was] the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end |\n36 end\n37 |\n38 context \"when we try to complete a non-existent task\" do [\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the caxr\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n> TIMELINE 43 end\n"
  },
  {
    "seconds": 499,
    "text": "LN 2sh — rspec_setup 08\nEXPLORER ¥ tasks_designmd U o @ todo_list.rb U zsh X +-M0a -\nv RSPEC_SETUP _single_class_design > reci ;:r~~'; k3 mf,kf.idomzn md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design = rspec\nv s A s s el St s\n2100 scratch < 58 todo_list.list # => [“Wash the car”, “Wash the dog\"] SRS LT\n2 59 Pending: (Failures listed here are expected and do not affect your\n> 02_testing_bites ® 60 #4 A IS- P! y!\nsuite's status)\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\") 1) TodoList given no tasks has an empty list\n> 05_debugging_1 * 63 todo_list.add(“Wash the dog\") ¢ Temporarily skipped with xit\n> 06_single_clas... * 64  todo_list.complete(\"Wash the car\") Siz/epsc/baxb.iet spac-Thch\nAVE 65  todo_list.list # => [“Wash the dog\"] 2) TodoList given a task has the task in the list\nv lib o 66 # Temporarily skipped with xit\n@ phone_book.... U 67 #5 # ./spec/todo_list_spec.rb:12\n@ todo_list.rb u 68 todo_list = TodoList.new\ne 5 69 todo_list.add(“Wash the car\") 3) TodoList ‘4‘1’\"' RO, s \"“1\"\"‘\" tasks in the list\n¥ phone_desig... U 70  todo_list.complete(“Wash the sheep”) # fails \"No such task.\" : ijiéaz_itmlzget\n¥ tasks_design... U 7 K|\nv spec . 72 4) TodoList when we complete a task removes the task from the lis\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._ t ) _ _\nP i, e empebyrieg\no IR Zs ## 4. Implement the Behaviouxr ot o LGS APRE 250\n.rspec v @ todo_list_spec.rb U 5) TodoList m we try to complete a non-existent task fails\nGemfile U # Temporarily skipped with xit\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb # ./spec/todo_list_spec.rb:39\n108 deriora e : require \"todo_list\"\n> 09_multi_class... * Finished in 0.00954 seconds (files took 0.14187 seconds to load\nel T 3  RSpec.describe TodolList do B 13 examples, 0 failures, 5 p:nding )\n= = K context “given no tasks\" do\n5 xjt “has an empty list\" do 07_single_class_design » |\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new ™\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n> TIMELINE 19 context “given two tasks\" do\n"
  },
  {
    "seconds": 500,
    "text": "LN 1000_UiS1_spec,1b — rspec_setup 08\nIi\"’\\ EXPLORER ¥ tasks_designmd U o @ todo_list.rdb U zsh 8 -\nv RSPEC_SETUP _single_class_design > reci ;:r~~'; k3 mf,kf.idomzn md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design = rspec\nv s A s s el St s\n; D?'“\"'c\" < 58 todo_list.list # => [“Wash the car”, “Wash the dog\"] SRS LT\nX zz_':::;:n:;:: - 59 Pending: (Failures listed here are expected and do not affect your\n2 - = 60 #4 suite's status)\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\") 1) TodoList given no tasks has an empty list\n> 05_debugging_1 * 63 todo_list.add(“Wash the dog\") ¢ Temporarily skipped with xit\n> 06_single_clas... * 64  todo_list.complete(\"Wash the car\") Siz/epsc/baxb.iet spac-Thch\nAVE 65  todo_list.list # => [“Wash the dog\"] 2) TodoList given a task has the task in the list\nv lib o 66 # Temporarily skipped with xit\n@ phone_book.... U 67 #5 # ./spec/todo_list_spec.rb:12\n@ todo_list.rb u 68 todo_list = TodoList.new\ne 5 69 todo_list.add(“Wash the car\") 3) TodoList ‘4‘1’\"' RO, s \"“1\"\"‘\" tasks in the list\n¥ phone_desig... U 70 ?t.)do_llst.conplete('uash the sheep”) # fails \"No such task.\" L : ijiéaz_itmlzget\n¥ tasks_design... U 7\nv spec . 72 4) TodoList when we complete a task removes the task from the lis\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._ t ) _ _\ney T = eyl\no IR 75 ¢ .4. Inplement the Behaviour -/spec/todo_list_spec.xb:\n.rspec v @ todo_list_spec.rb U X - 5) TodoList m we try to complete a non-existent task fails\nGemfile U # Temporarily skipped with xit\nGemfile.lock v 07_sing l'_C|.J';5_fJL\"a‘.(:]I‘ spec ‘ todo_list_spec.rb # ./spec/todo_list_spec.rb:39\n108 deriora e : require \"todo_list L\n> 09_multi_class... * Finished in 0.00954 seconds (files took 0.14187 seconds to load)\nR ul cose-ih : Rs:::;:::c'r‘::e:o:zLiizk:? do || 13 examples, © failures, 5 pending\n5 ht “has an empty list\" do [ 07_single_class_design » []\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n> TIMELINE 19 context “given two tasks\" do\nmain® 0 A C 2 0 Ruby 3 Spe .\n"
  },
  {
    "seconds": 501,
    "text": "LN 25h — rspec_setup 08\nEXPLORER ¥ tasks_designmd U o @ todo_list.rb U 2sh X +~0D 8 -\nv RSPEC_SETUP _single_class_design > reci ;:r~~'; k3 mf,kf.idomzn md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design = rspec\nv s A s s el St s\n2100 scratch < 58 todo_list.list # => [“Wash the car”, “Wash the dog\"] SRS LT\n2 59 Pending: (Failures listed here are expected and do not affect your\n> 02_testing_bites ® 60 #4 A IS- P! y!\nsuite's status)\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\") 1) TodoList given no tasks has an empty list\n> 05_debugging_1 * 63 todo_list.add(“Wash the dog\") ¢ Temporarily skipped with xit\n> 06_single_clas... * 64  todo_list.complete(\"Wash the car\") Siz/epsc/baxb.iet spac-Thch\nAVE 65  todo_list.list # => [“Wash the dog\"] 2) TodoList given a task has the task in the list\nv lib o 66 # Temporarily skipped with xit\n@ phone_book.... U 67 #5 # ./spec/todo_list_spec.rb:12\n@ todo_list.rb u 68 todo_list = TodoList.new\ne 5 69 todo_list.add(“Wash the car\") 3) TodoList ‘4‘1’\"' RO, s \"“1\"\"‘\" tasks in the list\n¥ phone_desig... U 70 ?t.)do_llst.conplete('uash the sheep”) # fails \"No such task.\" L : ijiéaz_itmlzget\n¥ tasks_design... U 7\nv spec . 72 4) TodoList when we complete a task removes the task from the lis\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._ t ) _ _\nP i, e empebyrieg\no IR 75 04 .4. Inplement the Behaviour SRS SORNCAM L AReE - 20\n.rspec v @ todo_list_spec.rb U X 5) TodoList m we try to complete a non-existent task fails\nGemfile U # Temporarily skipped with xit\nGemfile.lock v 07_sing l'_C|.J';5_fJL\"a‘.(:]I‘ spec ‘ todo_list_spec.rb # ./spec/todo_list_spec.rb:39\n108 deriora e : require \"todo_list |4\n> 09_multi_class... * Finished in 0.00954 seconds (files took 0.14187 seconds to load\nel T 3  RSpec.describe TodolList do 13 examples, © failures, 5 p:nding )\n= = K context “given no tasks\" do\n5 it \"has an empty list\" do 07_single_class_design + rspec]]\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n> TIMELINE 19 context “given two tasks® do\n"
  },
  {
    "seconds": 502,
    "text": "LN 25h — rspec_setup 08\nEXPLORER ¥ tasks_designmd U o @ todo_list.rb U 2sh X +~0D 8 -\nv RSPEC_SETUP _single_class_design > reci ;:r~~'; k3 mf,kf.idomzn md > (2 # Tasks Class Design Recipe > (&) ## 3. Create Examples as Tests 07_single_class_design = rspec\nv s A s s el St s\n; D?'“\"'c\" < 58  todo_list.list # => [“Wash the car”, “Wash the dog\"] SRS LT\nX zz_':::;:n:;:: - 59 Pending: (Failures listed here are expected and do not affect your\n- = 60 #4 suite's status)\n> 03_single_met.. ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(“Wash the car\") 1) TodoList given no tasks has an empty list\n> 05_debugging_1 * 63 todo_list.add(“Wash the dog\") ¢ Temporarily skipped with xit\n> 06_single_clas... * 64  todo_list.complete(\"Wash the car\") Siz/epsc/baxb.iet spac-Thch\nAVE 65  todo_list.list # => [“Wash the dog\"] 2) TodoList given a task has the task in the list\nv lib o 66 # Temporarily skipped with xit\n@ phone_book.... U 67 #5 # ./spec/todo_list_spec.rb:12\n@ todo_list.rb u 68 todo_list = TodoList.new\ne 5 69 todo_list.add(“Wash the car\") 3) TodoList ‘4‘1’\"' RO, s \"“1\"\"‘\" tasks in the list\n¥ phone_desig... U 70 ?t.)do_llst.conplete('uash the sheep”) # fails \"No such task.\" : ijiéaz_itmlzget\n¥ tasks_design... U 7 I\nv spec . 72 4) TodoList when we complete a task removes the task from the lis\n@ phone_book... U 73 _Encode each example as a test. You can add to the above list as you go._ t ) _ _\ney T = eyl\no IR Zs ## 4. Implement the Behaviouxr ot o LGS APRE 250\n.rspec v @ todo_list_spec.rb U X 5) TodoList m we try to complete a non-existent task fails\nGemfile U # Temporarily skipped with xit\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb # ./spec/todo_list_spec.rb:39\n108 deriora e : require \"todo_list\" b\n> 09_multi_class... * Finished in 0.00954 seconds (files took 0.14187 seconds to load\nel T 3  RSpec.describe TodolList do 13 examples, © failures, 5 p:nding )\n= = K context “given no tasks\" do\n5 it \"has an empty list\" do 07_single_class_design + rspec\n6 todo_list = TodoList.new 1\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n> TIMELINE 19 context “given two tasks\" do\n"
  },
  {
    "seconds": 503,
    "text": "LN tasks_design.md — rspec_setup 08\nEXPLORER ¥ tasks_designmd U @ @ todo_list.rb U @O [(ash X a -\nv RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > 2 # Tasks Class Design Recipe > 5 ## 3. Create Examples as Tests\no CTUU_LAS T B WGSH CHE UUE S\n> 00_scratch . - ™ R \"\n5 101 ket sl i :: todo_list.listi#-m=>: [ \"Wosh:Ehe:cor”, - Wosh: the dog ] Finished in 6.06954 seconds (files took .14187 seconds to load)\n> 02_testing_bites ® e 13 examples, © failures, 5 pending\n203 aingle_met_® 61 todo_list = TodoList.new 07_single_class_design + rspec\n> 04_single_met... * 62 todo_list.add(\"Wash the car\") ceenen P\nGt ol 2 SO toto LSt add (s Nai theacpe ) Pending: (Failures listed here are expected and do not affect your\n> 06_single_clas... * 64 todo_list.complete(“Wash fthe car\"™) sme-g'stamg s (\nv 0Z_single_clas.. 65 todo_list.list # => [“Wash the dog\"]\nv lib 4 66 1) TodoList given a task has the task in the list\n@ phone_book.... U 67 #5 # Temporarily skipped with xit\n@ todo_listrb U 68  todo_list = TodoList.new ‘ # ./spec/todo_list_spec.rb:12\ni 69 todo_list.add(\"Wash the car\"\nN Semee: 2 ius d°'“st (1 : R t: ) T v 2) TodoList given two tasks has both tasks in the list\n¥ phone_desig... U O Sret(Sas 9 - Sheep fails such-sask. # Temporarily skipped with xit\n¥ tasks_design... U 71 | # ./spec/todo_list_spec.rb:20\nS - 72\n@ phone_book... U 73  _Encode each example as a test. You can add to the above list as you go._ 3) TodoList when we complete a task removes the task from the lis\n| - t\n@ spec_helper.... U #T ly sk ith xi\n75  ## 4. Implement the Behaviour IRpORSEILy, SAPRA, With | Kit\n@ todo_list_sp... U il = i # ./spec/todo_list_spec.rb:29\nSepae Y @ todo_list DU X\nGemfile u e 4) TodoList when we try to complete a non-existent task fails\n- 07_single_class_design > spec > @ todo_list_spec.rb # Temporarily skipped with xit\nGemfile.lock v x\nh 1 require \"todo_list\" # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 2 =\n>\nW_mlt'l_clasi ° 3  RSpec.describe TodoList do Failures:\n. ?\nRA00- UL cee; K context “given no tasks\" do\n5 it \"has an empty list\" do 1) TodoList given no tasks has an empty list\n6 todo_list = TodoList.new Failure/Error: expect(todo_list.list).to eq []\n7 expect(todo_list.list).to eq []\n8 end NoMethodError:\n9 s undefined method ‘list' for #<TodoList:0x00007fb29b8cc9b8>\n# ./spec/todo_list_spec.rb:7:in 'block (3 levels) in <top (req\n10 uired)>*\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Finished in 0.01445 seconds (files took 0.18091 seconds to load)\n13 todo_list = TodoList.new 13 examples, 1 failure, 4 pending\n14 todo_list.add(\"Wash the car\") Failed o\n15 expect(todo_list.list).to eq [\"Wash the car\"] Aliedlexampies:\n16 end xspec ./spec/todo_list_spec.xb:5 # TodoList given no tasks has an e\n17 end mpty list\n18\n> TIMELINE 19 context “\"given two tasks\" do 07_single_class_design » []\n"
  },
  {
    "seconds": 504,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X @ am - zsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb\n> 00_scratch B 1 class TodoList i}\n> 01_intro_and_git 2 0“4 Finished in 0.00954 seconds (files took 0.14187 seconds to load)\n> 02_testing_bites 3 13 examples, © failures, 5 pending\n> 03_single_met... ® 07_single_class_design » rspec\n> 04_single_met... * wa h oo s PR\n> 05_debugging 1 * I \" A\n> 06_single_clas... ® Per_wdlng: (Failures listed here are expected and do not affect your\ni suite's status)\nv 07Z_single_clas... *\nv lib ® 1) TodoList given a task has the task in the list\n@ phone_book.... U # Temporarily skipped with xit\n4 todo_listrb U # ./spec/todo_list_spec.rb:12\ni ; & 2) TodoList given two tasks has both tasks in the list\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:26\nv spec .\n@ phone_book-. U B 3) TodoList when we complete a task removes the task from the lis\n@ spec_helper.... U # Temporarily skipped with xit\n@ todo_list_sp... U # ./spec/todo_list_spec.rb:29\nFepec Y @ todo_list DU\nGemfile u i 4) TodoList when we try to complete a non-existent task fails\n. 07_single_class_design > spec > @ todo_list_spec.rb # Temporarily skipped with xit\nGemfilelock U ;\no 1 require \"todo_list\" # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 2 -\n>\nW_mltvl_class ‘ 3  RSpec.describe TodoList do Failures:\n- 2\nCAUO_ [N Cwess 4 context “\"given no tasks\" do\n5 it \"has an empty list\" do 1) TodoList given no tasks has an empty list\n6 todo_list = TodoList.new Failure/Error: expect(todo_list.list).to eq []\n7 expect(todo_list.list).to eq []\n8 ond NoMethodError:\n9 o undefined method ‘list' for #<TodoList:0x00007fb29b8ccIb8>\n# ./spec/todo_list_spec.rb:7:in “block (3 levels) in <top (req\n10 uired)>\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Finished in 0.01445 seconds (files took 0.18091 seconds to load)\n13 todo_list = TodoList.new 13 examples, 1 failure, 4 pending\n14 todo_list.add(\"Wash the car\") Failed les:\n15 expect(todo_list.list).to eq [\"Wash the car\"] S_lecjexamples:\n16 end xrspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n17 end mpty list\n18\n> TIMELINE 19 context “given two tasks\" do 07_single_class_design ~ []\nmain® 0AC n2 Cold Spaces:2 f LF Ruby <& Spe .\n"
  },
  {
    "seconds": 505,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X @ am - zsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 end . Finished in 0.60954 seconds (files took 0.14187 seconds to load)\n> 02_testing_bites 3 I ‘ 13 examples, © failures, 5 pending\n> 03_single_met... ® 07_single_class_design » rspec\n> 04_single_met... * /o PO\n> 05_debugging 1 * \" A\n> 06_single_clas... ® Per_wdlrlwg: (Failures listed here are expected and do not affect your\ni suite's status)\nv 07Z_single_clas... * }\nv lib ® | 1) TodoList given a task has the task in the list\n@ phone_book.... U # Temporarily skipped with xit\n4 todo_listrb U # ./spec/todo_list_spec.rb:12\ni ; & 2) TodoList given two tasks has both tasks in the list\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:26\nv spec .\n@ phone_book-. U B 3) TodoList when we complete a task removes the task from the lis\n@ spec_helper.... U # Temporarily skipped with xit\n@ todo_list_sp... U # ./spec/todo_list_spec.rb:29\nFepec Y @ todo_list DU\nGemfile u i 4) TodoList when we try to complete a non-existent task fails\n. 07_single_class_design > spec > @ todo_list_spec.rb # Temporarily skipped with xit\nGemfilelock U ;\nS ” 1 require \"todo_list\" # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 2 -\n>\nW_mltvl_class ‘ 3  RSpec.describe TodoList do Failures:\n- 2\nCAUO_ [N Cwess 4 context “\"given no tasks\" do\n5 it \"has an empty list\" do 1) TodoList given no tasks has an empty list\n6 todo_list = TodoList.new Failure/Error: expect(todo_list.list).to eq []\n7 expect(todo_list.list).to eq []\n8 ond NoMethodError:\n9 o undefined method ‘list' for #<TodoList:0x00007fb29b8ccIb8>\n# ./spec/todo_list_spec.rb:7:in “block (3 levels) in <top (req\n10 .\nuired)>\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Finished in 0.01445 seconds (files took 0.18091 seconds to load)\n13 todo_list = TodoList.new 13 examples, 1 failure, 4 pending\n14 todo_list.add(\"Wash the car\") Failed les:\n15 expect(todo_list.list).to eq [\"Wash the car\"] S_lecjexamples:\n16 end xrspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n17 end mpty list\n18\n> TIMELINE 19 context “given two tasks\" do 07_single_class_design ~ []\nmain® (N Ln3,Col1 Spaces:2 F LF Ruby {3 Spe s\n"
  },
  {
    "seconds": 506,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X @ am - zsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb\n> 00_scratch B 1 class TodoList|\n> 01_intro_and_git 2 end Finished in 0.00954 seconds (files took 0.14187 seconds to load)\n> 02_testing_bites ® 3 13 examples, © failures, 5 pending\n. > 03_single_met... ® 07_single_class_design » rspec\n> 04_single_met... * G o s PR\n> 05_debugging 1 * -\n> 06_single_clas... ® Per_\\dirlwg: (Failures listed here are expected and do not affect your\ni suite's status)\nv 07Z_single_clas... *\nv lib ® 1) TodoList given a task has the task in the list\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrb U # ./spec/todo_list_spec.rb:12\nN . 2) TodoList given two tasks has both tasks in the list\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:26\nv spec .\n@ phone_book... U \" 3) TodoList when we complete a task removes the task from the lis\n@ spec_helper.... U # Temporarily skipped with xit\n@ todo_list_sp... U # ./spec/todo_list_spec.rb:29\nFepec Y @ todo_list DU\nGemfile v s 4) TodoList when we try to complete a non-existent task fails\n- 07_single_class_design > spec > @ todo_list_spec.rb # Temporarily skipped with xit\nGemfile.lock v 5\n2 1 require \"todo_list\" # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 2 b\n>\nW‘“\"\"‘“\" ‘ 3  RSpec.describe TodoList do Failures:\n. 2\nCAUO_ [N Cwess 4 context “\"given no tasks\" do\n5 it \"has an empty list\" do 1) TodoList given no tasks has an empty list\n6 todo_list = TodoList.new Failure/Error: expect(todo_list.list).to eq []\n7 expect(todo_list.list).to eq []\n8 ond NoMethodError:\n9 o undefined method ‘list' for #<TodoList:0x00007fb29b8ccIb8>\n# ./spec/todo_list_spec.rb:7:in “block (3 levels) in <top (req\n10 .\nuired)>\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Finished in 0.01445 seconds (files took 0.18091 seconds to load)\n13 todo_list = TodoList.new 13 examples, 1 failure, 4 pending\n14 todo_list.add(\"Wash the car\") Failed les:\n15 expect(todo_list.list).to eq [\"Wash the car\"] ol (s\n16 end xspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n17 end mpty list\n18\n> TIMELINE 19 context “given two tasks\" do 07_single_class_design - []\n= 0 A C A1 Cali5 Soaces? ; LF Ruby <3 Spe .\n"
  },
  {
    "seconds": 507,
    "text": "eoce todo_list.rb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_listrbu @ @ am - zsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb\n> 00_scratch . 1 class TodoList B\n> 01_intro_and_git 2 ¢.g| ‘ | Finished in 0.00954 seconds (files took ©.14187 seconds to load)\n> 02_testing_bites 3 emd 13 examples, © failures, 5 pending\n> 03_single_met... ® b 07_single_class_design » rspec\n> 04_single_met... * b s PR\n> 05_debugging 1 * a .\n> 06_single_clas... ® Per_wdulwg: (Failures listed here are expected and do not affect your\ni suite's status)\nv 07Z_single_clas... * }\nv lib ® | 1) TodoList given a task has the task in the list\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrb U # ./spec/todo_list_spec.rb:12\ni ; & 2) TodoList given two tasks has both tasks in the list\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:26\nv spec .\n@ phone_book-. U . 3) TodoList when we complete a task removes the task from the lis\n@ spec_helper.... U # Temporarily skipped with xit\n@ todo_list_sp... U # ./spec/todo_list_spec.rb:29\nFepec Y @ todo_list DU\nGemfile u i 4) TodoList when we try to complete a non-existent task fails\n. 07_single_class_design > spec > @ todo_list_spec.rb # Temporarily skipped with xit\nGemfilelock U :\nS ” 1 require \"todo_list\" # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 2 -\n>\nW_mltvl_class ‘ 3  RSpec.describe TodoList do Failures:\n- 2\nCAUO_ [N Cwess 4 context “\"given no tasks\" do\n5 it \"has an empty list\" do 1) TodoList given no tasks has an empty list\n6 todo_list = TodoList.new Failure/Error: expect(todo_list.list).to eq []\n7 expect(todo_list.list).to eq []\n8 ond NoMethodError:\n9 o undefined method ‘list' for #<TodoList:0x00007fb29b8ccIb8>\n# ./spec/todo_list_spec.rb:7:in “block (3 levels) in <top (req\n10 .\nuired)>\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Finished in 0.01445 seconds (files took 0.18091 seconds to load)\n13 todo_list = TodoList.new 13 examples, 1 failure, 4 pending\n14 todo_list.add(\"Wash the car\") Failed les:\n15 expect(todo_list.list).to eq [\"Wash the car\"] S_lecjexamples:\n16 end xrspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n17 end mpty list\n18\n> TIMELINE 19 context \"given two tasks” do 07_single_class_design - []\n"
  },
  {
    "seconds": 508,
    "text": "o0 todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X @ am - zsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb\n> 00_scratch . 1 class TodoList\n> 01_intro_and_git 2 def list L Finished in 0.00954 seconds (files took 0.14187 seconds to load)\n> 02_testing_bites 3 .m‘ 13 examples, © failures, 5 pending\n> 03_single_met... ® 4 ond 07_single_class_design » rspec\n> 04_single_met... 5 B\n> 05_debugging 1 * \" A\n> 06_single_clas... ® Per_wdulwg: (Failures listed here are expected and do not affect your\ni suite's status)\nv 07Z_single_clas... * |\nv lib ® | 1) TodoList given a task has the task in the list\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrb U # ./spec/todo_list_spec.rb:12\nb ; & 2) TodoList given two tasks has both tasks in the list\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:26\nv spec .\n@ phone_book-. U : 3) TodoList when we complete a task removes the task from the lis\n@ spec_helper.... U # Temporarily skipped with xit\n@ todo_list_sp... U # ./spec/todo_list_spec.rb:29\nFepec Y @ todo_list DU\nGemfile u i 4) TodoList when we try to complete a non-existent task fails\n. 07_single_class_design > spec > @ todo_list_spec.rb # Temporarily skipped with xit\nGemfilelock U ;\ng 1 require \"todo_list\" # ./spec/todo_list_spec.rb:39\n> 08_debugging... * 2 -\n>\nW_mltvl_class ‘ 3  RSpec.describe TodoList do Failures:\n- 2\nCAUO_ [N Cwess 4 context “\"given no tasks\" do\n5 it \"has an empty list\" do 1) TodoList given no tasks has an empty list\n6 todo_list = TodoList.new Failure/Error: expect(todo_list.list).to eq []\n7 expect(todo_list.list).to eq []\n8 ond NoMethodError:\n9 o undefined method ‘list' for #<TodoList:0x00007fb29b8ccIb8>\n# ./spec/todo_list_spec.rb:7:in “block (3 levels) in <top (req\n10 .\nuired)>\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Finished in 0.01445 seconds (files took 0.18091 seconds to load)\n13 todo_list = TodoList.new 13 examples, 1 failure, 4 pending\n14 todo_list.add(\"Wash the car\") Failed les:\n15 expect(todo_list.list).to eq [\"Wash the car\"] S_lecjexamples:\n16 end xrspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n17 end mpty list\n18\n> TIMELINE 19 context “given two tasks\" do 07_single_class_design ~ []\n= oA C i Saresi F-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 509,
    "text": "o0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb\n> 00_scratch - 1 class TodoList\n> 01_intro_and_git 2 def list — Finished in 0.00954 seconds (files took 0.14187 seconds to load)\n> 02_testing_bites ® 3 end 13 examples, © failures, 5 pending\n\" > 03_single_met... * 4 end 07_single_class_design » rspec\n> 04_single_met... * 5 e\n> 05_debugging 1 * a\n> 06_single_clas... ® Per_\\dlrlwg. (Failures listed here are expected and do not affect your\n: suite's status)\nv 07Z_single_clas... *\nv lib * 1) TodoList given a task has the task in the list\n@& phone_book.... U # Temporarily skipped with xit\n4 todo_listrb U # ./spec/todo_list_spec.rb:12\nAo ] o 2) TodoList given two tasks has both tasks in the list\n% phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:26\nv spec s\n@ phone_book-. U . 3) TodolList when we complete a task removes the task from the lis\n@ spec_helper.... U # Temporarily skipped with xit\n@ todo_list_sp... U # ./spec/todo_list_spec.rb:29\nfepec Y @ todo_list DU\nGemfile v RS 4) TodoList when we try to complete a non-existent task fails\n: 07_single_class_design > spec > @ todo_list_spec.rb # Temporarily skipped with xit\nGemfile.lock v 5\n\" \" # ./spec/todo_list_spec.rb:39\n3108 Herloora e : require \"todo_list L b\n>\n09_multvl_class ‘ 3  RSpec.describe TodoList do Failures:\n. s\nPAJ0-IINRL Clese 4 context “given no tasks\" do\n5 it \"has an empty list” do 1) TodoList given no tasks has an empty list\n6 todo_list = TodoList.new Failure/Exrror: expect(todo_list.list).to eq []\n7 expect(todo_list.list).to eq []\n8 end NoMethodError:\n9 ondd undefined method ‘list’ for #<TodoList:0x00007fb29b8ccIb8>\n# ./spec/todo_list_spec.rb:7:in 'block (3 levels) in <top (req\n10 uired)>\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Finished in 0.01445 seconds (files took 0.18091 seconds to load)\n13 todo_list = TodoList.new 13 examples, 1 failure, 4 pending\n14 todo_list.add(\"Wash the car\") Failed Jos:\n15 expect(todo_list.list).to eq [\"Wash the car\"] - ecjexamples:\n16 end xrspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n17 end mpty list\n18\n> TIMELINE 19 context \"given two tasks\" do 07_single_class_design ~ I\nmain® 0 A % Spel .\n"
  },
  {
    "seconds": 510,
    "text": "o0ce ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch ° 1 class TodoList 1\n> 01_intro_and_git 2 def list L\n> 02_testing_bites * 3 end\nb > 03_single_met... ® 4 end\n> 04_single_met... ® 5\n> 05_debugging 1 *\n> 06_single_clas... *\nv 07_single_clas.. *\nv lib .\n@ phone_book.... U\n@ todo_list.rb u\nv recipes .\n¥ phone_desig... U\n¥ tasks_design... U\nv spec s\n@ phone_book... U\n@ spec_helper... U\n4 todo_list_sp... U\ne - @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n3108 Herloora s ; require \"todo_list\" L\ne 09_mun‘|_closs... ‘ 3 RSpec.describe TodolList do\n24J0- UL clese_ 4 context “given no tasks\" do\n5 it \"has an empty list\" do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\nA 16 end\n17 end\n18\nBl > TIMELINE 19 context “given two tasks\" do\nmain® 0A0 s Spe s\n"
  },
  {
    "seconds": 511,
    "text": "o0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U <o [ zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList ki & Bhs w4 PR\n> 01_intro_and_git 2 def list Ly v\n> 02_testing_bites ® 3 end Pending: (Failures listed here are expected and do not affect your\n& - = suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given a task has the task in the list\n> 05_debugging_1 * # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv OLsingle_cles... © 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb u\n3 3) TodoList when we complete a task removes the task from the lis\nv recipes b4 t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec s\n@ phone_book-. U 4) TodoList when we try to complete a non-existent task fails\n>, & # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.xb:39\n@ todo_list_sp... U\nepec Y @ todo_list_spec.ib U\nGemlfile u Failures:\n- 07_single_class_design > spec > @ todo_list_spec.rb\nLo s & 1 require \"todo_list\" 1) TodoList Jﬁven no tasks has an empty list\n> 08_debugging... * 2 p— Failure/Error: expect(todo_list.list).to eq []\n>\nO 3  RSpec.describe TodolList do .\n> 10_multi_class... * 3 > expected: []\n= 4 context “given no tasks\" do got: nil\n5 it \"has an empty list\" do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in 'block (3 levels) in <top (req\n8 end uired)>'\ne ot Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") rspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] mpty list\n16 end 07_single_class_design » ||\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\nmain* 0AC s Spe! s\n"
  },
  {
    "seconds": 512,
    "text": "o0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U <o [ zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList | o & Bh,d w4 RN\n> 01_intro_and_git 2 def list ] v\n5102 testiie bites| ® 3 end X || Pending: (Failures listed here are expected and do not affect your\n. - ng. I suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given a task has the task in the list\n> 05_debugging_1 * # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv OLsingle_cles... © 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb u\n3 3) TodoList when we complete a task removes the task from the lis\nv recipes b4 t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec s\n@ phone_book-. U 4) TodoList when we try to complete a non-existent task fails\n>, & # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.xb:39\n@ todo_list_sp... U\nepec Y @ todo_list_spec.ib U\nGemlfile u Failures:\n- 07_single_class_design > spec > @ todo_list_spec.rb\nLo s & 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 p— Failure/Error: expect(todo_list.list).to eq [)\n>\nO 3  RSpec.describe TodolList do .\n> 10_multi_class... * 3 > expected: []\n= 4 context “\"given no tasks\" do got: nil\n5 it \"has an empty list” do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in 'block (3 levels) in <top (req\n8 end uired)>'\ne ndt Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") rspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] mpty list\n16 end 07_single_class_design » ||\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\nmain* 0AC s Spe! s\n"
  },
  {
    "seconds": 513,
    "text": "eoce 1odo_list.rb — rspec_setup 08\nli‘\\ EXPLORER -+ ¥ tasks_design.md U @ todo_listro U @ WM [azsh X a -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList B-..... Fo«\nG e z ot [T Penai (Fail listed h d and d t affect\n: . 3 zot ending: (Failures listed here are expected and do not affect your\n. > 02_testing_bites © 4 suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv OLsingle_cles... © 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb u\n3 3) TodoList when we complete a task removes the task from the lis\nv recipes L t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec s\n@ phone_book-. U 4) TodoList when we try to complete a non-existent task fails\n>, & # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.xb:39\n@ todo_list_sp... U\nepec Y @ todo_list_spec.ib U\nGemlfile u Failures:\n- 07_single_class_design > spec > @ todo_list_spec.rb\nLo s & 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 p— Failure/Error: expect(todo_list.list).to eq [)\n>\nO 3  RSpec.describe TodolList do .\n> 10_multi_class... * p > expected: []\n< context “given no tasks\" do got: nil\n5 it \"has an empty list\" do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in 'block (3 levels) in <top (req\n8 end uired)>'\ni ndt Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “\"given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") rspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] mpty list\n16 end 07_single_class_design ~ []\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\nmain® 0 A n Ruby 3 Spe .\n"
  },
  {
    "seconds": 514,
    "text": "eoe todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ @ am - 2sh a8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList i e A RO\n> 01_intro_and_git 2 def list T\n> 02_testing_bites ® 3 Tetumn UI ‘ :52::?5'522\\11;‘)]“5 listed here are expected and do not affect your\nBl > 03_single e 4 end\n_single_met...\n> 04_single_met... * S end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:12\nM OZsingle_cles=1® 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n4 todo_listrb U\n5 3) TodoList when we complete a task removes the task from the lis\nv recipes . t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodoList when we try to complete a non-existent task fails\ng i # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nrspec Y @ todo_list_spec.ib U .\nGemlfile u e Failures:\n. 07_single_class_design > spec todo_list_spec.rb\nCor.ezs U 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 - Failure/Error: expect(todo_list.list).to eq []\n>\n00 mul clise” e 3 RSpec.describe TodolList do e\n> 10_multi_class... * ,, - expected: []\n4 context “given no tasks\" -do got: nil\n5 it \"has an empty list\" do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in ‘block (3 levels) in <top (req\n8 end uired)>'\nS anc Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") xspecli/spec/todo_list_spec.zb:s # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] gty list\n16 end 07_single_class_design - []\n17 end\n18\n> TIMELINE 19 context “\"given two tasks\" do\nmain® 0AC n ol 14 paces:2 UTF-8 LF Ruby {3 Spe! 0\n"
  },
  {
    "seconds": 515,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER -+ ¥ tasks_design.md U @ todo_listrb U x zsh x +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodolList s e A A\n> 01_intro_and_git 2 def list |\n> 02_testing_bites ® 3 return [] Pending: (Failures listed here are expected and do not affect your\ne = = suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nM OZsingle_cles=1® 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n4 todo_listrb U\n5 3) TodoList when we complete a task removes the task from the lis\nv recipes . t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodoList when we try to complete a non-existent task fails\ng i # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nrspec Y @ todo_list_spec.ib U I\nGemlfile u Failures:\ns 07_single_class_design > spec > @ todo_list_spec.rb\nCor.ezs U 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 - Failure/Error: expect(todo_list.list).to eq [)\n>\n00 mul clise” e 3 RSpec.describe TodolList do e\n> 10_multi_class... * ,, - expected: []\nK context “given no tasks\" do got: nil\n5 it \"has an empty list\" do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in ‘block (3 levels) in <top (req\n8 end uired)>'\nS anc Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") rspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] mpty list\n16 end 07_single_class_design - [\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\n— Y 3 Spe g\n"
  },
  {
    "seconds": 516,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER -+ ¥ tasks_design.md U @ todo_listrb U zsh x +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodolList i e A A\n> 01_intro_and_git 2 def list L\n> 02_testing_bites ® 3 return [] Pending: (Failures listed here are expected and do not affect your\ne = = suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nM OZsingle_cles=1® 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n4 todo_listrb U\n5 3) TodoList when we complete a task removes the task from the lis\nv recipes . t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodoList when we try to complete a non-existent task fails\ng i # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nrspec Y @ todo_list_spec.ib U I\nGemlfile u Failures:\ns 07_single_class_design > spec > @ todo_list_spec.rb\nCor.ezs U 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 - Failure/Error: expect(todo_list.list).to eq [)\n>\n00 mul clise” e 3 RSpec.describe TodolList do e\n> 10_multi_class... * ,, - expected: []\nK context “given no tasks\" do got: nil\n5 it \"has an empty list\" do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in ‘block (3 levels) in <top (req\n8 end uired)>'\n= anc Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") rspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] mpty list\n16 end 07_single_class_design - [\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\n— Y 3 Spe g\n"
  },
  {
    "seconds": 517,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER -+ ¥ tasks_design.md U @ todo_listrb U x zsh x +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodolList i e A A\n> 01_intro_and_git 2 def list | Y\n> 02_testing_bites ® 3 return [] Per_adirlag. (Failures listed here are expected and do not affect your\n> suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nM OZsingle_cles=1® 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n4 todo_listrb U\n5 3) TodoList when we complete a task removes the task from the lis\nv recipes . t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodoList when we try to complete a non-existent task fails\ng i # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nrspec Y @ todo_list_spec.ib U\nGemlfile u Failures:\ns 07_single_class_design > spec > @ todo_list_spec.rb\nCor.ezs U 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 - Failure/Error: expect(todo_list.list).to eq [)\n>\n00 mul clise” e 3 RSpec.describe TodolList do e\n> 10_multi_class... * S - expected: []\n4 context “given no tasks\" -do got: nIl\n5 it \"has an empty list\" do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in ‘block (3 levels) in <top (req\n8 end uired)>'\nS anc Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") rspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] mpty list\n16 end 07_single_class_design - [\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\n— Y 3 Spe g\n"
  },
  {
    "seconds": 518,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER -+ ¥ tasks_design.md U @ todo_listrb U 2sh X +- @08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodolList i e A A\n= il \"~ Pending: (Failures listed h ted and do not affect\no 3 Tetumn ending: (Failures listed here are expected and do not affect your\ng > 02_testing_bites * 0 suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\n0L single_cles—. @ 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n& todo_listrb U\n5 3) TodoList when we complete a task removes the task from the lis\nv recipes b4 B\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec .\n'@ | phians Eocka 1 4) TodoList when we try to complete a non-existent task fails\ng i # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nrspec Y @ todo_list_spec.ib U\nGemfile u Failures:\nL 07_single_class_design > spec > @ todo_list_spec.rb\nCor.ezs U 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 - Failure/Error: expect(todo_list.list).to eq [)\n>\n08 Nl chee e 3  RSpec.describe TodolList do 2\n> 10_multi_class... * A AR IR clpected: [\ncontext “given no- tasks\" -do got: nil\n5 it \"has an empty list” -do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in “block (3 levels) in <top (req\n8 end uired)>’\n= anc Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") rspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] wty Mst\n16 end 07_single_class_design - [\n17 end\n18\n> TIMELINE 19 context “\"given two tasks\" do\nmain* (] [ s Spe’ .\n"
  },
  {
    "seconds": 519,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER <+ % tasks_design.md U @ todo_listrb U zsh x +- Mg -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o A\n> 01_intro_and_git 2 def list [\n> 02_testing_bites ® 3 return [] Pending: (Failures listed here are expected and do not affect your\nP - = suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv OLsingle_cles... © 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb u\n: 3) TodoList when we complete a task removes the task from the lis\nVv recipes . X\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phone_book-. U 4) TodolList when we try to complete a non-existent task fails\n: = # Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nfepec Y @ todo_list_spec.ib U\nGemlfile u Failures:\ns 07_single_class_design > spec > @ todo_list_spec.rb\nCor.dezs U 1 require \"todo_list\" 1) TodoList given no tasks has an empty list\n> 08_debugging... * 2 - Failure/Error: expect(todo_list.list).to eq []\n>\n00 Nl chee 3  RSpec.describe TodolList do x\n> 10_multi_class... * 3 < expected: [] I\n4 context “given no tasks\" do got: nil\n5 it \"has an empty list\"” do\n6 todo_list = TodoList.new (compared using ==)\n7 expect(todo_list.list).to eq [] # ./spec/todo_list_spec.rb:7:in \"block (3 levels) in <top (req\n8 end uired)>'\no o Finished in 0.03144 seconds (files took 0.14267 seconds to load)\n10 13 examples, 1 failure, 4 pending\n11 context “given a task\" do\n12 xit \"has the task in the list\" do Failed examples:\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\") xspec ./spec/todo_list_spec.rb:5 # TodoList given no tasks has an e\n15 expect(todo_list.list).to eq [\"Wash the car\"] mpty list\n16 end 07_single_class_design - [\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\nmain® 0AC 3 Spe .\n"
  },
  {
    "seconds": 520,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 3 +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch - 1 class TodoList 1\n> 01_intro_and_git 2 def list [\n> 02_testing_bites ® 3 return []\nBl > 03_single_met.. ® 4 end\n> 04_single_met... ® 5 end\n> 05_debugging_1 * 6\n> 06_single_clas... *\nv 07_single_clas.. *\nv lib .\n@ phone_book.... U\nd todo_list.rb u\nv recipes .\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp... U\n-repec Y @ todo_list_spec.ib U\nGemfile v\nGemflelock U 07_single_class, r:.--.j,-v > spec . todo_list_spec.rb\n108 Her oot s : require \"todo_list ||\ng 09_mun‘|_class... ‘ 3 RSpec.describe TodoList do\n24J0-URL-clese__ 3 4 context “given no tasks\"”-do\n5 it \"has an empty list\"” do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\ng 16 end\n17 end\n18\nB > TIMELINE 19 context \"given two tasks\" do\nmain® 0A0 3 Spe 7\n"
  },
  {
    "seconds": 521,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList e s 2l I\n> 01_intro_and_git 2 def list [\n> 02_testing_bites ® 3 return [] Per)dirl\\g: (Failures listed here are expected and do not affect your\nP suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging 1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv OLsingle_cles... © 2) TodoList given two tasks has both tasks in the list\nv lib ° # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb u\n% e : . 3) TodoList when we complete a task removes the task from the lis\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n8 b backo R 1 4) TodoList when we try to_cmlttt a non-existent task fails\n# Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nSeesc - @ todo_list_spec.rb U @ e A\nGemfile v Finished in 0.01073 seconds (files took 0.14741 seconds to load)\nGemile.lock v 07_single_class, m--,.glyv > spec ‘ todo_list_spec.rb 13 examples, © failures, 4 pending\n> 08_debugging... * : zequire-“todo:list — 07_single_class_design - ||\ng W_MR‘I_CICS!... ‘ 3 RSpec.describe TodoList do\n24J0-URL-clese__ 3 4 context “given no tasks\"”-do\n5 it \"has an empty list\"” do\n6 todo_list = TodoList.new\n7 expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n> TIMELINE 19 context \"given two tasks\" do\n— 0 A C 3 Spel .\n"
  },
  {
    "seconds": 522,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList ot e s ORI\n> 01_intro_and_git 2 def list ki\n> 02_testing_bites ® 3 return [] Per)dirl\\g: (Failures listed here are expected and do not affect your\nP suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging 1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv OLsingle_cles... © 2) TodoList given two tasks has both tasks in the list\nv lib ° # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb u\n% e : . 3) TodoList when we complete a task removes the task from the lis\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n8 b backo R 1 4) TodoList when we try to_cmlttt a non-existent task fails\n# Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nSeesc - @ todo_list_spec.rb U e A\nGemfile v Finished in 0.01073 seconds (files took 0.14741 seconds to load)\nGemile.lock v 07_single_class, m--,f,n > spec ‘ todo_list_spec.rb 13 examples, © failures, 4 pending\n> 08_debugging... * : zequire-“todo Tist = 07_single_class_design ~ I\ng W_MR‘I_CICS!... ‘ 3 RSpec.describe TodoList do\n24J0-URL-clese__ 3 4 context “given no tasks\"”-do\n5 it \"has an empty list\"” do\n6 todo_list = TodoList.new\n7 exrect(todo_lxst.list).to eq []\n8 end\n9 end\n10\n11 context “given a task\" do\n12 xit \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n> TIMELINE 19 «scontext-“given:two:tasks\":do\n— 0 A C 3 Spel .\n"
  },
  {
    "seconds": 523,
    "text": "[ N ] 2sh — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList ol A\n> 01_intro_and_git 2 def list L\n> 02_testing_bites ® 3 return [] Per_\\dhl\\g. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv OLsingle_cles... © 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n& todo_listrb U\n: 3) TodoList when we complete a task removes the task from the lis\nv recipes . , 4\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phone_book-. U 4) TodolList mn n_t!y to_cmltto a non-existent task fails\n# Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.rb:39\n@ todo_list_sp... U\nSeesc - @ todo_list_spec.rb U - A\nGemfile v Finished in 0.01073 seconds (files took 0.14741 seconds to load)\nGemfile.lock v 07_sing |~vcm',5: design > spec > @ todo_list_spec.rb 13 examples, © failures, 4 pending\nN [ i e 7 o7-single_class_cesin -\n> 09_multi_class... * B = W e\n5370, mukilcioser: B expect(todo_list.list).to eq []\n8 end\n9 end\n10\n11 context “\"given a task\" do\n12 xit “\"has the task in the list\" do\n13 ] todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context \"given two tasks\" do\n20 xit \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n> TIMELINE \" \"\n"
  },
  {
    "seconds": 524,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh x 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodoList i nct e O,\n> 01_intro_and_git 2 def list L\n> 02_testing_bites ® 3 return [] Per_\\dtrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:12\nVv 07_single_clas... ® 2) TodoList given two tasks has both tasks in the list\nVv lib ° # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_listrb U\n> 3) TodoList when we complete a task removes the task from the lis\nv recipes . t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodolList -Mn n_try to complete a non-existent task fails\n# Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.xb:39\n@ todo_list_sp... U\nopac Y @ todo_list_spec.ib\nGemfile V] Aot ppnc Dt no Finished in 0.01073 seconds (files took 0.14741 seconds to load)\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, © failures, 4 pending\n5 it \"has an empty list\" do\nS 6 todo_list \"pYZdoList new 07_single_class_design » []\n> 09_multi_class... = = d_ 2ist .24 p\n> 10.multi_class... ® expect(todo_list.list).to eq [] u\n8 end\n9 end .\n10\n11 context \"given a task\" do\n12 fit “has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n> TIMELINE . todo st add(\" h the dog”\nmain* (] [ n12,Col6 Spaces: 2 TF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 525,
    "text": "[ N todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh x 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodoList i nct e O,\n> 01_intro_and_git 2 def list L\n> 02_testing_bites ® 3 return [] Per_\\dtrlag: (Failures listed here are expected and do not affect your\n2 suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.rb:12\nVv 07_single_clas... ® 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb [V}\no s & . 3) TodoList when we complete a task removes the task from the lis\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodolList -Mn n_try to complete a non-existent task fails\n# Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.xb:39\n@ todo_list_sp... U\nrs| u\nGe:ev:'r:la B B0 inished in 0.01073 seconds (files took 0.14741 seconds to load)\nGemfile.lock v o«_:: ng! \"'m.\"”u:;ﬂ:\\.;'\\\"fﬁm_,.;o\\d.ik;‘-.;x.)'f;'riu L 13 examples, © failures, 4 pending\n> 08_debugging... * 8 end 07_single_class_design - []\n> 09_multi_class... 9 end\n> 10_multi_class... * 10 B\n11 context “\"given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_)list.add(\"uash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit “has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car”, “Wash the dog\"]\n> TIMELINE 25 end\nmain® 0AC n12,Col6 Spaces: 2 TF-8 LF Ruby 3 Spe Q\n"
  },
  {
    "seconds": 526,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList o .k e SRR\n> 01_intro_and_git 2 def list L\n> 02_testing_bites ® 3 return [] Per_\\dtrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:12\nVv 07_single_clas... ® 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb [V}\n> 3) TodoList when we complete a task removes the task from the lis\nv recipes . t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodolList -Mn n_try to complete a non-existent task fails\n# Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.xb:39\n@ todo_list_sp... U\nSepsG . @ todo_list_spec.rb U x o i\nGemfile v Finished in 0.01073 seconds (files took 0.14741 seconds to load)\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, © failures, 4 pending\n10\n> 08_debugging... * 5 5\n% 11 context “\"given a task\" do 07_single_class_design -+ I\n> 09_multi_class... *\n: 12 it \"has the task in the list\" do\n> 10_multi_class... * -\n13 todo_list = TodoList.new\n14 todo_list.add(\"wash the car\") I\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 4 ontext \"when we complete k\" do\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 527,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList o .k e SRR\n> 01_intro_and_git 2 def list L\n> 02_testing_bites ® 3 return [] Per_\\dtrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given a task has the task in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:12\nVv 07_single_clas... ® 2) TodoList given two tasks has both tasks in the list\nv lib . # Temporarily skipped with xit\n@ phone_book.... U # ./spec/todo_list_spec.rb:20\n@ todo_list.rb [V}\n> 3) TodoList when we complete a task removes the task from the lis\nv recipes . t\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:29\nv spec B\n@ phane_book-. U 4) TodolList -Mn n_try to complete a non-existent task fails\n# Temporarily skipped with xit\n@ spec_helper.... U # ./spec/todo_list_spec.xb:39\n@ todo_list_sp... U\nSepsG . @ todo_list_spec.rb U x o i\nGemfile v Finished in 0.01073 seconds (files took 0.14741 seconds to load)\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, © failures, 4 pending\n10\n> 08_debugging... * 5 5\n% 11 context “\"given a task\" do 07_single_class_design -+ I\n> 09_multi_class... *\n: 12 it \"has the task in the list\" do\n> 10_multi_class... * =\n13 todo_list = TodoList.new\n14 todo_list.add(\"wash the car\") I\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 4 ontext \"when we complete a task™ do\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 528,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +- D& -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - tspec'\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def list L\n> 02_testing_bites ® 3 return []\nBl > 03_single_met.. ® 4 end\n> 04_single_met... ® 5 end\n> 05_debugging_1 * 6\n> 06_single_clas... *\nv 07_single_clas.. *\nv lib .\n@ phone_book.... U\n@ todo_listrb U\nv recipes .\n¥ phone_desig... U\n¥ tasks_design... U\nv spec N\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp... U\ne . @ todo_list_spec.rb U x\nGemfile u\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 15\n> 09_mult_class... ® 11 context “\"given a task\" do\nTk eae h 12 it \"has the task in the list\" do kg\n13 todo_list = TodoList.new\n14 todo_list.add(\"wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit “has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car”, \"Wash the dog\"]\n4 25 end\n26 end\n27\n> TIMELINE 4 ontext \"when we complete a task™ do\n== OAO 3 Spel .\n"
  },
  {
    "seconds": 529,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U 2sh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList Ve dr i FIEN\n> 01_intro_and_git 2 def list Ly\n> 02_testing_bites ® 3 return [] Per_\\dirlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 end 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® # ./spec/todo_list_spec.xb:20\nVv 0Zsingle_clas... 2) TodoList when we complete a taskIn-ov.s the task from the lis\nv lib Kl t\n@ phone_book.... U # Temporarily skipped with xit\n& todo_list.rb v # ./spec/todo_list_spec.rb:29\ne, . by 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec u @ todo_list_spec.rb U Failure/Exror: todo_list.add(\"wash the car\")\nGemfile v a NoMethodE:\n: 07_single_class_design > spec todo_list_spec.rb oMe Iror:\n5 os‘:::\"mk s 10 undefined method \"add’ for #<TodoList:0x06007fb9321510e8>\n_debugging... * § +14:4n ° ( i\n: 1 context \"given-a-task®-do # .(spec/todo_hst_spoc.m.u.m block (3 levels) in <top (re\n> 09_multi_class... * . . quired)>\nS0 ok elese B 12 it \"has the task in the list\" do\n- = 13 todo_list = TodoList.new Finished in 0.01215 seconds (files took 0.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\n. snd rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\ns ask in the list\n19 context “given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ‘I\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE ; ontext \"when we complete a task” do\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 530,
    "text": "eooce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList o e w sk TP\n> 01_intro_and_git 2 def list [\n> 02 tosting._bites ® 3 return (] Per_adxrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given two tasks has both tasks in the list\n> 05_debugging 1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:20\nVv 07_single_clas... ® 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@& phone_book.... U # Temporarily skipped with xit\n@& todo_listrb U # ./spec/todo_list_spec.rb:29\nNy < y 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp.. U 1) TodoList given a_task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Error: tJdo_list.add(“Hash the car\")\nGemfile v a NoMethodE:\n: 07_single_class_design > spec todo_list_spec.rb oMethodExrror:\nL O?z:\"““ Y undefined method \"add’ for #<TodoList:0x00007£b9321550e8>\n_debugging... * . ey <\n1 context \"given a task\"-do # A{spec/todo_l1st_spec.rb.14.1n block (3 levels) in <top (re\n> 09_multi_class... * \" - quired)>\nNP PR 12 it \"has the task in the list\" do\ne 13 todo_list = TodoList.new Finished in ©.01215 seconds (files took 0.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\n7\n= Soc xspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n18 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE . ontext \"when we complete a task” do\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 531,
    "text": "eooce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList o e w sk TP\n> 01_intro_and_git 2 def list [\n> 02 tosting._bites ® 3 return (] Per_adxrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given two tasks has both tasks in the list\n> 05_debugging 1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:20\nVv 07_single_clas... ® 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@& phone_book.... U # Temporarily skipped with xit\n@& todo_listrb U # ./spec/todo_list_spec.rb:29\nNy < y 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec U g todo_list_spec.rb U Failure/Exror: todo list.add(*Washithe cat'y\nGemfile v a NoMethodE:\n: 07_single_class_design > spec todo_list_spec.rb oMethodExrror:\nL O?z:\"““ Y undefined method \"add’ for #<TodoList:0x00007£b9321550e8>\n_debugging... * . ey <\n1 context \"given a task\"-do # A{spec/todo_l1st_spec.rb.14.1n block (3 levels) in <top (re\n> 09_multi_class... * \" - quired)>\nNP PR 12 it \"has the task in the list\" do\ne 13 todo_list = TodoList.new Finished in 0.01215 seconds (files took 0.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\n17 end .\nxspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n18 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE . ontext \"when we complete a task\" do\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 532,
    "text": "eooce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList o e w sk TP\n> 01_intro_and_git 2 def list [\n> 02 tosting._bites ® 3 return (] Per_adxrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given two tasks has both tasks in the list\n> 05_debugging 1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:20\nVv 07_single_clas... ® 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@& phone_book.... U # Temporarily skipped with xit\n@& todo_listrb U # ./spec/todo_list_spec.rb:29\nNy < ¢ 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec U g todo_list_spec.rb U Failure/Exror: todo list.add(*Wash the car*)\nGemfile v o\n: 07_single_class_design > spec todo_list_spec.rb NoMethodExror:\nL 0:‘:::\"“\" Y undefined method ‘add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * : R R <\n1 context \"given a task\"-do # A{spec/todo_l1st_spec.rb.14.1n block (3 levels) in <top (re\n> 09_multi_class... * \" - quired)>\nNP PR 12 it \"has the task in the list\" do\ne 13 todo_list = TodoList.new Finished in ©.01215 seconds (files took 0.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\n17 end .\nxspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n18 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE . ontext \"when we complete a task” do\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 533,
    "text": "eooce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList [ LFaxx\n> 01_intro_and_git 2 def list I s}\n> 02 tosting._bites ® 3 return (] Per_adxrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S end 1) TodoList given two tasks has both tasks in the list\n> 05_debugging 1 * 6 # Temporarily skipped with xit\n> 06_single_clas... # ./spec/todo_list_spec.rb:20\nVv 07_single_clas... ® 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@& phone_book.... U # Temporarily skipped with xit\n@& todo_listrb U # ./spec/todo_list_spec.rb:29\nNy < ¢ 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp.. U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exror: todo_list.add(“wash the car\")\nGemfile v a NoMethodE:\n: 07_single_class_design > spec todo_list_spec.rb e IIoI:\nL 0:‘:::\"“\" Y undefined method “add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * i :14:in ° i\n1 context \"given a task\"-do # A{spec/todo_l1st_spec.rb.14.1n block (3 levels) in <top (re\n> 09_multi_class... * \" - quired)>\nNP PR 12 it \"has the task in the list\" do\ne 13 todo_list = TodoList.new Finished in ©.01215 seconds (files took 0.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\n7\n= Soc xspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n18 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE . ontext \"when we complete a task” do\nmain® 0AC s Spe .\n"
  },
  {
    "seconds": 534,
    "text": "eoce 1odo_list.rb — rspec_setup 08\nli\"ﬁ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ @B a - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList | T -\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] E :52:;?§.sé§:\\x‘:\\)1res listed here are expected and do not affect your\nBl > 03_single_met.. ® 4 end\n> 04_single_met... * S I 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 end # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nVv 07_single_clas... ® 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U # Temporarily skipped with xit\n@& todo_list.rb v # ./spec/todo_list_spec.rb:29\nNy < y 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: todo_list.add(“Wash the car\")\nGemfile v a NoMethodE:\n: 07_single_class_design > spec todo_list_spec.rb e IIoI:\nL O?z:\"““ Y undefined method “add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * - Rk <\n1 context \"given a task\"-do # A{spoc/todo_lxst_spoc.rb.ll.ln block (3 levels) in <top (re\n> 09_multi_class... * \" - quired)>\nNP PR 12 it \"has the task in the list\" do\ne 13 todo_list = TodoList.new Finished in ©.01215 seconds (files took 0.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\n7\n= Soc xspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n18 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|]\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE . ontext \"when we complete a task” do\nmain® 0AC paces Ruby s Spe .\n"
  },
  {
    "seconds": 535,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tam - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o  w TR\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return (] Per_mxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add # Temporarily skipped with xit\n> 06_single_clas... ® 7 4 | # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® $3iend\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U # Temporarily skipped with xit\n@& todo_list.rb u # ./spec/todo_list_spec.rb:29\nLy ; e 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: todo_list.add(“wash the car\")\nGemfile v a NoMethodE:\n5 07_single_class_design > spec todo_list_spec.rb oMe: IIOI:\nA 0:‘;’::\"“\" 1 undefined method “add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * h e s\n1 context \"given a task\"-do # A(spoc/todo_lxst_spoc.rb414.1n block (3 levels) in <top (re\n> 09_multi_class... * - S quired)>\nPR 12 it \"has the task in the list\" do\nB 13 todo_list = TodoList.new Finished in 0.61215 seconds (files took ©.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\not O rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n38 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|]\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain* 0AC \" ol paces:2 UTF-8 LF Ruby s Spe! -\n"
  },
  {
    "seconds": 536,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tam - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o  w TR\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return (] Per_mxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end [ |\n> 04_single_met... * S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add # Temporarily skipped with xit\n> 06_single_clas... : DL | # ./spec/todo_list_spec.rb:20\n. el\nVv 07_single_clas... ® 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U a8 # Temporarily skipped with xit\n@& todo_list.rb u # ./spec/todo_list_spec.rb:29\nLy ; e 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: todo_list.add(“wash the car\")\nGemfile v a NoMethodE:\n5 07_single_class_design > spec todo_list_spec.rb oMe: IIOI:\nA 0:‘;’::\"“\" 1 undefined method “add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * h e s\n1 context \"given a task\"-do # A(spoc/todo_lxst_spoc.rb414.1n block (3 levels) in <top (re\n> 09_multi_class... * - S quired)>\nPR 12 it \"has the task in the list\" do\nB 13 todo_list = TodoList.new Finished in 0.61215 seconds (files took ©.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\not O rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n38 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|]\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0 ( 7, Col 5 paces: 2 - 1 Ruby s Spe .\n"
  },
  {
    "seconds": 537,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tam - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o  w TR\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return (] Per_mxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end [ |\n> 04_single_met... * S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add # Temporarily skipped with xit\n> 06_single_clas... ® 7 I | # ./spec/todo_list_spec.rb:20\nv 07_single_clas... $ snd\n-single_clas... 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U a8 # Temporarily skipped with xit\n@& todo_list.rb u # ./spec/todo_list_spec.rb:29\nLy ; e 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: todo_list.add(“wash the car\")\nGemfile v a NoMethodE:\n5 07_single_class_design > spec todo_list_spec.rb oMe: IIOI:\nA 0:‘;’::\"“\" 1 undefined method “add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * h e s\n1 context \"given a task\"-do # A(spoc/todo_lxst_spoc.rb414.1n block (3 levels) in <top (re\n> 09_multi_class... * - S quired)>\nPR 12 it \"has the task in the list\" do\nB 13 todo_list = TodoList.new Finished in 0.61215 seconds (files took ©.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\not O rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n38 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|]\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0 ( 7, Col 5 paces: 2 - 1 Ruby s Spe .\n"
  },
  {
    "seconds": 538,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tam - zsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o  w TR\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return (] Per_mxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end [ |\n> 04_single_met... * S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... $ sod\n-single_clas... 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U a8 # Temporarily skipped with xit\n@& todo_list.rb u # ./spec/todo_list_spec.rb:29\nLy ; e 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: todo_list.add(“wash the car\")\nGemfile v a NoMethodE:\n5 07_single_class_design > spec todo_list_spec.rb oMe: IIOI:\nA 0:‘;’::\"“\" 1 undefined method “add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * h e s\n1 context \"given a task\"-do # A(spoc/todo_lxst_spoc.rb414.1n block (3 levels) in <top (re\n> 09_multi_class... * - S quired)>\nPR 12 it \"has the task in the list\" do\nB 13 todo_list = TodoList.new Finished in ©.61215 seconds (files took ©.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\not O rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n38 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|]\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\") 1\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain* 0AC ] paces:2 UTF-8 LF Ruby s Spe! -\n"
  },
  {
    "seconds": 539,
    "text": "eoce 2sh — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o o s TR\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return (] Per_uﬂrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end Lt\n> 04_single_met... * S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas.. ® g nd\n-single_clas... 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 # Temporarily skipped with xit\n@& todo_list.rb u # ./spec/todo_list_spec.rb:29\nLy ; e 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: todo_list.add(“wash the car\")\nGemfile v a NoMethodE:\n5 07_single_class_design > spec todo_list_spec.rb oMe: IIOI:\nA 0:‘;’::\"“\" 1 undefined method “add’ for #<TodoList:0x00007£b93215£0e8>\n_debugging... * i :14:4n ° i\n1 context \"given a task\"-do # A(spoc/todo_lxst_spcc.rb414.1n block (3 levels) in <top (re\n> 09_multi_class... * - S quired)>\nPR 12 it \"has the task in the list\" do\nB 13 todo_list = TodoList.new Finished in ©.61215 seconds (files took ©.14158 seconds to load)\n14 todo_list.add(\"Wash the car\") 13 examples, 1 failure, 3 pending\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end Failed examples:\n17 end\nrspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n38 ask in the list\n19 context “\"given two tasks\" do\n20 xit \"has both tasks in the list\" do 07_single_class_design ~|\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\") 1\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE n “when K\"\n"
  },
  {
    "seconds": 540,
    "text": "eo0ce 2sh — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_listrb U zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - ||\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return []\n> 03_single_met... ® 4 end L\n> 04_single_met... ® S\n> 05_debugging_1 * 6 def add\n> 06_single_clas... * ?\nv 07_single_clas.. * 8 end\n“ lib = 9 end\n@ phone_book.... U 28\n& todo_listrb U\nv recipes .\n¥ phone_desig... U\n¥ tasks_design... U\nv spec =\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp... U\nspec Y @ todo_list_spec.rb U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 16\n> 00_multl_class.. ® 11 conte?(t \"given a task\" do\nST T A 12 it \"has the task in the list\" do | |\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\") 1\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE - *when K\"\n"
  },
  {
    "seconds": 541,
    "text": "eo0ce 2sh — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U > zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList s ' e AN\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] Per_\\dxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end Ld\n> 04_single_met... * s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® g gnd\nZAOeCCee 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 # Temporarily skipped with xit\n@& todo_listrb U # ./spec/todo_list_spec.rb:29\nNy : + 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec =\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Error:\nGemfile v def add\nOemilelock. U 07_single_class_design > spec > @ todo_list_spec.rb L\n> 08_debugging... * 16\n11 context “\"given a task\" do\n> 09_multi_class... * - - AxgumentExror:\n> 10_multi_class... * 12 it \"has the task in the list\" do - wrong number of arguments (given 1, expected 0)\n13 todo_list = TodoList.new # ./1ib/todo_list.rb:6:4n “add’\n14 todo_list.add(\"Wash the car\") # ./spec/todo_list_spec.rb:14:in 'block (3 levels) in <top (re\n15 expect(todo_list.list).to eq [\"Wash the car\"] quired)>'\n16 end\nFinished in 0.01182 seconds (files took 0.14216 seconds to load)\n17 end\n18 13 examples, 1 failure, 3 pending\n19 context “\"given two tasks\" do Failed examples:\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:12 # TodolList given a task has the t\n22 todo_list.add(\"Wash the car\") ask in the list\n23 todo_list.add(\"Wash the dog\") 07_single_class_design + I\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE - *when .\n"
  },
  {
    "seconds": 542,
    "text": "eo0ce 2sh — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U > zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList s ' e AN\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] Per_\\dxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end Ld\n> 04_single_met... * s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® g gnd\nZAOeCCee 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 # Temporarily skipped with xit\n@& todo_listrb U # ./spec/todo_list_spec.rb:29\nNy : + 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec =\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Error:\nGemfile v def add\nGemflelock U 07_single_class_design > spec > @ todo_list_spec.rb L\n> 08_debugging... * 16\n11 context “\"given a task\" do\n> 09_multi_class... * - - ArgumentExroxr:\n> 10_multi_class.. * 12 it \"has the task in the list\" do - wrong number of guments (given 1, expected 0)\nS 13 todo_list = TodoList.new # ./1ib/todo Hst.z:b:\\n *add’\n14 todo_list.add(\"Wash the car\") # ./spec/todo_list_spec.rb:14:in 'block (3 levels) in <top (re\n15 expect(todo_list.list).to eq [\"Wash the car\"] quired)>'\n16 end\nFinished in 0.01182 seconds (files took 0.14216 seconds to load)\n17 end\n18 13 examples, 1 failure, 3 pending\n19 context “\"given two tasks\" do Failed examples:\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:12 # TodolList given a task has the t\n22 todo_list.add(\"Wash the car\") ask in the list\n23 todo_list.add(\"Wash the dog\") 07_single_class_design + I\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE - *when .\n"
  },
  {
    "seconds": 543,
    "text": "eo0ce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X @ am - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B s el\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] Per_\\dxrlag. (Failures listed here are expected and do not affect your\npa _ suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S | 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 det add I | # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 2 gnd\n=aNoeCcees 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 19 # Temporarily skipped with xit\n@ todo_listrb U # ./spec/todo_list_spec.rb:29\nNt vy ) ¥ 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec =\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exrror:\nGemfile v def add\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb -\n> 08_debugging... * 16\n11 context “\"given a task\" do\n> 09_multi_class... * - — AxgumentExror:\n> 10_multi_class... * 12 it \"has the task-in the 1ist\" do - wrong number of arguments (given 1, expected 0)\n13 todo_list = TodoList.new # ./1ib/todo_list.rb:6:4n “add’\n14 todo_list.add(\"Wash the car\") # ./spec/todo_list_spec.rb:14:in 'block (3 levels) in <top (re\n15 expect(todo_list.list).to eq [\"Wash the car\"] quired)>’\n16 end\nFinished in 0.01182 seconds (files took 0.14216 seconds to load)\n17 end\n18 13 examples, 1 failure, 3 pending\n19 context “given two tasks\" do Failed examples:\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n22 todo_list.add(\"Wash the car\") ask in the list\n23 todo_list.add(\"Wash the dog\") 07_single_class_design + D\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte \"when we complete a task\" do\nmain® 0AC 6, Col 10 . F Ruby s Spe .\n"
  },
  {
    "seconds": 544,
    "text": "eoce todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrbU @ tam - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B-........Foex\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] Per_\\dxrlag. (Failures listed here are expected and do not affect your\npa suite's status)\n> 03_single_met... ® 4 end T\n> 04_single_met... * S | 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 det add(t]) | # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® g sind\n=aNoeCcees 9 end 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 19 # Temporarily skipped with xit\n@ todo_listrb U # ./spec/todo_list_spec.rb:29\nNt vy ) ¥ 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec =\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Error:\nGemfile u def add\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb L\n> 08_debugging... * 16\n11 context “\"given a task\" do\n> 09_multi_class... * - — AxgumentExror:\n> 10_multi_class... * 12 it \"has the task in the 1list\" do - wrong number of arguments (given 1, expected 0)\n13 todo_list = TodoList.new # ./1ib/todo_list.rb:6:4n \"add’\n14 todo_list.add(\"Wash the car\") # ./spec/todo_list_spec.rb:14:in 'block (3 levels) in <top (re\n15 expect(todo_list.list).to eq [\"Wash the car\"] quired)>’\n16 end\nFinished in 0.01182 seconds (files took 0.14216 seconds to load)\n17 end\n18 13 examples, 1 failure, 3 pending\n19 context “given two tasks\" do Failed examples:\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n22 todo_list.add(\"Wash the car\") ask in the list\n23 todo_list.add(\"Wash the dog\") 07_single_class_design + D\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte \"when we complete a task\" do\nmain® 0AC 5 1 . F Ruby &3 Spe .\n"
  },
  {
    "seconds": 545,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER =+ ¥ tasks_design.md U @ todo_listrb U X o zsh x a8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList s )\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] Per_ldxrlag. (Failures listed here are expected and do not affect your\ne suite's status)\n> 03_single_met... ® 4 end T\n> 04_single_met... * 5 | 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 1 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 ad\n=IO e e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n& phone_book.... U g8 # Temporarily skipped with xit\n@ todo_listrb U ¢ ./spec/todo_list_spec.rb:29\nb . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror:\nGemfile v i def add\nGemilelock. U 07_single_class_design > spec > @ todo_list_spec.rb Ly\n> 08_debugging... * 16\n11 context “given a task\" do\n> 09_multi_class... * = - ArgumentExroxr:\n> 10_multi_class... * 0z 1t \"has: the -task- in-the: 11st%:do = wrong number of arguments (given 1, expected 0)\n=S 13 todo_list = TodoList.new # ./1ib/todo_list.rb:6:1n ‘add’\n14 todo_list.add(\"Wash the car\") # ./spec/todo_list_spec.rb:14:in ‘block (3 levels) in <top (re\n15 expect(todo_list.list).to eq [\"Wash the car\"] quired)>*\n16 end\nFinished in 0.01182 seconds (files took 0.14216 seconds to load)\n17 end = .\n18 13 examples, 1 failure, 3 pending\n19 context “given two tasks\" do Failed examples:\n20 xit “\"has both- tasks in the list\" do\n21 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n22 todo_list.add(\"Wash the car\") ask in the list\n23 todo_list.add(\"Wash the dog\") 07_single_class_design -+ D\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte \"whe e complete a task\" do\nmain® 0AC n6,Col15 Spaces:2 UTF-8 LF Ruby s Spe! L\n"
  },
  {
    "seconds": 546,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER =+ ¥ tasks_design.md U @ todo_listrb U X o zsh x a8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList P )\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] Per_ldxrlag. (Failures listed here are expected and do not affect your\ne suite's status)\n> 03_single_met... ® 4 end [ |\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 ad\n=IO e e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n& phone_book.... U g8 # Temporarily skipped with xit\n@ todo_listrb U ¢ ./spec/todo_list_spec.rb:29\nb . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U o 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror:\nGemfile v def add\nGemilelock. U 07_single_class_design > spec > @ todo_list_spec.rb Ly\n> 08_debugging... * 16\n11 context “given a task\" do\n> 09_multi_class... * = - ArgumentExroxr:\n> 10_multi_class... * 0z 1t \"has: the -task- in-the: 11st%:do = wrong number of arguments (given 1, expected 0)\n=S 13 todo_list = TodoList.new # ./1ib/todo_list.rb:6:1n ‘add’\n14 todo_list.add(\"Wash the car\") # ./spec/todo_list_spec.rb:14:in ‘block (3 levels) in <top (re\n15 expect(todo_list.list).to eq [\"Wash the car\"] quired)>*\n16 end\nFinished in 0.01182 seconds (files took 0.14216 seconds to load)\n17 end = .\n18 13 examples, 1 failure, 3 pending\n19 context “given two tasks\" do Failed examples:\n20 xit “\"has both- tasks in the list\" do\n21 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n22 todo_list.add(\"Wash the car\") ask in the list\n23 todo_list.add(\"Wash the dog\") 07_single_class_design -+ D\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte \"whe e complete a task\" do\nmain* 0AC n7 Col1 Spaces:2 UTF-8 LF Ruby s Spe! L\n"
  },
  {
    "seconds": 547,
    "text": "[ N 2sh — rspec_setup 08\nEXPLORER <« ¥ tasks_design.md U @ todo_listrb U zsh X +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList s )\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return [] Per_ldxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end Ld\n> 04_single_met... ® > 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... * A\n=SNoe-cess e e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 # Temporarily skipped with xit\n& todo_listrb U # ./spec/todo_list_spec.rb:29\nb . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror:\nGemfile v def add\nGemilelock. U 07_single_class_design > spec > @ todo_list_spec.rb Ly\n> 08_debugging... ® 10 1\n11 context “given a task\" do\n> 09_multi_class... * = - ArgumentExroxr:\n> 10_multi_class... * 12 it \"has the task in the 1list® do i1 wrong number of arguments (given 1, expected 0)\n=S 13 todo_list = TodoList.new # ./1ib/todo_list.rb:6:1n ‘add’\n14 todo_list.add(\"Wash the car\") # ./spec/todo_list_spec.rb:14:in ‘block (3 levels) in <top (re\n15 expect(todo_list.list).to eq [\"Wash the car\"] quired)>*\n16 end\nFinished in 0.01182 seconds (files took 0.14216 seconds to load)\n17 end = .\n18 13 examples, 1 failure, 3 pending\n19 context “given two tasks\" do Failed examples:\n20 xit “\"has both- tasks in the list\" do\n21 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n22 todo_list.add(\"Wash the car\") ask in the list\n23 todo_list.add(\"Wash the dog\") 07_single_class_design » I\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE = “wh \"\n"
  },
  {
    "seconds": 548,
    "text": "eoce ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby X +- 0D a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch - 1 class TodoList 1\n> 01_intro_and_git 2 def list\n> 02_testing_bites ® 3 return []\nBl > 03_single_met.. ® 4 end | {\n> 04_single_met... * 5\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... * 7\nv 07_single_clas.. * 8 end\n« lib = 9 end\n@ phone_book.... U 2\n@ todo_list.rb u\nv recipes .\n¥ phone_desig... U\n¥ tasks_design... U\nv spec B\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp... U\n) . @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * e\n> 09_mult_class... ® 11 corftext “given a task\" do\n0 ik eieseh 12 it \"has the task in the list\" do ||\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\")\n16 end\n17 end\n18\n19 context “\"given two tasks” do\n20 xit “\"has both- tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\nA 25 end\n26 end\n; 27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® oAO0 s Spe .\n"
  },
  {
    "seconds": 549,
    "text": "eoce 2sh — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o dnidinah b PREW\n> 01_intro_and_git 2 def list\n.02 tosting._bites ® 3 return [) Per_\\dirlwg. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end L\n> 04_single_met... 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... * 4 ad\n~SNgre_CI08... e e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 # Temporarily skipped with xit\n4 todo_listrb U # ./spec/todo_list_spec.rb:29\nb . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: expect(todo_list.list).to eq [“Wash the car”]\nGemfile v ) e }\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;z:: bwash the car\"]\n> 08_debugging... * 10 .\n11 context “given a task\" do\n> 09_multi_class... * h - (compared using ==)\n> 10_multi_class... * 12 it as the task in the 1list® do i1 # ./spec/todo_list_spec.rb:15:in ‘\"block (3 levels) in <top (re\n<SS 13 todo_list = TodoList.new quired)>'\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 -\n1 end Failed examples:\n18\n19 context “given two tasks” do xspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new i _\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ [I\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE = wh \"\n"
  },
  {
    "seconds": 550,
    "text": "e0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U 2sh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList e\n> 01_intro_and_git 2 def list\n> 02_testing_bites 3 return [] Per_uﬁrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end L\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 end\n= i st we C ete a task removes the t: rom t s\n9 S e 2) TodoList when we compl K he task from the 1i\nv lib . t\n@ phone_book.... U 2 # Temporarily skipped with xit\n& todo_list.rb u # ./spec/todo_list_spec.rb:29\nMl . v 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile v . — =\nOoniclock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zgzlbwash the car\"]\n> 08_debugging... * 18 ’\n11 context “given a task\" do\n> 09_multi_class... o - (compared using ==)\nAl 12 g N the sk U0 L # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\n= e 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n. = Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ) )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - I\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte “when we complete a task\" do\nmain® 0AC s Spe *\n"
  },
  {
    "seconds": 551,
    "text": "e0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U 2sh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList e\n> 01_intro_and_git 2 def list\n> 02_testing_bites 3 return [] Per_uﬁrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end L\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 end\n-single_clas... S e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 2 # Temporarily skipped with xit\n& todo_list.rb u # ./spec/todo_list_spec.rb:29\nMl . v 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile v . . — = I\nGendisllock v 07_single_class_design > spec > @ todo_list_spec.rb expec;z:: E]Has the car”]\n> 08_debugging... * 18 ’\n11 context “given a task\" do\n> 09_multi_class... o - (compared using ==)\nAl 12 g N the sk U0 L # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\n= e 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n. = Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ) )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - I\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte “when we complete a task\" do\nmain® 0AC s Spe *\n"
  },
  {
    "seconds": 552,
    "text": "e0ce todo_list.sb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X B a-- zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList e\n> 01_intro_and_git 2 def list\n> 02_testing_bites 3 return [] J Per_uﬁrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end 1 |\n> 04_single_met... * 5 I | 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 end\n-single_clas... S e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 2 # Temporarily skipped with xit\n& todo_list.rb u # ./spec/todo_list_spec.rb:29\nDL ) 4 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile v . . =\nGemilelock: U 07_single_class_design > spec > @ todo_list_spec.rb expec;zc:: hwash the car\"]\n> 08_debugging... * 18 ’\n11 context “given a task\" do\n> 09_multi_class... o - (compared using ==)\nAl 12 g N the sk U0 L # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\n= s 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n. = Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ) )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete:a task\" do\nmain® 0 A aces Ruby {3 Spe 0\n"
  },
  {
    "seconds": 553,
    "text": "e0ce todo_list.sb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X B a-- zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList - JRRIELE LFrrx\n> 01_intro_and_git 2 def list\n> 02_testing_bites 3 return [] T Per_uﬁrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end 1\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 end\n-single_clas... S e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 2 # Temporarily skipped with xit\n& todo_list.rb u # ./spec/todo_list_spec.rb:29\nDL ) 4 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile v . . =\nGemilelock: U 07_single_class_design > spec > @ todo_list_spec.rb expec;z:: E]Hash the car\"]\n> 08_debugging... * 18 ’\n11 context “given a task\" do\n> 09_multi_class... * o - (compared using ==)\nAl 12 g N the sk U0 L # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\n= s 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n. = Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ) )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte “when we complete a task\" do\nmain® 0 [ ‘ 8 yaces Ruby s Spe! .\n"
  },
  {
    "seconds": 554,
    "text": "e0ce todo_list.sb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @ am - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList - JRRIELE LFrrx\n> 01_intro_and_git 2 drf list\n> 02_testing_bites 3 return [] T Per_uﬁrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 end\n-single_clas... S e 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 2 # Temporarily skipped with xit\n& todo_list.rb u # ./spec/todo_list_spec.rb:29\nDL ) 4 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec u @ todo_list_spec.rb U Failure/Exror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile v . . =\nGemilelock: U 07_single_class_design > spec > @ todo_list_spec.rb expec;z:: E]Hash the car\"]\n> 08_debugging... * 18 ’\n11 context “given a task\" do\n> 09_multi_class... * o - (compared using ==)\nAl 12 g N the sk U0 L # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\n= s 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n. = Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ) )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 onte “when we complete a task\" do\nmain® 0 [ ‘ 8 yaces Ruby s Spe! .\n"
  },
  {
    "seconds": 555,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @ m - zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList oo LFrrx\n> 01_intro_and_git 2 Idef 1ist\n> 02_testing_bites ® 3 return [] 1l Perydirlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 aad\n~ngre_cies... S and 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U a8 # Temporarily skipped with xit\n@ todo_list.rb u # ./spec/todo_list_spec.rb:29\nMl . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Error: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u 7 . ,\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 )\n11 context “given a task\" do\n> 09_multi_class... E = (compared using ==)\nS 70 ki clesenh pe atahasjthestasksinrtheplist 2o LI # ./spec/todo_list_spec.rb:15:in block (3 levels) in <top (re\nEiS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n1 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new I )\n22 todo_list.add(\"Wash the car\") 07_single_class_design = [|\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0AC nd, Col6 Spaces:2 TF-8 LF Ruby s Spe! 0\n"
  },
  {
    "seconds": 556,
    "text": "o0 todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ o - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList | ——\n> 01_intro_and_git B | | : e\n> 02_testing_bites ® 3 :Eriu::rlag.sé;:::\\;res isted here are expected and do not affect your\nBl > 03_single_met.. * 4 def add(task)\n> 04_single_met... * s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 end # Temporarily skipped with xit\n> 06_single_clas... ® : end ] # ./spec/todo_list_spec.rb:20\nVv 07_single_clas... 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_list.rb u # ./spec/todo_list_spec.rb:29\nMl . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Error: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u 7 . ,\nGemflelock U 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 :\n11 context “given a task\" do\n> 09_multi_class... * E - (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the 1ist\" do - # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\nEiS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n= Ci Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new I )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC n2 Col3 Spaces:2 TF-8 LF Ruby s Spe! '\n"
  },
  {
    "seconds": 557,
    "text": "o0 todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ o - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList (]\n> 01_intro_and_git 2 : e\n> 02_testing_bites ® 3 1 Per_ujirlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... * 4 def add(task) -\n> 04_single_met... * s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 ® 6 end J | # Temporarily skipped with xit\n> 06_single_clas... ® : end # ./spec/todo_list_spec.rb:20\nVv 07_single_clas... 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_list.rb u # ./spec/todo_list_spec.rb:29\nMl . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Error: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u 7 . ,\nGemflelock U 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 )\n11 context “given a task\" do\n> 09_multi_class... E = (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the 1ist\" do - # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\n13 todo_list = TodoList.new quired)>'\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n= Ci Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new I )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC n 0|6 Spaces: 2 TF-8 LF Ruby s Spe! '\n"
  },
  {
    "seconds": 558,
    "text": "o0 todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ o - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList (]\n> 01_intro_and_git 2 I S o\n> 02_testing_bites ® 3 :Eri\\(::rlag.sé;:::\\;res isted here are expected and do not affect your\nil > 03_single_met.. o a4 def add(task)\n> 04_single_met... * s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 end = # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv OF sinole clese. ® 8 def list\n~ngre_cies... 9 retamm: [ 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U - O # Temporarily skipped with xit\n& todo_listrb U 3 anc # ./spec/todo_list_spec.rb:29\nMl . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Error: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u 7 . ,\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]was the car”]\n> 08_debugging... * 10\n11 context “given a task\" do\n> 09_multi_class... * E - (compared using ==)\nS 70 ki clesenh pe atahasjthestasksinrtheplist 2o LI # ./spec/todo_list_spec.rb:15:in block (3 levels) in <top (re\nEiS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n= Ci Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new I )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® [\\ [ P 3 Spaces: 2 L T - T, s Spe! 8\n"
  },
  {
    "seconds": 559,
    "text": "o0 todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ o - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList | [\n> 01_intro_and_git 2 def | . -\n> 02_testing_bites ® 3 :Eri\\(::rlag.sé;:::\\;res isted here are expected and do not affect your\nil > 03_single_met.. o 4 def add(task)\n> 04_single_met... * s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 end # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv OF sinole clese. ® 8 def list\n~ngre_cies... 9 retamm: [] 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U s sod # Temporarily skipped with xit\n@ todo_list.rb u 3 ond # ./spec/todo_list_spec.rb:29\nMl . . 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U p\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Error: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u 7 . ,\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 )\n11 context “given a task\" do\n> 09_multi_class... * E - (compared using ==)\n0 kil pe atahasjthestasksinrtheplist 2o LI # ./spec/todo_list_spec.rb:15:in block (3 levels) in <top (re\nEiS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n= Ci Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new I )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® [\\ [ n 7 Spaces: 2 L T - T, s Spe! 8\n"
  },
  {
    "seconds": 560,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList | ———\n> 01_intro_and_git 2 def initia]|\n3 8 3 Pending: (Failures listed hexre are expected and do not affect your\n> 02_testing_bites © suite's status)\nBl > 03_single_met.. ® 4 def add(task)\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 end # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv OF sinole. cles.. & 8 def list\n=Ngre_Ciee... 9 zeturn: [ 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 snd # Temporarily skipped with xit\n@ todo_list.rb u :: ond # ./spec/todo_list_spec.rb:29\nMl . o 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 -\n11 context “given a task\" do\n> 09_multi_class... * o - (compared using ==)\nS - 12 it \"has the task in the list\" do Ll # ./spec/todo_list_spec.rb:15:in 'block (3 levels) in <top (re\n13 todo_list = TodoList.new quired)>'\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n= O Failed examples:\n18\n19 context \"given two tasks\" do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new | )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC 14 Spaces: 2 TF-8 LF Ruby & Spe 2\n"
  },
  {
    "seconds": 561,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList |\n> 01_intro_and_git 2 def] initializer : »\n> 02_testing_bites ® 3 ond Per_mirlag. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4\n> 04_single_met... * 5 def add(task) 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 # Temporarily skipped with xit\n> 06_single_clas... ® : end # ./spec/todo_list_spec.rb:20\nVv 0Zsingle_clas... 9 def 1ist 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 xetazn; (] # Temporarily skipped with xit\n@ todo_list.rb u . ond # ./spec/todo_list_spec.rb:29\ni 12 end\nB\nBl . 13 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 :\n11 context “given a task\" do\n> 09_multi_class... * o - (compared using ==)\nST T - > atzshasithegtasksdnttheplist 2o Ll # ./spec/todo_list_spec.rb:15:in block (3 levels) in <top (re\n< S 13 todo_list = TodoList.new quired)>’\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new | )\n22 todo_list.add(\"Wash the car\") 07_single_class_design = [|\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0AC 6 Spaces:2 TF-8 LF Ruby & Spe 2\n"
  },
  {
    "seconds": 562,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList 2 e R\n> 01_intro_and_git 2 def initializer B\n> 02_testing_bites ® 3 !1 Perydirlag. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... : = # ./spec/todo_list_spec.rb:20\n- el\nVv 0Zsingle_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 def;11st # Temporarily skipped with xit\n4 todo_listrd U :: .n:““m 0 # ./spec/todo_list_spec.rb:29\nBl . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U p\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 -\n11 context “given a task\" do\n> 09_multi_class... * o - (compared using ==)\nST T - > Atzshasithegtasksdnttheplist 2o Ll # ./spec/todo_list_spec.rb:15:in block (3 levels) in <top (re\n13 todo_list = TodoList.new quired)>'\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n= O Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new | )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC 0l6 Spaces: 2 TF-8 LF Ruby & Spe 2\n"
  },
  {
    "seconds": 563,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList 2 e R\n> 01_intro_and_git 2 def initializer I B\n> 02_testing_bites ® 3 4 Perydirlag. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... : = # ./spec/todo_list_spec.rb:20\n- el\nVv 0Zsingle_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 18 def;11st # Temporarily skipped with xit\n4 todo_listrd U :: .n:““m 0 # ./spec/todo_list_spec.rb:29\nBl . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 :\n11 context “given a task\" do\n> 09_multi_class... * o - (compared using ==)\nST T - > Atzshasithegtasksdnttheplist 2o Ll # ./spec/todo_list_spec.rb:15:in block (3 levels) in <top (re\n< S 13 todo_list = TodoList.new quired)>’\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new | )\n22 todo_list.add(\"Wash the car\") 07_single_class_design = [|\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0AC 0l6 Spaces: 2 TF-8 LF Ruby & Spe 2\n"
  },
  {
    "seconds": 564,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodolList Eas e RN\n> 01_intro_and_git 2 def initialize B\n> 02_testing_bites ® 3 4 ' Perydirlag. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... : = # ./spec/todo_list_spec.rb:20\n- el\nVv 0Zsingle_clas... 2) TodoList when we complete a task removes the task from the lis\n9\nv lib . t\n@ phone_book.... U 18 def;11st # Temporarily skipped with xit\n4 todo_listrd U :: .n:““m 0 # ./spec/todo_list_spec.rb:29\nBl . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u e .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]was the car”]\n> 08_debugging... * 10\n11 context “given a task\" do\n> 09_multi_class... * o - (compared using ==)\nST T - > Atzshasithegtasksdnttheplist 2o Ll # ./spec/todo_list_spec.rb:15:in block (3 levels) in <top (re\n< S 13 todo_list = TodoList.new quired)>’\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new | )\n22 todo_list.add(\"Wash the car\") 07_single_class_design = [|\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0AC 6 Spaces: 2 TF-8 LF Ruby & Spe 2\n"
  },
  {
    "seconds": 565,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize B\n> 02_testing_bites ® 3 @tasksl Perydirlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_det ing1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® y / # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® o end\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U e def-ddst # Temporarily skipped with xit\n4 todo_listrd U :: .n:\"“m 0 # ./spec/todo_list_spec.rb:29\nBy . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 .\n11 context “given a task\" do\n> 09_multi_class... * o h - (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the list\" do - # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design = [|\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext “\"when we complete a task\" do\nmain® 0 [ 13, Col 11 Spaces: 2 TF-8 LF Ruby s Spe! 0\n"
  },
  {
    "seconds": 566,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize | 1]\n> 02_testing_bites ® 3 @tasks = []I Perydirlag. (Failures listed here are expected and do not affect your\n08 I suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_det ing1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® y / # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® o end\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U e def-ddst # Temporarily skipped with xit\n4 todo_listrb U :: m:etum 0 # ./spec/todo_list_spec.rb:29\nBy . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 .\n11 context “given a task\" do\n> 09_multi_class... * o h - (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the list\" do - # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design = [|\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext “\"when we complete a task\" do\nmain® 0AC Col16 Spaces: 2 TF-8 LF Ruby 3 Spe e\n"
  },
  {
    "seconds": 567,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks = [] Perydirlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end B\n> 04_single_met... 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® o end\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U o defaisty # Temporarily skipped with xit\n& todo_listd U :: 'n:\"“m 0 # ./spec/todo_list_spec.rb:29\nBy . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u g =\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 .\n11 context “given a task\" do\n> 09_multi_class... ® i 5 — (compared using ==)\nSt T TR T ML BRI LI # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\ns e Failed examples:\n18\n19 context \"given two tasks\" do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC 7,Col 1 Spaces: 2 LU T T, % Spe! 0\n"
  },
  {
    "seconds": 568,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tm - zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks = [] Perydirlag. (Failures listed here are expected and do not affect your\nA suite's status)\n> 03_single_met... ® 4 end B\n> 04_single_met... 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(tasIk) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® o end\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U o C il # Temporarily skipped with xit\n& todo_listd U :: 'n:\"“m 0 # ./spec/todo_list_spec.rb:29\nBy . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u g =\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 .\n11 context “given a task\" do\n> 09_multi_class... ® i 5 — (compared using ==)\nSt T TR T ML BRI LI # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\ns e Failed examples:\n18\n19 context \"given two tasks\" do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC 7,Col 1 Spaces: 2 LU T T, % Spe! 0\n"
  },
  {
    "seconds": 569,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tm - zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks = [] Perydirlag. (Failures listed here are expected and do not affect your\nA suite's status)\n> 03_single_met... ® 4 end B\n> 04_single_met... 5 1) TodoList given two tasks has both tasks in the list\n> 05_det ing1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® o end\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U e def-1dst b # Temporarily skipped with xit\n4 todo_listrd U :: .n:\"“m # ./spec/todo_list_spec.rb:29\nBy . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u g =\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 .\n11 context “given a task\" do\n> 09_multi_class... ® i 5 — (compared using ==)\nSt T TR T ML BRI LI # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\ns e Failed examples:\n18\n19 context \"given two tasks\" do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC 7,Col 1 Spaces: 2 LU T T, % Spe! 0\n"
  },
  {
    "seconds": 570,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tm - zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks = [] :Eri\\(::rlag.sé;:::\\;res listed here are expected and do not affect your\nol > 03_single_met.. * 4 end\n> 04_single_met... * 5 1) TodoList given two tasks has both tasks in the list\n> 05_det ing1 ® 6 def add(task) - # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® o end\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U o def1ist # Temporarily skipped with xit\nNS :; m:\"““‘ b # . /spec/todo_list_spec.rb:29\nBy . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemflelock U 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: E]wash the car\"]\n> 08_debugging... * 10 :\n11 context “given a task\" do\n> 09_multi_class... ® i 5 — (compared using ==)\nSt T TR T ML GO LI # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\n13 todo_list = TodoList.new quired)>'\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\ns e Failed examples:\n18\n19 context \"given two tasks\" do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design ~ ]\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “whe e complete a ask\" do\nmain® 0AC n1 1 Spaces: 2 LU T T, % Spe! 0\n"
  },
  {
    "seconds": 571,
    "text": "eoce todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks =[] Pending: (Failures listed here are expected and do not affect your\n<a suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging 1 * 6 def-add(task) B # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® e e\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U n desiidnt # Temporarily skipped with xit\n& todo_listd U :: \"‘:\"“m et # ./spec/todo_list_spec.rb:29\nD . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile v g =\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: hwash the car\"]\n> 08_debugging... * 10 2\n11 context “given a task\" do\n> 09_multi_class... * h b < (compared using ==)\nU malcese 22 TR T ML LR | # ./spec/todo_list_spec.rb:15:in “block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 .\ns = Failed examples:\n18\n19 context \"given two tasks” do rspec ./spec/todo_list_spec.xb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE g onte “\"when we complete a ask\" do\nmain® 0 A C n11,Col14 Spaces:2 UTF-8 LF Ruby s Spe! *\n"
  },
  {
    "seconds": 572,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"q EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh X 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 @tasks =[] Pending: (Failures listed here are expected and do not affect your\n<a suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging 1 * 6 def-add(task) B # Temporarily skipped with xit\n> 06_single_clas... ® 7 # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® e e\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U s defollst # Temporarily skipped with xit\n& todo_listd U :: \"‘:\"“m @tassks{ # ./spec/todo_list_spec.rb:29\nD . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;z:z hwash the car\"]\n> 08_debugging... * 10 :\n11 context “given a task\" do\n> 09_multi_class... ® T - (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the list\" do ! # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0AC n1, Col19 Spaces:2 JTF-8 LF Ruby s Spe! )\n"
  },
  {
    "seconds": 573,
    "text": "eoce todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ @ m - zsh X 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks =[] Pending: (Failures listed here are expected and do not affect your\n<a suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging 1 * 6 det-add(task) B # Temporarily skipped with xit\n> 06_single_clas... * 7 I # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® e e\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U s defolist # Temporarily skipped with xit\n& todo_listd U :: \"‘:\"“m @taskﬂ # ./spec/todo_list_spec.rb:29\nD . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: hwash the car\"]\n> 08_debugging... * 10 2\n11 context “given a task\" do\n> 09_multi_class... * h h - (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the list\" do ! # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0AC n 1, Col 1 Spaces:2 UTF-8 LF Ruby s Spe! S\n"
  },
  {
    "seconds": 574,
    "text": "eoce todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ @ m - zsh X 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks =[] Pending: (Failures listed here are expected and do not affect your\n<a suite's status)\n> 03_single_met... ® 4 end B\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 I # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® g e\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U R Gefqiiet # Temporarily skipped with xit\n4 todo_listrb U i: \"‘:etum gtasks # ./spec/todo_list_spec.rb:29\nD . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: hwash the car\"]\n> 08_debugging... * 10 :\n11 context “given a task\" do\n> 09_multi_class... * h h - (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the list\" do ! # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0 A C 5 Spaces:2 UTF-8 LF Ruby s Spe! *\n"
  },
  {
    "seconds": 575,
    "text": "eoce todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ @ m - zsh X 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList B 3\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks =[] Per_uml\\g. (Failures listed here are expected and do not affect your\n<a suite's status)\n> 03_single_met... ® 4 end B\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @q # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® g s\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U R Gefqiier # Temporarily skipped with xit\n4 todo_listrb U 1: n:etum gtasks # ./spec/todo_list_spec.rb:29\n— 1 e\nD . o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\n.rspec v @ todo_list_spec.rb U Failure/Exrror: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;zn:: hwash the car\"]\n> 08_debugging... * 10 :\n11 context “given a task\" do\n> 09_multi_class... * h h - (compared using ==)\n> 10_multi_class... * 12 it \"has the task in the list\" do ! # ./spec/todo_list_spec.rb:15:in ‘block (3 levels) in <top (re\nS 13 todo_list = TodoList.new quired)>*\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n7 \"\n3 snd Failed examples:\n18\n19 context “given two tasks” do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “\"has both- tasks in the list\" do ask in the list\n21 todo_list = TodoList.new ! )\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete a task\" do\nmain® 0 A C 7 Spaces:2 UTF-8 LF Ruby s Spe! *\n"
  },
  {
    "seconds": 576,
    "text": "eoce todo_list.rb — rspec_setup 08\nIfﬂ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ @ am - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B a class TodoList D T ]\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Pending: (Failures listed here are expected and do not affect your\n\" suite's status)\n> 03_single_met... ® 4 end B\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ] @tasks «l # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 2 end\n~ngre_Ciee... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U A® Coted # Temporarily skipped with xit\n& todo_listrb U ;: .“:\"“m @tasks # ./spec/todo_list_spec.rb:29\npaL s . b1 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.tb U Failure/Exxor: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . fith =\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;g:: hwas the car\"]\n> 08_debugging... * 16 )\n11 context “given a task\" do\n> 09_multi_class... * h h — (compared using ==)\nS0 kL cless a2 St nasithestask:Inithejlistido L # ./spec/todo_list_spec.rb:15:in \"block (3 levels) in <top (re\nSHMECS 13 todo_list = TodoList.new quired)>\"\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n17 end\nFailed examples:\n18 X\n19 context “given two tasks\" do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “\"has both tasks in the list\" do ask in the list\n21 todo_list = TodoList.new i i\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete.a task” do\nmain® 0 A C 7, Col 1 Spaces:2 UTF-8 LF Ruby % Spe *\n"
  },
  {
    "seconds": 577,
    "text": "eoe todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - 2sh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList B-........Foex\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Pending: (Failures listed here are expected and do not affect your\n\" suite's status)\n> 03_single_met... ® 4 end B\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... £ @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 2 end\n~ngre_Ciee... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U 2080 [frdatactet # Temporarily skipped with xit\n& todo_listrb U ;: .“:\"“m @tasks # ./spec/todo_list_spec.rb:29\nv recipes ) > 13 end 3) Yod:k::t when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # T rarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n@ phone_book... U _\nFailures:\n@ spec_helper... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.tb U Failure/Exxor: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u . fith =\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;g:: hwas the car\"]\n> 08_debugging... * 16 )\n11 context “given a task\" do\n> 09_multi_class... * h h — (compared using ==)\nS0 kL cless a2 St nasithestask:Inithejlistido L # ./spec/todo_list_spec.rb:15:in \"block (3 levels) in <top (re\nSHMECS 13 todo_list = TodoList.new quired)>\"\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n17 end\nFailed examples:\n18 X\n19 context “given two tasks\" do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “\"has both tasks in the list\" do ask in the list\n21 todo_list = TodoList.new i i\n22 todo_list.add(\"Wash the car\") 07_single_class_design - []\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete.a task” do\nmain® 0 A C »119 Spaces:2 UTF-8 LF Ruby 3 Spe *\n"
  },
  {
    "seconds": 578,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B a class TodoList —— ]\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Pending: (Failures listed here are expected and do not affect your\n2 suite's status)\n( > 03_single_met... ® 4 end =\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... £ @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 2 end\n~ngre_Ciee... 9 2) TodoList when we complete a task removes the task from the lis\nv lib . t\n@ phone_book.... U A® Coted # Temporarily skipped with xit\n& todo_listrb U ;: .“:\"“m @tasks # ./spec/todo_list_spec.rb:29\npaL s . b1 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec . 1\n@ phone_book... U _\nFailures:\n@ spec_helper... U\n@ todo_list_sp... U 1) TodoList given a task has the task in the list\nrspec v @ todo_list_spec.rb U Failure/Exxor: expect(todo_list.list).to eq [“Wash the car\"]\nGemfile u NI .\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb expec;g:: hwas the car\"]\n> 08_debugging... * 16 )\n11 context “given a task\" do\n> 09_multi_class... * h h — (compared using ==)\nS0 kL cless a2 St nasithestask:Inithejlistido L # ./spec/todo_list_spec.rb:15:in \"block (3 levels) in <top (re\nI 13 todo_list = TodoList.new quired)>\"\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] Finished in 0.02439 seconds (files took 0.14363 seconds to load)\n16 end 13 examples, 1 failure, 3 pending\n17 end\nFailed examples:\n18 X\n19 context “given two tasks\" do rspec ./spec/todo_list_spec.rb:12 # TodoList given a task has the t\n20 xit “\"has both tasks in the list\" do ask in the list\n21 todo_list = TodoList.new i i\n22 todo_list.add(\"Wash the car\") 07_single_class_design - ||\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 ontext \"when we complete.a task” do\nmain® 0AC 3 Spe *\n"
  },
  {
    "seconds": 579,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - []\n> 00_scratch B a class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[]\nBl > 03_single_met.. ® 4 end =\n> 04_single_met... 5\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... £ @tasks << task\nv 07_single_clas... ® o and\nv lib . >\nO 1) 10 def list\ne RGEEE 11 return @tasks\nra 12 end\nR, 2 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U\n spec B 1\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp.. U\n-repec Y @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n10\nig:::::::::’ : 1 context “given a task\" do\n- 12 it \"has the task in the list\" do\n> 10_multi_class... * —\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\")\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\ng 25 end\n26 end\n; 27\n> TIMELINE 8 ontext \"when we complete.a task” do\nmain® 0AO0 s Spe o\n"
  },
  {
    "seconds": 580,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B a class TodoList Velv dismaia I\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Pepdir)g: (Failures listed here are expected and do not affect your\nA suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met.. * 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... * 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 2 end 2) Todot 1 ¢ he 14\ne 2 9 2 ) TodoList when we complete a task removes the task from t s\n@ phone_book.... U 2080 [frdatacter # Temporarily skipped with xit\n& todo_listrb U ;: 'n:\"“m @tasks # ./spec/todo_list_spec.rb:29\nA s 13  end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./srec/todo_lxst_spec.rb:}?\nv spec B\n€ /ppope beok-.. U Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, ® failures, 3 pending\n@ todo_list_sp... U\n.rspec v @ todo_list_spec.rb U 07_single_class_design - I\nGemfile u\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 16\n> 09_multi_class... ® 11 context “given a task\" do\n- 12 it \"has the task in the list\" do\n> 10_multi_class... * b\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 4 ontext \"when we complete a task\" do\nmain® 0 A C 3 Spe .\n"
  },
  {
    "seconds": 581,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList Sa e TR\n> 01_intro_and_git -/ def initialize\n> 02_testing_bites ® 3 etasks = [] Per_\\dirlwg. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end =\n> 04_single_met... ® s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 -\n=NgIe_Ci0s... 9 2) TodoList when we complete a task removes the task from the lis\nv lib H t\n@ phone_book.... U A defalist # Temporarily skipped with xit\n& todo_listrb U ;: 'n:\"“m @tasks # ./spec/todo_list_spec.rb:29\nv recipes . %\n. 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\na book... U\nphone_ Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp... U\nrspec UN g 1odo_ist_specib U .. 07_single_class_design - ||\nGemfile u i ,\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 10 . .\n> 09_multi_class... ® 11 context “given a task\" do\n. 12 it \"has the task in the list\" do\n> 10_multi_class... * =\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 nxpect(todo_listlust).to eq [\"wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xit “\"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 8 FCONtOX I RN AWORCOmD g\nmain® N % Spel .\n"
  },
  {
    "seconds": 582,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList Sa e TR\n> 01_intro_and_git -/ def initialize\n> 02_testing_bites 3 etasks =[] Per_\\dirlag: (Failures listed here are expected and do not affect your\nA suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... ® S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 - 27\ne . 9 . ) TodoList when we complete a task removes the task from the lis\n@ phone_book.... U 105 [idasacast # Temporarily skipped with xit\n& todo_listrb U 1 return: @tasks # ./spec/todo_list_spec.rb:29\n. 12 end\nb e 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\ne Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp... U\nrspec UN g 1odo_ist_specib U .. 07_single_class_design - ||\nGemfile u o Beoes v e\nGemflalock U tven & Taok=\n> 08_debugging... * 12 it \"has the task in the list\" do\n> 09_multi_class... * 13 todo_list = TodoList.new\n> 10_multi_class... * 14 todo_list.add(\"Wash the car\") =1\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 xiy \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do\n> TIMELINE 29 xit “removes the task from the list\" do\nmain® 0 A % Spel .\n"
  },
  {
    "seconds": 583,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList Sa e TR\n> 01_intro_and_git -/ def initialize\n> 02_testing_bites 3 etasks =[] Per_\\dirlag: (Failures listed here are expected and do not affect your\nA suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... ® S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas... ® 4 - 27\ne . 9 . ) TodoList when we complete a task removes the task from the lis\n@ phone_book.... U A defalist # Temporarily skipped with xit\n& todo_listrb U ;: 'n:\"““' @tasks # ./spec/todo_list_spec.rb:29\nb e 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\ne Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp... U\nrspec UN g 1odo_ist_specib U .. 07_single_class_design - ||\nGemfile u o Beoes v e\nGemflalock U tven & Taok=\n> 08_debugging... * 12 it \"has the task in the list\" do\n> 09_multi_class... * 13 todo_list = TodoList.new\n> 10_multi_class... * 14 todo_list.add(\"Wash the car\") =1\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 Nit “has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do\n> TIMELINE 29 xit “removes the task from the list\" do\nmain® 0 A % Spel .\n"
  },
  {
    "seconds": 584,
    "text": "eoce 10do_bst_spec.rb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_listrb U zsh a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodoList Sa e TR\n> 01_intro_and_git -/ def initialize\n> 02_testing_bites 3 etasks =[] Per_\\dirlag: (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end =\n> 04_single_met... ® S 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas.. * 8 end 27 1 Soon 11\ne . 9 . ) TodoList when we complete a task removes the task the 1lis\n@ phone_book.... U 19 detpdet # Temporarily skipped with xit\n@ todo_listrb U ;: 'n:\"““' @tasks # ./spec/todo_list_spec.rb:29\nb e 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\ne Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp.. U\nrspec U o wodo_list specib U X v o - 07_single_class_design » []\nGemfile u o Beoes v e\nSomieiock UM A o T O et\n> 08_debugging... * 12 it \"has the task in the list\" do\n> 09_multi_class... * 13 todo_list = TodoList.new\n> 10_multi_class... * 14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end o\n17 end\n18 []\n19 context “given two tasks\" do\n20 Nit \"has both tasks in the list® do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n> TIMELINE 29 xit “removes the task from the list\" do\n"
  },
  {
    "seconds": 585,
    "text": "[ N J T0d0_bst_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch ° 1 class TodoList Sa e TR\n> 01_intro_and_git -/ def initialize\n> 02_testing_bites ® 3 @tasks = [] :zzgévi.sé::\\ij:;res listed here are expected and do not affect your\nBl > 03_single_met.. ® 4 end =\n> 04_single_met... * s 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 07_single_clas... * 4 -\n=NgIe_Ci0s... 9 2) TodoList when we complete a task removes the task from the lis\nv lib H t\n@ phone_book.... U :(: e :1“ ok # Temporarily skipped with xit\n@ todo_listrb U return: @tasks # ./spec/todo_list_spec.rb:29\n- 12 end\n.\nb . 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec B\na book... U\nphone| Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp.. U\n-rspec U g 1odo_fist_specsb U X ©m - 07_single_class_design » []\nGemfile u\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... 13 todo_list = TodoList.new\n3 14 todo_list.add(\"Wash the car\")\no b 15 expect(todo_list.list).t [\"wash th 5\nS A pect(todo_list.list).to eq as e car\n16 end\n17 end\n18 =\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do |\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do\n29 xit “\"removes the task from the list\" do\n30 todo_list = TodoList.new\n> TIMELINE o \"\nOU0 > 4 ad 1ash AL\n—= 0 A ( Ces F Ruby &3 Spe .\n"
  },
  {
    "seconds": 586,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U o [ zsh x a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodolList e e A TR\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_adxrlag: (Failures listed here are expected and do not affect your\n3 suite's status)\n< > 03_single_met... ® 4 end !\n> 04_single_met... 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 0Z_single_clas... * o snc 27 1 Srom 1\ne . 9 . ) TodoList when we complete a task removes the task the lis\n@ phone_book.... U :(: d':g:::: stiske # Tenporarily skipped with xit\n@& todo_listtb U 3 Sk # ./spec/todo_list_spec.rb:29\nBy ; o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n9 phom book- ¥ Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp.. U\n.rspec v @ todo_list_spec.rb U X 9 m - 07_single_class_design -vD\nLy \" 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.ock U 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 08_debugging... * 16 end\n> 09_multi_class... * 17 end\n> 10_multi_class... * 18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do B\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n> TIMELINE 33 todo_list.complete(“Wash the car”)\nmain® 0AO0 (e R ) TF-8 LF Ruby {3 Spe! e\n"
  },
  {
    "seconds": 587,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U o [ zsh x 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodolList e e A TR\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_adxrlag. (Failures listed here are expected and do not affect your\nP suite's status)\n> 03_single_met... 4 end &\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 0Z_single_clas... * o e\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib s t\n@ phone_book.... U A Cagadat # Temporarily skipped with xit\n@ todo_listrb U 1 return @tasks # ./spec/todo_list_spec.rb:29\n- & 12 end\nBy ; 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\na book... U\nP Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp.. U\n.rspec v @ todo_list_spec.rb U X 9 m - 07_single_class_design -vD\nGemfile u -\n- 07_single_class_design > spec > todo_list_spec.rb\nGemfile.ock U 15 expect(todo_list.1ist).to eq [“Wash the car\"]\n> 08_debugging... * 16 end\n> 09_multi_class... * 17 end\n> 10_multi_class... * 18\n19 context “given two tasks\" do\n20 it \"has both taski in the list\" do B\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n> TIMELINE 33 todo_list.complete(“Wash the car”)\nmain® N Ln 20, Col5 Spaces: 2 TF-8 LF Ruby s Spe! ®\n"
  },
  {
    "seconds": 588,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U o [ zsh x a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodolList e e A TR\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_adxrlag: (Failures listed here are expected and do not affect your\nP suite's status)\n> 03_single_met... ® 4 end =\n> 04_single_met... 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 0Z_single_clas... * o snc 27 1 Srom 1\ne . 9 . ) TodoList when we complete a task removes the task the lis\n@ phone_book.... U A Cagadat # Temporarily skipped with xit\n@ todo_listrb U ;: 'n:\"“\"' @tasks # ./spec/todo_list_spec.rb:29\nBy ; o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n9 phom book- ¥ Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp.. U\n.rspec v @ todo_list_spec.rb U X 9 m - 07_single_class_design -vD\nLy \" 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.ock U 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 08_debugging... * 16 end\n> 09_multi_class... * 17 end\n> 10_multi_class... * 18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do B\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 oxpcft(todo_list.list).to eq [\"wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n> TIMELINE 33 todo_list.complete(“Wash the car”)\nmain® 0AO0 (e R ) TF-8 LF Ruby {3 Spe! e\n"
  },
  {
    "seconds": 589,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U o [ zsh x a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodolList e e A TR\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_adxrlag: (Failures listed here are expected and do not affect your\nP suite's status)\n> 03_single_met... ® 4 end =\n> 04_single_met... 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 0Z_single_clas... * o snc 27 1 Srom 1\ne . 9 . ) TodoList when we complete a task removes the task the lis\n@ phone_book.... U A Cagadat # Temporarily skipped with xit\n@ todo_listrb U ;: 'n:\"“\"' @tasks # ./spec/todo_list_spec.rb:29\nBy o 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\n9 phom book- ¥ Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp.. U\n.rspec v @ todo_list_spec.rb U X 9 m - 07_single_class_design - [l\nLy \" 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.ock U 15 expect(todo_list.list).to eq [\"Wash the car\"]\n> 08_debugging... * 16 end\n> 09_multi_class... * 17 end\n> 10_multi_class... * 18\n19 context “\"given two tasks\" do I\n20 it \"has both tasks in the list\" do B\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"wWash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n> TIMELINE 33 todo_list.complete(“Wash the car”)\nmain® 0AO0 (e R ) TF-8 LF Ruby {3 Spe! e\n"
  },
  {
    "seconds": 590,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U <o [ zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodolList e e A TR\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Pending: (Failures listed here are expected and do not affect your\nD = = suite's status)\n> 03_single_met... 4 end &\n> 04_single_met... ® 5 1) TodoList given two tasks has both tasks in the list\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:20\nv 0Z_single_clas... * o e\n-single_clas... 9 2) TodoList when we complete a task removes the task from the lis\nv lib ) t\n@ phone_book.... U A Cagadat # Temporarily skipped with xit\n@ todo_listrb U 1 return @tasks # ./spec/todo_list_spec.rb:29\n- & 12 end\nBy ; 13 end 3) TodoList when we try to complete a non-existent task fails\n¥ phone_desig... U 14 # Temporarily skipped with xit\n¥ tasks_design... U # ./spec/todo_list_spec.rb:39\nv spec .\na book... U\nP Finished in 0.01212 seconds (files took 0.14408 seconds to load)\n@ spec_helper.... U 13 examples, © failures, 3 pending\n@ todo_list_sp.. U\nrspec u @ todo_list_spec.rb U X ... 07_single_class_design - l\nGemfile u -\n- 07_single_class_design > spec > todo_list_spec.rb\nGemfile.ock U 15 expect(todo_list.1ist).to eq [“Wash the car\"]\n> 08_debugging... * 16 end\n> 09_multi_class... * 17 end\n> 10_multi_class... 18 1\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do =\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"wWash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n> TIMELINE 33 todo_list.complete(“Wash the car\")\nmain® 0AO0 3 Spe 9\n"
  },
  {
    "seconds": 591,
    "text": "(N ] ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U ruby X +v 048 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch - 1 class TodoList | |\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[]\nil > 03_single_met.. * 4 end !\n> 04_single_met... ® 5\n> 05_debugging_1 ® 6 def add(task)\n5108 single rlea’ 'S 7 @tasks << task\nv 07_single_clas... ® i Sna\nv lib . g\n8 rooue book NIy 10 def list\no 11 return @tasks\nS 12 end\nY reenee » 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U\nv spec B\n@ phone_book... U\n@ spec_helper... U\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\ns v 07_single_class_design > spec @ todo_list_spec.rb\nGemfile.lock . is v exbect(toi:lo_ust.lis{).to eq [\"wash the car\"]\n> 08_debugging... * 16 end\n> 09_multi_class... * 17 end\n> 10_multi_class... * 18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do =\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit \"removes the task from the list\" do\n» 30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n> TIMELINE 33 todo_list.complete(“Wash the caxr\")\nmain® 0AO s Spe Q)\n"
  },
  {
    "seconds": 592,
    "text": "(N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList T s e A ma P\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Perfdirlag: (Failures listed here are expected and do not affect your\n3 suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... * 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\nNy 7 @tasks << task # Temporarily skipped with xit\ni::_‘:m:::: : s o # ./spec/todo_list_spec.rb:29\nv lib ° 1; def-1ist 2) TodoList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrb U n return: @tasks # ./spec/todo_list_spec.rb:39\n& 12 end\nN s 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design... U 13 examples, © failures, 2 pending\nv spec B\ne o0 07_single_class_design » |\n@ spec_helper.... U\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\ni Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock . is v exbect(to;:lo_ust.us{).to eq [\"wash the car\"]\n> 08_debugging... * 16 end\n> 09_multi_class... * 17 end\n> 10_multi_class... * 18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do 1 —\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 xit \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n> TIMELINE 33 todo_list.complete(“Wash the caxr\")\n= ST 5 Spe ~\n"
  },
  {
    "seconds": 593,
    "text": "(N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList T s e A ma P\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 otasks =[] Per}dirl\\g: (Failures listed here are expected and do not affect your\n3 suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... * 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\nNy 7 @tasks << task # Temporarily skipped with xit\ni::_‘:m:::: : 8 end # ./spec/todo_list_spec.rb:29\nv lib . 1; def-1ist 2) TodolList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrb U 1 return @tasks # ./spec/todo_list_spec.rb:39\n& 12 end\nN s 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design... U 13 examples, © failures, 2 pending\nv spec o\ne o0 07_single_class_design » ||\n@ spec_helper.... U\n@ todo_list_sp... U\nfepec YU @ todo_list_spec.ib U\nGemfile v\nGemflejock U O7Single_class design ) spec ) @ todo fist tpecrb\n> 08_debugging... * 23 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> 10_multi_class... * 25 end\n26 end\n27\n28 context “\"when we complete a task\" do I 1\n29 xit “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\nS TIMELINE a0 todo_list = TodoList.new\nmain® oA 3 Spe =\n"
  },
  {
    "seconds": 594,
    "text": "(N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList T s e A ma P\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 otasks =[] Per}dirl\\g: (Failures listed here are expected and do not affect your\n3 suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... ® 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\nNy 7 @tasks << task # Temporarily skipped with xit\ni::_‘:m:::: : 8 end # ./spec/todo_list_spec.rb:29\nv lib . 1; def-1ist 2) TodolList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrb U 1 return @tasks # ./spec/todo_list_spec.rb:39\n& 12 end\nN s 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design... U 13 examples, © failures, 2 pending\nv spec o\ne o0 07_single_class_design » ||\n@ spec_helper.... U\n@ todo_list_sp... U\nfepec YU @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® L\n> 10_multi_class... * 3\n28 context “\"when we complete a task\" do\n29 xIt “removes the task from the list\" do\n30 todo_list = TodoList.new -\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task” do\n39 xit \"fails\" do\na0 todo_list = TodoList.new\na1 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the-sheep\") }.to raise_exror \"No such task.\n> TIMELINE A nd\nmain® O A C % Spel .\n"
  },
  {
    "seconds": 595,
    "text": "(N ] T0d0_bst_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList T s e A ma P\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 otasks =[] Per}dirl\\g: (Failures listed here are expected and do not affect your\n3 suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... ® 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\nNy 7 @tasks << task # Temporarily skipped with xit\ni::_‘:m:::: : 8 end # ./spec/todo_list_spec.rb:29\nv lib . 1; def-1ist 2) TodolList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n& todo listrb U 1 return @tasks # ./spec/todo_list_spec.rb:39\nS 12 end\nN s 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design... U 13 examples, © failures, 2 pending\nv spec o\ne o0 07_single_class_design » []\n@ spec_helper.... U\n@ todo_list_sp... U\nspec Y @ todo_list_spec.rb U x 2 m -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 23 ond\n> 10_multi_class... * 3\n28 context “\"when we complete a task\" do\n29 xit ‘Ixemoves the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\") B\n34 expect(todo_list.list).to eq [\"Wash the dog\"] d\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task” do\n39 xit \"fails\" do\na0 todo_list = TodoList.new\na1 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(“Wash the-sheep\") }.to raise_exror \"No such task.\n> TIMELINE A nd\nmain® 0AC ), Col6 Spaces B Ruby {3 Spe .\n"
  },
  {
    "seconds": 596,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\nI? EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList sy e R\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_\\dirlag: (Failures listed here are expected and do not affect your\n2 suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... * 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\n. 7 tasks << task T rarily sk with xit\ne s 8 ..,i \" .mc/tod:_limdp«:.mzz*)\nv 0Z_single_clas... *\nv lib ® 1; def 1ist 2) TodoList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrd U 1 return @tasks # ./spec/todo_list_spec.rb:39\n- 12 end\nRAEEe o 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design.. U 13 examples, © failures, 2 pending\nv spec .\nB e e D 07_single_class_design » []\n@ spec_helper.... U\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.b U ® M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® 200NiRen\n> 10_multi_class... 2z\n28 context “\"when we complete a task\" do\n29 ht \"r’moves the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") B\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE a T\nmain* 0A0 Ln29,Col5 Spaces:2 UTF-8 LF Ruby s Spe! e\n"
  },
  {
    "seconds": 597,
    "text": "eoce todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList sy e R\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_\\dirlag: (Failures listed here are expected and do not affect your\n2 suite's status)\n¢ > 03_single_met... ® 4 end =\n> 04_single_met... * 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\n- 7 tasks << task T rarily sk with xit\ne s 8 ..,i \" .mc/tod:_limdp«:.mzz*)\nv 0Z_single_clas... *\nv lib ® 1; def 1ist 2) TodoList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrd U 1 return @tasks # ./spec/todo_list_spec.rb:39\n- 12 end\nRAEEe o 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design.. U 13 examples, © failures, 2 pending\nv spec .\nB e e D 07_single_class_design » []\n@ spec_helper.... U\n@ todo_list_sp... U\nspec Y @ todo_list_spec.ib U X M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end 1\n> 09_multi_class... ® 200NiRen\n> 10_multi_class... 2z\n28 context “\"when we complete a task\" do\n29 Iit “removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") B\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE a =\nmain* 0A0 Ln29,Col5 Spaces:2 UTF-8 LF Ruby s Spe! e\n"
  },
  {
    "seconds": 598,
    "text": "eoce 10d0_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList sy e R\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_\\dirlag: (Failures listed here are expected and do not affect your\n7~ suite's status)\n> 03_single_met... ® 4 end =\n> 04_single_met... * 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\n- 7 tasks << task T rarily sk with xit\ne s 8 ..,i \" .mc/tod:_limdp«:.mzz*)\nv 0Z_single_clas... *\nv lib ® 1; def 1ist 2) TodoList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrd U 1 return @tasks # ./spec/todo_list_spec.rb:39\n- 12 end\nRAEEe o 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design.. U 13 examples, © failures, 2 pending\nv spec .\nB e e D 07_single_class_design » []\n@ spec_helper.... U\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.rb U x t M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® 200NiRen\n> 10_multi_class... 2z\n28 context “\"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_ligt.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] T\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE A Nend\n=== OAO n33, Col 1 == F Ruby &3 Spe .\n"
  },
  {
    "seconds": 599,
    "text": "eoce 10d0_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList sy e R\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_\\dxrlag: (Failures listed here are expected and do not affect your\n4 suite's status)\n: > 03_single_met... ® 4 end =\n> 04_single_met... * 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\n- 7 tasks << task T rarily sk with xit\nPO 8 .,,i ¢ .mc/tod:_limdp«:.mzz*)\nv 0Z_single_clas... *\nv lib ® 1; def 1ist 2) TodoList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrd U 1 return @tasks # ./spec/todo_list_spec.rb:39\n- 12 end\noy e 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design.. U 13 examples, © failures, 2 pending\nv spec .\nB e e D 07_single_class_design » []\n@ spec_helper.... U\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.rb U x t M -\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * =0 end\n> 10_multi_class... * 27\n28 context “\"when we complete a task\" do I\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 || | todo_list complete(“\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] B\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE A Nend\nmain® 0oA0 n 34, C 41 selected paces F Ruby 3 Spe e\n"
  },
  {
    "seconds": 600,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList sy e R\n> 01_intro_and_git & def initialize\n> 02_testing_bites ® 3 etasks =[] Per_\\dxrlag: (Failures listed here are expected and do not affect your\nVA suite's status)\n> 03_single_met... ® 4 end =\n> 04_single_met... * 5 1) TodoList when we complete a task removes the task from the lis\n> 05_debugging_1 ® 6 def add(task) t\n- 7 @tasks << task # Temporarily skipped with xit\niz:_-:\"\\\"f’::::: . s oa # ./spec/todo_list_spec.rb:29\nv lib ® 1; def 1ist 2) TodoList when we try to complete a non-existent task fails\n@ phone_book.... U # Temporarily skipped with xit\n@ todo_listrd U 1 return @tasks # ./spec/todo_list_spec.rb:39\n- 12 end\nRAEEe o 13 end\n¥ phone_desig... U 14 Finished in 0.01275 seconds (files took ©.14111 seconds to load)\n¥ tasks_design.. U 13 examples, © failures, 2 pending\nv spec .\n@ phane_book.. U 07_single_class_design » rspec\n@ spec_helper.... U l\n@ todo_list_sp... U\n-rspec Y @& todo_list_spec.rb U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * =0 end\n> 10_multi_class... * 27\n28 context “\"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list._complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] =\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE a nd\nmain® oOA0 s Spe! 9\n"
  },
  {
    "seconds": 601,
    "text": "[ N ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U <o [ zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B ! class TodolList suite's status)\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] . 1) TodoList when we complete a task removes the task from the lis\n. > 03_single_met... ® 4 end 1 # Temporarily skipped with xit\n> 04_single_met... ® 5 # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas.. 7 @tasks << task 2) TodoList when we try to complete a non-existent task fails\nS 8 end # Temporarily skipped with xit\nv 07 le_clas... *\n=SNgIe_Ci08... 9 # ./spec/todo_list_spec.rb:39\nv lib 2\na o U 10 def list\n@ wdaitn” 0 13 Tetuxn: gtasks Finished in 0.01275 seconds (files took 0.14111 seconds to load)\nSl 12 end 13 examples, © failures, 2 pending\nv recipes .\n13 end\n¥ phone_desig... U 14 07_single_class_design - rspec\n¥ tasks_design... U SRRl \"\nv spec B\n@ phane_book... U Per_\\dirlwg: (Failures listed here are expected and do not affect your\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\n.rspec v @ todo_list_spec.tb U # Temporarily skipped -1th'xit\nGemfile u # ./spec/todo_list_spec.rb:39\nP A 07_single_class_design > spec > @ todo_list_spec.rb\nR 25 end\n> 08_debugging... * =, and Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we compietc a task removes the task from the lis\n28 context \"when we complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\no foco 1281, e0d (;Nash-the:cax;) No“i;’;:‘i’i:;o:\\éthod ‘complete’ for #<TodoList:0x00007fae7a8c671\n\" \" u < :0x0060’\n32 todo_list.add( Hash»the dog\") - 8 @tasks=[\"Wash the car”, “Wash the dog\"]>\n3 todo_list.complete(\"Wash the car”) # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [\"Wash the dog\"] — quired)>*\n35 end\n36 end Finished in 0.01206 seconds (files took 0.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “when we try to complete a non-existent task\" do Failed examples:\n39 xit \"fails\" do\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodolList when we complete a tas\n41 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A nd 07_single_class_design - I\nmain® N 3 Spel .\n"
  },
  {
    "seconds": 602,
    "text": "[ N ] todo_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B ! class TodolList suite's status)\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] . 1) TodoList when we complete a task removes the task from the lis\n. > 03_single_met... ® 4 end ' # Temporarily skipped with xit\n> 04_single_met... ® 5 # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas.. 7 @tasks << task 2) TodoList when we try to complete a non-existent task fails\nS 8 end # Temporarily skipped with xit\nv 07 le_clas... *\n=SNgIe_Ci08... 9 # ./spec/todo_list_spec.rb:39\nv lib 2\nA o U 10 def list\n@ wdaitn” 0 13 Tetuxn: gtasks Finished in 0.01275 seconds (files took 0.14111 seconds to load)\nSl 12 end 13 examples, © failures, 2 pending\nv recipes .\n13 end\n¥ phone_desig... U 14 07_single_class_design - rspec\n¥ tasks_design... U SRRl \"\nv spec B\n@ phane_book... U Per_\\dirlng: (Failures listed here are expected and do not affect your\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\noong U @ todo_list_spec.rb U X @ - # Temporarily skipped with xit\nGemfile u EE o # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nR 25 end\n> 08_debugging... * =, and Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we complete a task removes the task from the lis\n28 context \"when we complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\nu fodo-12st;a0d ([Mash-the cax’) NUHi;';‘;:i:;O;thOd ‘complete’ for #<TodoList:0x00007fae7a8c671\no \" I u < :0x0060’\n32 todo_list.add( Hash“the dog )I - I 1 8 @tasks=[\"Wash the car”, “Wash the dog\"]>\n33 todo_list.complete(\"Wash the car”) o # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [\"Wash the dog\"] quired)>\"\n35 end\n36 end ‘ Finished in 0.01206 seconds (files took 0.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “when we try to complete a non-existent task\" do Failed examples:\n39 xit \"fails\" do ’\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodolList when we complete a tas\n41 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A < end 07_single_class_design - D\n=== N Ln 32. Col 36 Spaces: 2 3 LF Ruby &3 Spe .\n"
  },
  {
    "seconds": 603,
    "text": "[ N todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B 1 class TodoList | suite's status)\n> 01_intro_and_git 2 def initialize |\n> 02_testing_bites ® 3 @tasks = [] 1 . 1) TodoList when we complete a task removes the task from the lis\n¢ > 03_single_met... * B end B # Temporarily skipped with xit\n> 04_single_met... * 5 # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas.. 7 @tasks << task | 2) TodolList when we try to complete a non-existent task fails\nS 8 end | # Temporarily skipped with xit\nv 07 le_clas... *\n_single_clas... . # ./spec/todo_list_spec.rb:39\nv lib 2\n@ rhona oD 10 def list I\n@ ae ks 0 0 Tetuxn: gtasks Finished in ©.01275 seconds (files took 0.14111 seconds to load)\ni 12 end 13 examples, © failures, 2 pending\nv recipes .\n13 end\n¥ phone_desig... U 14 07_single_class_design - rspec\n¥ tasks_design... U AL\nv spec B\n@ phane_book... U Per_\\dirlng: (Failures listed here are expected and do not affect your\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\no) U @ todo_list_spec.rb U X @ - # Temporarily skipped with xit\nGemfile u EE o # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS 25 end\n> 08_debugging... * o and Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we complete a task removes the task from the lis\n28 context “\"when we complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\ns todo 1281, a0d (jNash the cax?) No“i;’;?diizéo:l;thod ‘complete’ for #<TodoList:0x00007fae7a8c671\no \" u < :0x0060’\n32 todo_list.add( Hash.the dog )I - 8 @tasks=[\"Wash the car”, “Wash the dog\"]>\n33 todo_list.complete(\"Wash the car®) | # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [\"Wash the dog\"] quired)>'\n35 end\n36 end Finished in 0.01206 seconds (files took ©.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “\"when we try to complete a non-existent task\" do Failed examples:\n39 xit \"fails” do ’\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n41 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A ng 07_single_class_design - D\nThakn® 0 A C 32 Col 36 Spaces: 2 F-8 LF Ruby @3 Spel .\n"
  },
  {
    "seconds": 604,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER <+ ¥ tasks_design.md U @ todo_listrb U X - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B ! class TodolList | suite's status)\n> 01_intro_and_git 2 def initialize |\n> 02_testing_bites ® 3 @tasks = [] \\ . 1) TodoList when we complete a task removes the task from the lis\n¢ > 03_single_met... * B end =} # Temporarily skipped with xit\n> 04_single_met... * 5 # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas.. 7 @tasks << task 2) TodolList when we try to complete a non-existent task fails\nS 8 .m‘ 1 | # Temporarily skipped with xit\nv 07_single_clas... * - | # ./spec/todo_list_spec.rb:39\nv lib 2\nA ] U 10 def list\n8 todo et B MG 0 Tetuxn: gtasks Finished in ©.01275 seconds (files took 0.14111 seconds to load)\nil 12 end 13 examples, © failures, 2 pending\nv recipes .\n13 end\n¥ phone_desig... U 14 07_single_class_design = rspec\n¥ tasks_design... U Rt i e\nv spec B\n@ phane_book... U Per_\\dirlng: (Failures listed here are expected and do not affect your\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodolList when we try to complete a non-existent task fails\n.rspec v @ todo_list_spec.rb U # Temporarily skipped -ith'xit\nGemfile u # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS 25 end\n> 08_debugging... * o and Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we complete a task removes the task from the lis\n28 context “when we complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\ns todo 128t 00 Nash the car) No“i;’;:diizéo:l;thod ‘complete’ for #<TodoList:0x00007fae7a8c671\no \" u < :0x0060’\n32 todo_list.add( Hash.the dog\") . 8 @tasks=[\"Wash the car®, “Wash the dog\"]>\n33 todo_list.complete(\"Wash the car®) = # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [\"Wash the dog\"] quired)>'\n35 end\n36 end Finished in 0.01206 seconds (files took ©.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “\"when we try to complete a non-existent task\" do Failed examples:\n39 xit \"fails\" do '\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n41 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE A nd 07_single_class_design - D\nmain® 0 A C 8 Col6 Spaces: 2 F-8 LF Ruby @3 Spel .\n"
  },
  {
    "seconds": 605,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER <+ ¥ tasks_design.md U @ todo_listro U @ - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B ! class TodolList | suite's status)\n> 01_intro_and_git 2 def initialize |\n> 02_testing_bites ® 3 @tasks = [] \\ . 1) TodoList when we complete a task removes the task from the lis\no > 03_single_met... ® 4 end # Temporarily skipped with xit\n> 04_single_met... ® 5 2} # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas.. 7 @tasks << task 2) TodolList when we try to complete a non-existent task fails\nS 8 end # Temporarily skipped with xit\nv 07_single_clas... * > # ./spec/todo_list_spec.rb:39\nv lib . |\n@ phone_book.... U a8 ceL cq\nn Finished in 0.01275 seconds (files took 0.14111 seconds to load)\n4 todo_listrb U\n; 12 def list 13 examples, © failures, 2 pending\nv recipes .\n13 return @tasks\n¥ phone_desig... U 14 end 07_single_class_design = rspec\n¥ tasks_design... U 15 end Rt i e B\npaspec B 16\n@ phone_book... U Per_\\dirlng: (Failures listed here are expected and do not affect your\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\n.rspec v @ todo_list_spec.rb U # Temporarily skipped -ith'xit\nGemfile u # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\nS 25 end\n> 08_debugging... * o and Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we complete a task removes the task from the lis\n28 context “when we complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\ns Lodo: 128t a0d ((Nash the car) No“i;’;?diizéo:l;thod ‘complete’ for #<TodoList:0x00007fae7a8c671\n\" \" u < :0x0060’\n32 todo_list.add( Hash.the dog\") . 8 @tasks=[\"Wash the car®, “Wash the dog\"]>\n33 todo_list.complete(\"Wash the car®) bt # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [\"Wash the dog\"] quired)>'\n35 end\n36 end Finished in 0.01206 seconds (files took ©.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “\"when we try to complete a non-existent task\" do Failed examples:\n39 xit \"fails\" do\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n41 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A nd 07_single_class_design - D\nmain® 0 A C ), Col9 Spaces: 2 F-8 LF Ruby @3 Spel .\n"
  },
  {
    "seconds": 606,
    "text": "eoce todo_list.rb — rspec_setup 08\nIi\"ﬁ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tam - zsh X 8 -\n RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B 1 class TodoList | suite's status)\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] . 1) TodoList when we complete a task removes the task from the lis\n08 -\n> 03_single_met... 4 end # Temporarily skipped with xit\n> 04_single_met... * S || # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task 2) TodoList when we try to complete a non-existent task fails\nSt e ey 8 end # Temporarily skipped with xit\nv 07_single_clas... * 5 # ./spec/todo_list_spec.rb:39\nv lib . |\na . 10 def cwlttt‘ |\n@ todo_list.rb u = Finished in 0.01275 seconds (files took 0.14111 seconds to load)\no - o 12 def list 13 examples, © failures, 2 pending\no 13 return @tasks\n¥ phone_desig... U 14 end 07_single_class_design = rspec\n¥ tasks_design... U 15  end evesessasesFR\ne s 16 ] v\n@ phone_book-. U Per_\\dirlag: (Failures listed here are expected and do not affect your\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\nrspec v @ todo_list_spec.tb U # Temporarily skipped with xit\nGemfile u # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n25 end\n> 08_debugging... * % ond Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we complete a task removes the task from the lis\n28 context \"when we-complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\n3 fodo_Listoacdiimasy thelcary Noni;:‘;diizéori;thod ‘complete’ for #<TodoList:0x00007fae7a8c671\n\" \" u m < :0x0060’\n32 todo_list.add( Hash“the dog\") - 8 @tasks=[\"Wash the car”, “Wash the dog\"]>\n33 todo_list.complete(\"Wash the caxr\") L # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [“\"Wash the dog\"] quired)>*\n35 end\n36 end Finished in 0.01206 seconds (files took ©.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “when we try-to complete a non-existent task” do Failed examples:\n39 xit \"fails” do\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\na1 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE p and 07_single_class_design - D\nmain® 0AC n10,Col15 Spaces:2 UTF-8 LF Ruby &3 Spe s\n"
  },
  {
    "seconds": 607,
    "text": "eoce todo_list.rb — rspec_setup 08\nIi\"ﬁ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tam - zsh X 8 -\n RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B 1 class TodoList | suite's status)\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] . 1) TodoList when we complete a task removes the task from the lis\n08 -\n> 03_single_met... 4 end # Temporarily skipped with xit\n> 04_single_met... * s - # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task 2) TodoList when we try to complete a non-existent task fails\nSt e ey 8 end # Temporarily skipped with xit\nv 07_single_clas... * 5 # ./spec/todo_list_spec.rb:39\nv lib . |\nK\ne -0 10 def complete(tas )I |\n@ todo_list.rb u = Finished in 0.01275 seconds (files took 0.14111 seconds to load)\no - o 12 def list 13 examples, © failures, 2 pending\no 13 return @tasks\n¥ phone_desig... U 14 end 07_single_class_design = rspec\n¥ tasks_design... U 15  end evesessasesFR\ne s 16 ] v\n@ phone_book-. U Per_\\dirlag: (Failures listed here are expected and do not affect your\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\nrspec v @ todo_list_spec.tb U # Temporarily skipped with xit\nGemfile u # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n25 end\n> 08_debugging... * % ond Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we complete a task removes the task from the lis\n28 context \"when we-complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\n3 fodo_Listoacclimas thelcary Noni;::‘t)dii:;or:thod ‘complete’ for #<TodoList:0x00007fae7a8c671\n\" \" u m < :0x0060’\n32 todo_list.add( Hash“the dog\") - 8 @tasks=[\"Wash the car”, “Wash the dog\"]>\n33 todo_list.complete(\"Wash the caxr\") L # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [“\"Wash the dog\"] quired)>*\n35 end\n36 end Finished in 0.01206 seconds (files took ©.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “when we try-to complete a non-existent task” do Failed examples:\n39 xit \"fails” do\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\na1 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE p and 07_single_class_design - D\nmain® ¢ i n10,Col 21 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 608,
    "text": "ece todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tam - zsh X 8 -\n RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B 1 class TodoList suite's status)\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] . 1) TodoList when we complete a task removes the task from the lis\n08 -\n> 03_single_met... 4 end # Temporarily skipped with xit\n> 04_single_met... * s # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task) B\n> 06_single_clas... 7 @tasks << task 2) TodoList when we try to complete a non-existent task fails\nSt e ey 8 end # Temporarily skipped with xit\nv 07_single_clas... * 5 # ./spec/todo_list_spec.rb:39\nv lib B\ne -0 10 def complete(task)\ns o 11 end Finished in 0.01275 seconds (files took 0.14111 seconds to load)\ns 12 13 examples, 0 failures, 2 pending\neme o 13 def list\nL4 Dhom_dc.sb~-~ v 14 return @tasks 07_single_class_design - rspec\n¥ tasks_design... U 15 end evesessasesFR\nR pec . 16 end . : .\n@ phone_book-. U Pending: (Failures listed here are expected and do not affect your\n) o 17 : '\nsuite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\nrspec v @ todo_list_spec.tb U # Temporarily skipped -1th'xit\nGemfile u # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n25 end\n> 08_debugging... * % ond Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when we complete a task removes the task from the lis\n28 context \"when we-complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\n3 fodo_Listoacclimas thelcary Noni;z:diizéo:t;thod ‘complete’ for #<TodolList:0x00007fae7a8c671\n\" \" u m < :0x0060’\n32 todo_list.add( Hash“the dog\") - 8 @tasks=[\"Wash the cix', “Wash the dog\"]>\n33 todo_list.complete(\"Wash- the-car\") L # ./spec/todo 118t spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [“\"Wash the dog\"] quired)>*\n35 end\n36 end Finished in 0.01206 seconds (files took ©.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “when we try to complete -a non-existent task” do Failed examples:\n39 xit \"fails” do\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\na1 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE p and 07_single_class_design - D\nmain® ¢ [ nn Spaces:2 UTF-8 LF Ruby % Spe! -\n"
  },
  {
    "seconds": 609,
    "text": "ece 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +-ma -\n RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb Pending: (Failures listed here are expected and do not affect your\n> 00_scratch B 1 class TodoList suite's status)\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] . 1) TodoList when we complete a task removes the task from the lis\n< > 03_single_met... a4 end # Temporarily skipped with xit\n> 04_single_met... * s # ./spec/todo_list_spec.rb:29\n> 05_debugging_1 ® 6 def add(task) =\n> 06_single_clas... 7 @tasks << task 2) TodoList when we try to complete a non-existent task fails\nSt e ey 8 end # Temporarily skipped with xit\nVv 0Z_single_clas... * 9 # ./spec/todo_list_spec.rb:39\nv lib B\ne -0 10 def complete(task)\ns o 11 end Finished in 0.01275 seconds (files took 0.14111 seconds to load)\ns 12 13 examples, 0 failures, 2 pending\neme o 13 def list\n¥ phone_desig... U 14 return @tasks 07_single_class_design - rspec\n¥ tasks_design... U 15 end evesessasesFR\nR pec . 16 end . : .\n@ phone_book-. U Pending: (Failures listed here are expected and do not affect your\ne B 17 suite's status)\n@ spec_helper.... U\n@ todo_list_sp... U 1) TodoList when we try to complete a non-existent task fails\nrspec v @ todo_list_spec.tb U # Temporarily skipped with xit\nGemfile u # ./spec/todo_list_spec.rb:39\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n25 end\n> 08_debugging... * e ond Failures:\n> 09_multi_class... *\n> 10_multi_class... * 27 1) TodoList when w% complete a task removes the task from the lis\n28 context \"when we-complete a task\" do t\n29 it “removes the task from the list\" do Failure/Error: todo_list.complete(“Wash the car\")\n30 todo_list = TodoList.new\n3 fodo_Listoacclimas thelcary Noni;::‘t)dii:;or:thod ‘complete’ for #<TodolList:0x00007fae7a8c671\n\" \" u m < :0x0060’\n32 todo_list.add( Hash“the dog\") - 8 @tasks=[\"Wash the car”, “Wash the dog\"]>\n33 todo_list.complete(“Wash the car\") & # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n34 expect(todo_list.list).to eq [\"Wash the dog\"] quired)>'\n35 end\n36 end Finished in 0.01206 seconds (files took ©.14218 seconds to load)\n37 13 examples, 1 failure, 1 pending\n38 context “when we try-to complete a non-existent task” do Failed examples:\n39 xit \"fails” do\n40 todo_list = TodoList.new rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\na1 todo_list.add(\"Wash the car\") k removes the task from the list\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE p and 07_single_class_design - I\nmain® 0AC s Spe! S\n"
  },
  {
    "seconds": 610,
    "text": "eoce fuby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby X +-mDa -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch i 1 class TodoList 1\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) =\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 Snc\nv lib . 5\ne hoa Ty 10 def complete(task)\n11 end\n@ todo_list.rb u 12\neme % 13 def 1ist\nv prone: deng —iY 14 return @tasks\n¥ tasks_design... U 15 end\nR pec . 16 end\n@ phone_book... U 17\n@ spec_helper.... U\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile u\nGemfilelock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 ond\n> 10_multi_class... * a7\n28 context \"when we-complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] W\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE 2 ond\n—= NG 3 Spel .\n"
  },
  {
    "seconds": 611,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh X +-ma -\n~ RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList EPPI ]\n> 01_intro_and_git 2 def initialize\n> 02 testing_bites ® 3 etasks =[] Per_wdirlwg: (Failures listed here are expected and do not affect your\nA suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... ® s 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) T # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : L\nv.h:m_mw :, 10 def complete(task) faliizes:\n& todo_list.rb u i: end 1) TodoList when we complete a task removes the task from the lis\n~ t\nRares % 13 def list Failure/Exror: expect(tedo_list.list).to eq [“Wash the dog\"]\nS Ehone: demg 12 14 return @tasks\n¥ tasks_design... U 15 end expected: [Iwasn the dog\"]\nv spec ° 16 end got: [“\"Wash the car\", \"Wash the dog\")\n@/ piomcbookc. 0 17 (compared using ==)\n@ spec_helper.... U # ./spec/todo_list_spec.rb:34:in \"block (3 levels) in <top (re\n@ todo_list_sp... U guired)>'\nfepec Y @ todo_list_spec.ib U - ;\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * ;: m;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we- complete a task\" do k removes the task from the list\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] W\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails” do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A =\nmain® 0AO % Spe .\n"
  },
  {
    "seconds": 612,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > <o [ zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList wheanaandni DR\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks =[] Per_\\d)rlwg. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) B # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas.. * : end\nv lib ° Failures:\ne ] D 10 def complete(task) |\n@ todo_list.rb u i: end 1) TodoList when we complete a task removes the task from the lis\n- t\ni aa . N 13 def list I Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\n¥ phone_desig... U 14 return @tasks\n¥ tasks_design... U 15 end expected: [\"Wash the dog\"]\nv spec . 16\" iend got: [\"Wash the car”, “Wash the dog\"]\na ne_book... U\nphone | 17 (compared using ==)\n@ spec_helper.... U # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nSoean - @ todo_list_spec.rb U o i\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemflelock U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n25 end\n> 08_debugging... * 26 ond Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") [H|\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ~—\nmain® (Y s Spe! .\n"
  },
  {
    "seconds": 613,
    "text": "eo0ce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X T ) zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList wheanaandni DR\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks =[] Per_\\d)rlwg. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S T 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas.. * : end\nv lib ° 1 | Failures:\no e book Ml 10 def covoltto(task)l |\n@ todo_listrd U 1 end 1) TodoList when we complete a task removes the task from the lis\nS 12 t\ni aa . N 13 def list Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\nS Eone: desg L2 14 return @tasks\n¥ tasks_design... U 15 end expected: [“\"Wash the dog\"]\nv spec - 16\" iend got: [\"Wash the car”, “\"Wash the dog\"]\na ne_book... U\nLo a7 (compared using ==)\n@ spec_helper.... U # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nfspec Y @& todo_list_spec.rb U o :\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemflelock U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n25 end\n> 08_debugging... * 26 ond Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » []\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") [H|\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ~—\nmain® 0 i n 10, Co Spaces (] F Ruby % Spe! 1\n"
  },
  {
    "seconds": 614,
    "text": "oo todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ M- [azsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList wheanaandni DR\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks =[] Per_\\d)rlwg. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S |1 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : o\nv lib ° Failures:\ne ] D 10 def complete(task)\n& todo_list.rb v 1 @tasi 1) TodoList when we complete a task removes the task from the lis\net 12 end t\ni aa B N 13 Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\n¥ phone_desig... U 14 def list\n¥ tasks_design... U 15 return @tasks expected: [“\"Wash the dog\"]\nv spec - 16 ond got: [\"Wash the car”, “\"Wash the dog\"]\na ne_book... U\nLo 17 end (compared using ==)\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nfspec Y @& todo_list_spec.rb U o :\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemflelock U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n25 end\n> 08_debugging... * 26 ond Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » []\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") [H|\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ~—\nmain® 0 [ n1 19 Spaces (] F Ruby % Spe! 1\n"
  },
  {
    "seconds": 615,
    "text": "oo todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ M- [azsh X a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList wheanaandni DR\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks =[] Per_\\d)rlwg. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) L # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas.. * : end\nv lib . i :\n10 def complete(task) O\n@ phone_book.... U\n1 @tasks.xmved) 1) TodoList when we complete a task removes the task from the lis\n@ todo_listrb U 12 sid .\ni aa B N 13 Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\n¥ phone_desig... U 14 def 1ist\n¥ tasks_design... U 15 return @tasks expected: [\"Wash the dog\"]\nv spec B 16 ond got: [\"Wash the car”, “\"Wash the dog\"]\na book... U\nphone | 17 end (compared using ==)\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nSoean - @ todo_list_spec.rb U o i\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nOerilelock. U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n25 end\n> 08_debugging... * 26 ond Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » []\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") [H|\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =F\nmain® 0AC n1,.Col19 Spaces F-8 F Ruby % Spe .\n"
  },
  {
    "seconds": 616,
    "text": "eo0ce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X M- [Jazsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList P - )\n> 01_intro_and_git 2 def initialize i\n> 02_testing_bites ® 3 @tasks =[] Per_\\d)rlwg: (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) L] # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : o\nv.h:m s ; 10 def complete(task) 1 Eallures:\na lodo_ll_sl.rb 1] ;: ':tasks.xe.ove(taskb 1) TodoList when we complete a task removes the task from the lis\n5 e t\ni aa N 13 Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\ne 14 def list\n¥ tasks_design... U 15 return @tasks expected: [“\"Wash the dog\"]\nv spec - 16 ond got: [\"Wash the car”, “\"Wash the dog\"]\n@ phons.book.. U 17 end (compared using ==)\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nSoean - @ todo_list_spec.rb U o i\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » []\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] M\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ~—\nmain® N n 23 Spaces F-8 LF Ruby &3 Spe .\n"
  },
  {
    "seconds": 617,
    "text": "eo0ce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @M [azsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList R\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Per_unrlwg. (Failures listed here are expected and do not affect your\n< suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n3106 debigemal1l® 6 def add(task) L] # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : e\nv lib B i -\ne b 10 def complete(task) geiiress\ns Il_slrb o 11 @tasks.remove(task) 1) TodoList when we complete a task removes the task from the lis\nRt 12 end t\nR B N 13 Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\n¥ phone_desig... U 14 def list I\n¥ tasks_design... U 15 return @tasks expectedf [_wash the d°g..] ) .\nv spec a 16 end got: [“\"Wash the car”, \"Wash the dog\"]\na book... U\nL Algiend (compared using ==)\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nspec Y @& todo_list_spec.rb U e :\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n25 end\n> 08_debugging... * 26 ond Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » []\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") M|\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a 7\nmain* 0 ( n1 ol 24 Spaces: 2 JTF-8 LF Ruby s Spe >\n"
  },
  {
    "seconds": 618,
    "text": "eo0ce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @M [azsh . 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList wainin watnn A B\n> 01_intro_and_git 2 def initialize i\n> 02_testing_bites ® 3 @tasks = [] Per_unrlwg: (Failures listed here are expected and do not affect your\n: suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * s 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) Ll # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : e\nv.h:m ok ; 10 def complete(task) geiiress\na lodo_ll_sl.rb o i: m@;tasks.xe-ove(task) 1) TodoList when we complete a task removes the task from the lis\n. e t\nR N 13 Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\nil Koo s 14 def list\n¥ tasks_design... U 15 return @tasks expected: [:wash the dog:] ) .\nv spec a 16 end got: [“\"Wash the car”, \"Wash the dog\"]\n|ponecbookc. U 17 end (compared using ==)\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\ngoean - @ todo_list_spec.rb U e i\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * i: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » []\n3 todo_list.add(\"Wash the car\") I\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] W\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a 7\nmain*® 0 ( n1 ol 24 Spaces: 2 JTF-8 LF Ruby s Spe >\n"
  },
  {
    "seconds": 619,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U «o [ zsh X +-ma -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList SRR\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Per_unrlwg. (Failures listed here are expected and do not affect your\no suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S _ 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : e\nv lib . i :\ne b 10 def complete(task) geiiress\ng 11 @tasks.remove (task) 1) TodoList when we complete a task removes the task from the lis\n@ todo_listrb U 12 ] .\nR B N 13 Failure/Error: expect(todo_list.list).to eq [“Wash the dog\"]\n¥ phone_desig... U 14 def list\n¥ tasks_design... U 15 return @tasks expected: [“Wash the dog\"]\nv spec a 16 end got: [“\"Wash the car”, \"Wash the dog\"]\na book... U\nphone] 17 end (compared using ==)\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:34:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nspec Y @& todo_list_spec.rb U e :\nGemfile v Finished in 0.03019 seconds (files took 0.13896 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n25 end\n> 08_debugging... * 26 ond Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n3 todo_list.add(\"Wash the car\") I\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") M|\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a 7\nmain® 0AC % Spe .\n"
  },
  {
    "seconds": 620,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh x +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch . 1 class TodoList 1\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[]\nol > 03_single_met.. * 4 end\n> 04_single_met... ® S\n> 06_debugging_1 * 6 def add(task) |y\n108 singlel cleet® 7 @tasks << task\nv 07_single_clas... ® s anc\nv lib . 2\n8o book Ml 10 def complete(task)\nN 0 11 @tasks.remove (task)\no 12 end\nV' recipes . 13\nil Koo s 14 def list\ns 15 return @tasks\nRaepac » 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U\nrspec YU @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 (e\n> 10_multi_class... * 1\n28 context “\"when we-complete a task\" do\n29 it “\"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] W\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE g ond\noy NG 3 Spel .\n"
  },
  {
    "seconds": 621,
    "text": "eo0ce fuby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > -+ 3] ruby X +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList EPWCIRIRENN )\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_wdirlwg: (Failures listed here are expected and do not affect your\nY suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 6 def add(task) ' # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : e\nv.h:m ok ; 10 def complete(task) fallures:\na todo_ll_sl.rb o i: .m@;tasks.xe-ove(task) . 1) TodoList when we complete a task removes the task from the lis\ne ‘ 13 Failure/Exror: @tasks.remove(task)\nil Koo s 14 def list\n¥ tasks_design... U 15 return @tasks NoNetnoqErroz: . ) ) o\nv spec = 16 end NJ‘Ana;mdcnned method ‘remove' for [“Wash the car”, “Wash the dog\n@ phone_book... U 17  end # ./lib/todo_list.rb:11:in ‘complete'\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in \"block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\ngoean - @ todo_list_spec.rb U o ’\nGemfile v Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] W\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a 7\nmain® 0AC % Spe .\n"
  },
  {
    "seconds": 622,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U <o [ zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList a et\n> 01_intro_and_git 2 def initialize\n: > 02_testing_bites ® 3 @tasks = [] :zg:évg.sé:i::;xes listed here are expected and do not affect your\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * 5 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) 1 # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ead\nv.h:m_bookw ; 10 def complete(task) oA\n& todo_listrd U i: .m@;tasks.xmve(task) . 1) TodoList when we complete a task removes the task from the lis\nne ‘ 13 Failure/Exror: @tasks.remove(task)\nN phone e 14 def list\n¥ tasks_design... U 15 return @tasks NoMethod_Exrox: ) 9{ . 1\nv spec s 16 end N]‘Aua:ndchned method ' remov for [“\"Wash the car\", \"Wash the dog\n(e P 17 end \"8 ./1ib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>\"'\n. v\nG:::\";a - B \" Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemilelock. U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n= = 28 context “when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0 A\\ C % Spel .\n"
  },
  {
    "seconds": 623,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U <o [ zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList a et\n> 01_intro_and_git 2 def initialize 4 (Fail 14 . o £\n; = - Pending: (Failures listed here are expected and do not affect your\n3 tasks =\n2 > 02_testing_bites © 0 0 suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... ® S __ 1) TodoList when we try to complete a non-existent task fails\n> 05_det ing1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * : ead\nv lib . i :\ne o 10 def complete(task) ERLUIR\n! 1 @tasks. remove (task) 1) TodoList when we complete a task removes the task from the lis\n@ todo_list.rb u 12 ond \"\nv recipes : o 13 Failure/Exrror: @tasks.remove(task)\n¥ phone_desig... U 14 def list\n¥ tasks_design... U 15 retuzn- @tasks NoMethodExrox:\n+ spec ° 16 - e undefined method 'rzmove' for [“\"Wash the car\", \"Wash the dog\n“]:Array\n2]\n@ phare hook 17 end # ./lib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>\"'\nJrspec v\nGemfile v Giia Brmacb y Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n25 end\n> 08_debugging... * % \" Failed examples:\n> 09_multi_class... * b\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n= 28 context “when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") [H|\n34 expect(todo_list.list).to eq [“Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A ~=F\nmain® 0AC % Spe .\n"
  },
  {
    "seconds": 624,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U <o [ zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList a et\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 @tasks = [] Per_\\airlwg: (Failures listed here are expected and do not affect your\nE suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... ® S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) Il # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ead\nv.h:m o ; 10 def complete(task) oA\na todo_ll_st.m v i: .m@;tasks.xmve(task) . 1) TodoList when we complete a task removes the task from the lis\nne B ‘ 13 Failure/Exror: @tasks.remove(task)\n¥ phone_desig. U 14 | .def-1ust\n¥ tasks_design... U 15 return @tasks NoMethod_Exrox: ) . 1\nv spec . 16 end N]‘Aua:ndchned method Iemove for [“\"Wash the car\", \"Wash the dog\n(e P 17 end \"8 ./1ib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nSopan - @ todo_list_spec.rb U o i\nGemfile U Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A ~=F\nmain® 0 A % Spel .\n"
  },
  {
    "seconds": 625,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U <o [ zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList a et\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 @tasks = [] Per_\\airlwg: (Failures listed here are expected and do not affect your\nE suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... ® S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) Il # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ead\nv.h:m o ; 10 def complete(task) oA\na todo_ll_st.m v i: .m@;tasks.xmve(task) . 1) TodoList when we complete a task removes the task from the lis\nne B ‘ 13 Failure/Exror: @tasks.remove(task)\n¥ phone_desig. U 14 | .def-1ust\n¥ tasks_design... U 15 return @tasks NoMethod_Exrox: ) . 1\nv spec . 16 end N]‘Aua:ndchned method Iemove for [“\"Wash the car\", \"Wash the dog\n(e P 17 end \"8 ./1ib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nSopan - @ todo_list_spec.rb U o i\nGemfile U Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » ||\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A ~=F\nmain® 0 A % Spel .\n"
  },
  {
    "seconds": 626,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U <o [ zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList a et\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 @tasks = [] Per_\\airlwg: (Failures listed here are expected and do not affect your\nE suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... ® S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) Il # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ead\nv.h:m o ; 10 def complete(task) oA\na todo_ll_st.m v i: .m@;tasks.xmve(task) . 1) TodoList when we complete a task removes the task from the lis\nne ‘ 13 Failure/Exror: @tasks.remove(task)\n¥ phone_desig. U 14 | .def-1ust\n¥ tasks_design... U 15 return @tasks NoMethod_Exrox: _ ) . 1\nv spec s 16 end N]‘Aua:ndchned method ‘remove' for [“Wash the car\", \"Wash the dog\n(e P 17 end \"8 ./1ib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\nSopan - @ todo_list_spec.rb U o i\nGemfile U Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemile.Jock v 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do k removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » if]\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A ~=F\nmain® 0 A % Spel .\n"
  },
  {
    "seconds": 627,
    "text": "eo0ce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U «o [ zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList PR )\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_adxrlag: (Failures listed here are expected and do not affect your\ne suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... ® S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) Il # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ead\nv.h:m ok ; 10 def complete(task) O AT\na todo_ll_st.rb v i: .m@;tasks.xmve(task) . 1) TodoList when we complete a task removes the task from the lis\nsl ‘ 13 Failure/Exror: @tasks.remove(task)\n¥ phone_desig. U 14 | .def-11st\n¥ tasks_design... U 15 return @tasks NoMethod_Exrox: _ ) . I\nv spec . 16 end N]‘Ana:ndenned method ‘remove' for [“Wash the car\", \"Wash the dog\noo el 17 end # ./lib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\ne - @ todo_list_spec.rb U o i\nGemfile v Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemfilelock U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do Kk removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design » irbfl\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] M\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\n== oA C 3 Spel .\n"
  },
  {
    "seconds": 628,
    "text": "eo0ce ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U < [ ruby X +v 048 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList PR )\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_adxrlag: (Failures listed here are expected and do not affect your\ne suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) Il # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ead\nv.h:m ok ; 10 def complete(task) O AT\na todo_ll_st.rb v i: m@;tasks.xmve(task) 1) TodoList when we complete a task removes the task from the lis\n» e t\nsl ‘ 13 Failure/Exror: @tasks.remove(task)\n¥ phone_desig. U 14 | .def-11st\n¥ tasks_design... U 15 return @tasks NoMethod_Exrox: _ ) . I\nv spec . 16 end N]‘Ana:ndenned method ‘remove' for [“Wash the car\", \"Wash the dog\noo el 17 end # ./lib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\ne - @ todo_list_spec.rb U o i\nGemfile v Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemfilelock U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do Kk removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design - irb\n3 todo_list.add(\"Wash the car\") 3.0.0 :001 > |\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] M\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\n== oA C 3 Spel .\n"
  },
  {
    "seconds": 629,
    "text": "eo0ce ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U < [ ruby X +v 048 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList PR )\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_adxrlag: (Failures listed here are expected and do not affect your\ne suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) Il # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ead\nv.h:m ok ; 10 def complete(task) O AT\na todo_ll_st.rb v i: m@;tasks.xmve(task) 1) TodoList when we complete a task removes the task from the lis\n» e t\nsl ‘ 13 Failure/Exror: @tasks.remove(task)\n¥ phone_desig. U 14 | .def-11st\n¥ tasks_design... U 15 return @tasks NoMethod_Exrox: _ ) . I\nv spec . 16 end N]‘Ana:ndenned method ‘remove' for [“Wash the car\", \"Wash the dog\noo el 17 end # ./lib/todo_list.rb:11:in ‘complete’\n@ spec_helper.... U 18 # ./spec/todo_list_spec.rb:33:in 'block (3 levels) in <top (re\n@ todo_list_sp... U quired)>'\ne - @ todo_list_spec.rb U o i\nGemfile v Finished in 0.01298 seconds (files took 0.14574 seconds to load)\nGemfilelock U 07_single_class_design > spec > @ todo_list_spec.rb 13 examples, 1 failure, 1 pending\n> 08_debugging... * :: .n;\"d Failed examples:\n> 09_multi_class... *\n> 10_multi_class... * 27 rspec ./spec/todo_list_spec.rb:29 # TodoList when we complete a tas\n28 context “\"when we complete a task\" do Kk removes the task from the list\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new 07_single_class_design - irb\n3 todo_list.add(\"Wash the car\") 3.0.0 :001 > |\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] M\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\n== oA C 3 Spel .\n"
  },
  {
    "seconds": 630,
    "text": "eo0ce ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > ['\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 * 6 def add(task) K1\nS (T e [ 7 @tasks << task\nv 07_single_clas... ® 8 anc\nv lib . 2\ne book Ml 10 def complete(task)\nA u 11 @tasks.xemove (task)\no 12 end\nVv recipes . 13\nil Koo s 14 def list\nA 15 return @tasks\ne s 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U\nJopag - @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 e\n> 10_multi_class... * 27\n28 context \"when we-complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] M\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0A0 s Spe Q\n"
  },
  {
    "seconds": 631,
    "text": "eo0ce ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > (1, 2, 3].\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 * 6 def add(task) K1\nS (T e [ 7 @tasks << task\nv 07_single_clas... ® 8 anc\nv lib . 2\ne book Ml 10 def complete(task)\nA u 11 @tasks.xemove (task)\no 12 end\nVv recipes . 13\nil Koo s 14 def list\nA 15 return @tasks\ne s 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U\nJopag - @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 e\n> 10_multi_class... * 27\n28 context \"when we-complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] M\n35 end\n36 end\n37\n38 context “when we try to complete -a non-existent task” do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0A0 s Spe Q\n"
  },
  {
    "seconds": 632,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U > ruby . +v 048 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].tem0vel\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met... ® 4 end\n> 04_single_met... ® 5\n> 05_debugging_1 * 6 def add(task) 1\n5108 single clea’s' & 7 @tasks << task\nv 07_single_clas... ® o nc\nv lib B 9\nA& i 11 10 def complete(task)\nT i 11 @tasks.xremove (task)\n= 12 end\nVv recipes . 13\ng e 14 def list\no oM 15 return @tasks\ne 5 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nABpap - @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 end\n> 10_multi_class... * 27\n28 context “\"when we-complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0A0 s Spe Q)\n"
  },
  {
    "seconds": 633,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U > ruby . +v 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].19,,'\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met... ® 4 end\n> 04_single_met... ® 5\n> 05_debugging_1 * 6 def add(task) 1\n5108 single clea’s' & 7 @tasks << task\nv 07_single_clas... ® o nc\nv lib B 9\nA& i 11 10 def complete(task)\n6 T i 11 @tasks.xremove (task)\n= 12 end\nVv recipes . 13\ng e 14 def list\no oM 15 return @tasks\ne 5 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nABpap - @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 end\n> 10_multi_class... * 27\n28 context “\"when we-complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0A0 s Spe Q)\n"
  },
  {
    "seconds": 634,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U > ruby . +v 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete|\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met... ® 4 end\n> 04_single_met... ® 5\n> 05_debugging_1 * 6 def add(task) 1\n5108 single clea’s' & 7 @tasks << task\nv 07_single_clas... ® o nc\nv lib B 9\nA& i 11 10 def complete(task)\n6 T i 11 @tasks.xremove (task)\n= 12 end\nVv recipes . 13\ng e 14 def list\no oM 15 return @tasks\ne 5 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nABpap - @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 end\n> 10_multi_class... * 27\n28 context “\"when we-complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0A0 s Spe Q)\n"
  },
  {
    "seconds": 635,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U > ruby . +v 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch - 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > ||\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met.. ® 4 end\n> 04_single_met... * 5\n> 05_debugging_1 * 6 def add(task) 1\n5108 single clea’s' & 7 @tasks << task\nv 07_single_clas... ® o nc\nv lib B 9\nA& i 11 10 def complete(task)\n6 T i 11 @tasks.xremove (task)\n= 12 end\nVv recipes . 13\ng e 14 def list\no oM 15 return @tasks\ne 5 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nABpap - @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 end\n> 10_multi_class... * 27\n28 context “\"when we-complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task” do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0A0 s Spe Q)\n"
  },
  {
    "seconds": 636,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U > ruby . +v 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch - 1 class TodoList => 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > (1, 2, 3].dclete(2)l\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met.. ® 4 end\n> 04_single_met... 5\n> 05_debugging_1 * 6 def add(task) 1\n5108 single clea’s' & 7 @tasks << task\nv 07_single_clas... ® o nc\nv lib B 9\nA& i 11 10 def complete(task)\n6 T i 11 @tasks.xremove (task)\n= 12 end\nVv recipes . 13\ng e 14 def list\no oM 15 return @tasks\ne 5 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 20 end\n> 10_multi_class... * 27\n28 context “\"when we-complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“Wash the dog\"] I\n35 end\n36 end\n37\n38 context “when we txry to complete a non-existent task” do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0A0 s Spe Q)\n"
  },
  {
    "seconds": 637,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > (1, 2, 3].delete(2)l\n> 02_testing_bites ® 3 @tasks =[]\n- > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task)\n5108 single’ clea s 7 @tasks << task\nv 07_single_clas... ® 8 and\n9\ne ‘ 10 def complete(task)\n@ phone_book.... U i\nool et a 11 @tasks.xemove (task)\ni 12 end\nv recipes b 13\nviphona deed— LN 14 | -def-list\nSt Cotion_tL 15 return @tasks\nML i 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nfepec YU @ todo_list_spec.ib U\nGemfile v i v\nol lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® :6 ond\n> 10_multi_class... * Z\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") | |\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\nmain® 0AO % Spe .\n"
  },
  {
    "seconds": 638,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > ||\n> 02_testing_bites ® 3 @tasks =[]\n“ > 03_single_met... ® 4 end\n> 04_single_met... S\n> 05_debugging_1 ® 6 def add(task) I\n5108 single’ clea s 7 @tasks << task\nv 07_single_clas.. * 8 end\nv lib . >\ne boa S s 10 def complete(task)\nool et a 11 @tasks.xemove (task)\nP 12 end\nVv recipes b 13\nviphona deed— LN 14 | -def-list\nSt Cotion_tL 15 return @tasks\nML i 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nfepec YU @ todo_list_spec.ib U\nGemfile v\nol lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\n= OAO 3 Spe .\n"
  },
  {
    "seconds": 639,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > ||\n> 02_testing_bites ® 3 @tasks =[]\n“ > 03_single_met... ® 4 end\n> 04_single_met... S\n> 05_debugging_1 ® 6 def add(task) I\n5108 single’ clea s 7 @tasks << task\nv 07_single_clas.. * 8 end\nv lib . >\ne boa S s 10 def complete(task)\nool et a 11 @tasks.xemove (task)\nP 12 end\nVv recipes b 13\nviphona deed— LN 14 | -def-list\nSt Cotion_tL 15 return @tasks\nML i 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nfepec YU @ todo_list_spec.ib U\nGemfile v\nol lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\n= OAO 3 Spe .\n"
  },
  {
    "seconds": 640,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > [\n> 02_testing_bites ® 3 @tasks =[]\n“ > 03_single_met... ® 4 end\n> 04_single_met... S\n> 05_debugging_1 ® 6 def add(task) I\n5108 single’ clea s 7 @tasks << task\nv 07_single_clas.. * 8 end\nv lib . >\ne boa S s 10 def complete(task)\nool et a 11 @tasks.xemove (task)\nP 12 end\nVv recipes b 13\nviphona deed— LN 14 | -def-list\nSt Cotion_tL 15 return @tasks\nML i 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nfepec YU @ todo_list_spec.ib U\nGemfile v\nol lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\n= OAO 3 Spe .\n"
  },
  {
    "seconds": 641,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > @tasks = ||\n> 02_testing_bites ® 3 @tasks =[]\n“ > 03_single_met... ® 4 end\n> 04_single_met... * S\n> 05_debugging_1 ® 6 def add(task) I\n5108 single’ clea s 7 @tasks << task\nv 07_single_clas.. * 8 end\nv lib . >\ne boa S s 10 def complete(task)\nool et a 11 @tasks.xemove (task)\nP 12 end\nVv recipes b 13\nviphona deed— LN 14 | -def-list\nSt Cotion_tL 15 return @tasks\nML i 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nfepec YU @ todo_list_spec.ib U\nGemfile v\nol lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a =\n= OAO 3 Spe .\n"
  },
  {
    "seconds": 642,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > ]\n> 02_testing_bites ® 3 @tasks =[]\n- > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 nc\nv lib . >\ne boss N I 10 def complete(task)\ne u 11 @tasks.remove (task)\ni 12 end\nVv recipes b4 13\n¥iphone deslg— U 14  |..des-1ist\nS Cotir_LL 15 return @tasks\nNapec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 end\n> 10_multi_class... * 27\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 s Spe Q\n"
  },
  {
    "seconds": 643,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks =\n> 02_testing_bites ® 3 @tasks =[]\n- > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 nc\nv lib . >\ne boss N I 10 def complete(task)\ne u 11 @tasks.remove (task)\ni 12 end\nVv recipes b4 13\n¥iphone deslg— U 14  |..des-1ist\nS Cotir_LL 15 return @tasks\nNapec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 end\n> 10_multi_class... * 27\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 s Spe Q\n"
  },
  {
    "seconds": 644,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = (]\n> 02_testing_bites ® 3 @tasks =[]\n- > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 nc\nv lib . >\ne boss N I 10 def complete(task)\ne u 11 @tasks.remove (task)\ni 12 end\nVv recipes b4 13\n¥iphone deslg— U 14  |..des-1ist\nS Cotir_LL 15 return @tasks\nNapec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 end\n> 10_multi_class... * 27\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 s Spe Q\n"
  },
  {
    "seconds": 645,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:af]\n> 02_testing_bites ® 3 @tasks =[]\n- > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 nc\nv lib . >\ne boss N I 10 def complete(task)\ne u 11 @tasks.remove (task)\ni 12 end\nVv recipes b4 13\n¥iphone deslg— U 14  |..des-1ist\nS Cotir_LL 15 return @tasks\nNapec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 end\n> 10_multi_class... * 27\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 s Spe Q\n"
  },
  {
    "seconds": 646,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :bf]\n> 02_testing_bites ® 3 @tasks =[]\n- > 03_single_met... ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 nc\nv lib . >\ne boss N I 10 def complete(task)\ne u 11 @tasks.remove (task)\ni 12 end\nVv recipes b4 13\n¥iphone deslg— U 14  |..des-1ist\nS Cotir_LL 15 return @tasks\nNapec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 end\n> 10_multi_class... * 27\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 s Spe Q\n"
  },
  {
    "seconds": 647,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, l\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met.. ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 Snc\nv lib . >\ne boss It 10 def complete(task)\ne i 11 @tasks.remove (task)\n- 12 end\nv recipes b 13\n¥ phone_desig. U ;5 | .des-11st\nA T o 15 return @tasks\nNpec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile V]\no lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] B\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 s Spe Q)\n"
  },
  {
    "seconds": 648,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, l\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met.. ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 Snc\nv lib . >\ne boss It 10 def complete(task)\ne i 11 @tasks.remove (task)\n- 12 end\nv recipes b 13\n¥ phone_desig. U ;5 | .des-11st\nA T o 15 return @tasks\nNpec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile V]\no lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 s Spe Q)\n"
  },
  {
    "seconds": 649,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]l\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met.. ® 4 end\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 Snc\nv lib . >\ne boss It 10 def complete(task)\ne i 11 @tasks.remove (task)\n- 12 end\nv recipes b 13\n¥ phone_desig. U ;5 | .des-11st\nA T o 15 return @tasks\nNpec e 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile V]\no lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n. 42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A and\nmain® 0AO0 s Spe Q)\n"
  },
  {
    "seconds": 650,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n> 02_testing_bites * 3 @tasks =[] = [:a,. :b, icl\nBl > 03_single_met.. * 4 end geieentll\n> 04_single_met... ® S\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 Snc\nv lib . >\ne boss It 10 def complete(task)\ne i 11 @tasks.remove (task)\n- 12 end\nVv recipes b4 13\n¥ phone_desig. U ;5 | .des-11st\nA T o 15 return @tasks\nN s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile V]\no lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AQ s Spe Q)\n"
  },
  {
    "seconds": 651,
    "text": "[ XN J ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3]).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\ns 3w e e\n> 03_single_met... ® end = [:a, :b, :€]\n> 04_single_met... ® = 3.0.0 :004 > tas]\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 Snc\nv lib . >\ne boss It 10 def complete(task)\ne i 11 @tasks.remove (task)\n- 12 end\nVv recipes b4 13\n¥ phone_desig. U ;5 | .des-11st\nA T o 15 return @tasks\nN s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile V]\no lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE A and\nmain® 0AQ s Spe Q)\n"
  },
  {
    "seconds": 652,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\n~ RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n. T R I e\n> 03_single_met... end => [:a, :b, :¢]\n> 04_single_met... ® 5 3.0.0 :004 > tasks.delete(]]\n> 05_debugging_1 ® 6 def add(task) 1\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 snc\nv lib . >\no= {1 10 def complete(task)\nA s 0 11 @tasks.xremove (task)\n—— 12 end\nVv recipes b 13\n¥iphone deslg— U 14 | .des-1ist\ns 15 return @tasks\nNl s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] B\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails” do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AQ s Spe Q)\n"
  },
  {
    "seconds": 653,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\n~ RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n. T R I e\n> 03_single_met... end => [:a, :b, :¢]\n> 04_single_met... ® S 3.0.0 :004 > tasks.delete(:c]]\n> 05_debugging_1 ® 6 def add(task) 1\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® 8 snc\nv lib . >\no= {1 10 def complete(task)\nA s 0 11 @tasks.xremove (task)\n—— 12 end\nVv recipes b 13\n¥iphone deslg— U 14 | .des-1ist\ns 15 return @tasks\nNl s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] B\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails” do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AQ s Spe Q)\n"
  },
  {
    "seconds": 654,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n. T R I e\n> 03_single_met... end => [:a, :b, :¢]\n> 04_single_met... ® S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) = = :b\nooty 7 @tasks << task 3.0.0 :005 > |\nv 07_single_clas... ® 8 snc\nv lib . >\no= {1 10 def complete(task)\nA s 0 11 @tasks.xremove (task)\n—— 12 end\nVv recipes b 13\n¥iphone deslg— U 14 | .des-1ist\ns 15 return @tasks\nNl s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] B\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails” do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AQ s Spe Q)\n"
  },
  {
    "seconds": 655,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n. T R I e\n> 03_single_met... end => [:a, :b, :¢]\n> 04_single_met... ® S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) = = :b\nooty 7 @tasks << task 3.0.0 :005 > taf]\nv 07_single_clas... ® 8 snc\nv lib . >\no= {1 10 def complete(task)\nA s 0 11 @tasks.xremove (task)\n—— 12 end\nVv recipes b 13\n¥iphone deslg— U 14 | .des-1ist\ns 15 return @tasks\nNl s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] B\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit “fails” do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AQ s Spe Q)\n"
  },
  {
    "seconds": 656,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n. T R I e\n> 03_single_met... end => [:a, :b, :¢]\n> 04_single_met... ® S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) = = :b\n106 single clesl e 7 @tasks << task 3.0.0 :005 > tasks\nv 07_single_clas.. * 8 end T2 lalne]\nSolies 9 3.0.0 :006 > [\nv.h:m_mw :J 10 def complete(task)\nA s 0 11 @tasks.xremove (task)\n—— 12 end\nVv recipes b4 13\n¥iphone deslg— U 14 | .des-1ist\ns 15 return @tasks\nNl s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 ond\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] B\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails” do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AQ s Spe Q)\n"
  },
  {
    "seconds": 657,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\n~ RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n3 2 3 @tasks = => [:a, :b, :c]\n2 > 02_lfslmg_bnes . 2 ALy 8] 3.0.0 :003 > tasks\n> 03_single_met... * => [:a, :b, :c]\n> 04_single_met... S | 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) T\n106 single clesl e 7 @tasks << task 3.0.0 :005 > tasks\n07_single_clas... ® 8 end => [:a, :c)\nMO 9 3.0.0 :006 > [\nv lib K\ne u =0 10 def complete(task)\n11 @tasks.remove (task)\n@ todo_listrb U\n\" 12 end\nv recipes b4 13 I\n¥iphone deslg— U 14 | .des-1ist\ns 15 return @tasks\nMy 7 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec Y @ todo_list_spec.ib U\nGemfile V] i v\nOemilelock. U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 ond\n> 09_multi_class... ® :6 ond\n> 10_multi_class... * i\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\") L\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails” do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO0 3 Spe .\n"
  },
  {
    "seconds": 658,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n| > o2-testing_bites * : @tasks =[] ::()a.zg:?éoéb; ;:iks\n° > 03_single_met... end => [:a, :b, :c]\n> 04_single_met... ® S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) B = :\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\n- 8 end => [:a, :c]\nMOZsingle_cles=. & 9 3.0.0 :006 > ||\nv.h:m_mw :J 10 def co-slotc(task)\ne d 11 @taskd. remove (task)\n- 12 end\nVv recipes L 13\n¥ phone_desig-. U ;5 | .des-11st\ns 15 return @tasks\nN s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE 4 and\nmain* [NV s Spe’ )\n"
  },
  {
    "seconds": 659,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n| > o2-testing_bites * : @tasks =[] ::()a.zg:?éoéb; ;:iks\n° > 03_single_met... end => [:a, :b, :c]\n> 04_single_met... ® S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) B = :\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\n- 8 end => [:a, :c]\nMOZsingle_cles=. & 9 3.0.0 :006 > ||\nv.h:m_mw :J 10 def complete(task)\ne EaaTEE R 11 @tasks. xfmove (task)\n- 12 end\nVv recipes L 13\n¥ phone_desig-. U ;5 | .des-11st\ns 15 return @tasks\nN s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain* [NV s Spe’ )\n"
  },
  {
    "seconds": 660,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n| > o2-testing_bites * : @tasks =[] ::()a.zg:?éoéb; ;:iks\n° > 03_single_met... * end = [:a, :b, :¢) I\n> 04_single_met... * S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) B =\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\n- 8 end => [:a, :c]\nVv OLsingle_cles... © ° 3.0.0 :006 > |\nv.h:m_mw :J 10 def complete(task)\ne d 11 @tasks. xremove (task)\n- 12 end\nVv recipes b4 13\n¥ phone_desig-. U ;5 | .des-11st\ns 15 return @tasks\nN s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain* [NV s Spe’ )\n"
  },
  {
    "seconds": 661,
    "text": "[ N ruby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > ruby . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch = 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n. TR LS\n> 03_single_met... end => [:a, :b, :¢]\n> 04_single_met... * S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 ® 6 def add(task) B =\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\n- 8 end => [:a, :c]\nMOZsingle_cles=. & 9 3.0.0 :006 > |\nv.h:m_mw :J 10 def complete(task)\ne d 11 @tasks. xremove (task)\n- 12 end\nVv recipes L 13\nVDIne Coe0—e 14 | det st\ns 15 return @tasks\nN s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain* [NV s Spe’ )\n"
  },
  {
    "seconds": 662,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X w o - ruby . 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n> 02_testing_bites * 3 @tasks =[] ;S zg:?éo;b; ;:iks\n- > 03_single_met... * @ end ;>.[:;, b, =]\n> 04_single_met... * s 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) B = b\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\nB 8 end => [:a, :c]\nv 07_single_clas... * 5 3.0.0 :006 > []\nv.h:m Tocils :J 10 def co-plot:c(-task)\n. 11 @tasks. remove|(task)\n- 12 end\nVv recipes b4 13\n¥ phone_desig. U ;5 | .des-11st\ns 15 return @tasks\nN s 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nTepec Y @ todo_list_spec.ib U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 1\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a ond\nmain® 0AO n 18 (6 sefected! yaces S F Ruby s Spe .\n"
  },
  {
    "seconds": 663,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @ m - ruby ° 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize S.GA(E :002D> ta;ks = [:a, :b, :c]\n] \" - => [:a, b, IC\n08 2 02\"5\"\"9'.\"\"‘ x : .ngtasks it 3.0.0 :003 > tasks\n> 03_single_met... ® => [:a, :b, :c]\n> 04_single_met... * 5 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) B = b\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\nv 07_single_clas.. * 8 end 2 el\nSolies 9 3.0.0 :006 > ]\nv.h:m_mw :J 10 def complete(task)\neI d 11 @tasks.delete(task)\no 12 end I\nVv recipes b 13\n¥iphone deslg— U8 14 | .des-1ist\ns CAE 15 return @tasks\nN = 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE 4 and\nmain* 0 0 n 1, Col 18 paces: 2 UTF-8 LF Ruby s Spe’ .\n"
  },
  {
    "seconds": 664,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @ m - ruby ° 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n> 02_testing_bites ® 3 @tasks =[] 3.0 zg:?ée;b; t:::iks\nBl > 03_single_met.. ® 4 end = [, :b,\n> 04_single_met... * 5 Iy 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) =i\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\nv 07_single_clas.. * 8 end = [:f' :c)\nCE i 9 3.0.0 :006 > ]\nA=t 11 10 def co-pleto(task)l I\neI d 11 @tasks.delete(task)\ni 12 end\nVv recipes b 13\n¥iphone deslg— U8 14 | .des-1ist\ns CAE 15 return @tasks\nN = 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO n 10, Col 21 paces:2 UTF-8 LF Ruby % Spe! ]\n"
  },
  {
    "seconds": 665,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @ am - ruby ° 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\nB > 02_testing_bites © 3 @tasks =[] 3?(;.15:?6@;\"; ;:iks\n: > 03_single_met... ® 4 end = [:a, :b, :c]\n> 04_single_met... ® S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 ® 6 def add(task) T =\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\n. 8 end = [:a, :c]\nv 07_single_clas... * = 3.0.0 :006 > []\nv.h:m_mw :J 10 def complete(task)\neI d 11 @tasks.delete(task)\ni 12 end\nVv recipes ) b 13 I\n¥iphone deslg— U8 14 | .des-1ist\ns CAE 15 return @tasks\nN = 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain* 0 [ n1, Cc 4 paces: 2 UTF-8 LF Ruby s Spe’ .\n"
  },
  {
    "seconds": 666,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @ am - ruby ° 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3).delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n> 02_testing_bites ® 3 @tasks =[] 3.0 zg:?ée;b; t:::iks\n: > 03_single_met... ® 4 end = [:a, :b, :c]\n> 04_single_met... * 5 L 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) =i\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\nv 0Z_single_clas... * o e 3=g é.éeécl D\nv lib . > T\nA=t 11 10 def complete(task)\neI d 11 @tasks.delete(tixsk)\ni 12 end\nVv recipes b 13\n¥iphone deslg— U8 14 | .des-1ist\ns CAE 15 return @tasks\nN = 16 end\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE 4 and\nmain® 0AO n 11, Col 20 paces:2 UTF-8 LF Ruby % Spe! ]\n"
  },
  {
    "seconds": 667,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X @ am - ruby ° 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodoList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\n> 02_testing_bites ® 3 @tasks =[] 3.0 zg:?ée;b; t:::iks\ngl > 03_single_met.. * 4 end = [, :b,\n> 04_single_met... * 5 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) B =\n> 06_single_clas... ® 7 @tasks << task 3.0.0 :005 > tasks\nv 07_single_clas.. * 8 end = [:f' :c)\nCE i 9 3.0.0 :006 > ]\nA=t 11 10 def complete(task)\neI d 11 ﬂtasks.delete(thsk)\ni 12 end\nVv recipes b 13\n¥iphone deslg— U8 14 | .des-1ist\ns CAE 15 return @tasks\nN = 16 end I\n@ phone_book... U 17  end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-rspec YU @ todo_list_spec.ib U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... ® <8 ond\n> 10_multi_class... * 22\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 xit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n> TIMELINE a \"\nmain® 0AO n 11, Col 20 paces:2 UTF-8 LF Ruby % Spe! ]\n"
  },
  {
    "seconds": 668,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh ° +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 3.0.0 :001 > [1, 2, 3].delete(2)\n> 00_scratch B 1 class TodolList = 2\n> 01_intro_and_git 2 def initialize 3.0.0 :002 > tasks = [:a, :b, :c]\nPl > 02-testing_bites ¢ 3 @tasks =[] ;;.é:?é@;b; ;;iks\n> 03_single_met... * 4 end => [:a, :b, :c]\n> 04_single_met... S 3.0.0 :004 > tasks.delete(:b)\n> 05_debugging_1 * 6 def add(task) B e :b\n> 06_single_clas... 7 @tasks << task 3.0.0 :005 > tasks\nv 07_single_clas... * s Snc e [:?' <1\n- = 9 3.0.0 :006 >\nv lib ® 10 @at: completa(task) 07_single_class_design - [I\n@ phone_book.... U\ne SRR 1 @tasks.delete(task)\ni 12 end\nv recipes . 13\n¥ phone_desig. U 55 | .des-11st\nAL ol 15 return @tasks\nNl s 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\n-TopRe Y @ todo_list_spec.rb U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * <6 ond\n> 10_multi_class... * 2%\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE . ond\nmain® 0AD s Spe! =\n"
  },
  {
    "seconds": 669,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh ° +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspecl\n> 00_scratch B 1 class TodolList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites * 3 @tasks =[]\nBl > 03_single_met.. ® 4 end\n> 04_single_met... 5\n> 05_debugging_1 ® 6 def add(task) i\n> 06_single_clas... * 7 @tasks << task\nv 07_single_clas... ® : Snc\nv lib s 9\ne 10 def complete(task)\nG i 11 @tasks.delete(task)\ni 12 end\nv recipes . 13\n¥ phone_desig. U 55 | .des-11st\nAL ol 15 return @tasks\nNl s 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U\n-TopRe Y @ todo_list_spec.rb U\nGemfile V]\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * 26 end\n> 10_multi_class... * 2%\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n1 40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE . ond\nmain® oOAO 3 Spe .\n"
  },
  {
    "seconds": 670,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh . +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodolList Daraials i\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Per}dirlag: (Failures listed here are expected and do not affect your\ne suite's status)\n¢ > 03_single_met... * 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) ¥ # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * 8 end\nVv lib ° 1: @at: completa(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n11 @tasks.delete(task)\n@ todo_list.rb u\nS oo . i: end 07_single_class_design » ||\nVR 14 def list\nAL ol 15 return @tasks 1\nNl s 16 end\n@ phone_book... U 17 end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-TopRe Y @ todo_list_spec.rb U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * <6 ond\n> 10_multi_class... * -y\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] I\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exror \"No such task.\n> TIMELINE A and\n—= oA G % Spel .\n"
  },
  {
    "seconds": 671,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodolList Daraials i\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Per}dirlwg: (Failures listed here are expected and do not affect your\ne suite's status)\n¢ > 03_single_met... * 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) 5 # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * 8 end\nVv lib ° 1: @at: completa(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n11 @tasks.delete(task)\n@ todo_list.rb u\nS oo . i: end 07_single_class_design » ||\n¥ phone_desig. U 55 | .des-11st\nAL ol 15 return @tasks\nNl s 16 end\n@ phone_book... U 17 end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-TopRe Y @ todo_list_spec.rb U\nGemfile v\nGemfile.lock v 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 25 end\n> 09_multi_class... * <6 ond\n> 10_multi_class... * -y\n28 context “\"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] il\n35 end 1\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 xit \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_exrror \"No such task.\n> TIMELINE A Swend\n—= oA G % Spel .\n"
  },
  {
    "seconds": 672,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design + rspec\n> 00_scratch B 1 class TodolList & el Galn/idn P\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Per}dhlwg: (Failures listed here are expected and do not affect your\ne suite's status)\n¢ > 03_single_met... * 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) 7 # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * 8 end\nVv lib ° 1: @at: completa(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n11 @tasks.delete(task)\n@ todo_list.rb u\nS oo . i: end 07_single_class_design » ||\n¥ phone_desig. U 55 | .des-11st\nAL ol 15 return @tasks\nNl s 16 end\n@ phone_book... U 17 end\n@ spec_helper.... U 18\n@ todo_list_sp... U\n-TopRe Y @ todo_list_spec.rb U\nGemfile v\nT REERIRIT 072 ole_chas.deslon 3 spec 2l todo N Do i\n> 08_debugging... * 30 todo_list = TodoList.new\n> 09_multi_class... * 31 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do -\n39 xit \"fails\" do\na0 todo_list = TodoList.new I\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n43 end\na4 end\na5 end\n46\n> TIMELINE\n—= oA G % Spel .\n"
  },
  {
    "seconds": 673,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U x zsh x +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList R o e e Y\n> 01_intro_and_git def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_adxrlag: (Failures listed here are expected and do not affect your\nE suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) 1 # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * s end\nv lib * 1; @if: completa(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n- 11 @tasks.delete(task)\n@ todo_list.rb u\ns . :: end 07_single_class_design » ||\n¥ phonedesig. U 14 |..def-1ust\nR el 15 return @tasks\nNivee . 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nSopRC Y @ todo_list_spec.rb U\niy Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemilie.lock . 31 ; todo_list.add( “Wash the car\")\nDU LT 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(\"Wash the car\")\n> 10_multi_class... © 34 expect(todo_list.list).to eq [\"Wash the dog\")]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 Ixit \"fails\" do\n40 todo_list = TodoList.new - |\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end\na4 end\n45 end\n46\n> TIMELINE\n= oA C % Spel .\n"
  },
  {
    "seconds": 674,
    "text": "[ N J 10do_list_spec.tb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList R o e e Y\n> 01_intro_and_git def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_\\dxrlag: (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) 1 # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * s end\nv lib 1 1: @if: completa(task) Finished in ©.01193 seconds (files took 0.14402 seconds to load)\na phoneJ»ook V] 1 otasks.delete(task) 13 examples, © failures, 1 pending\n@ todo_listrb U\nN cipes 3 12 end 07_single_class_design » []\n13\n¥ phone desig_ U 44 |..des-11st\nR el 15 return @tasks\nNienes . 16 end\n@ phone_book... U 17 end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nSopnc - @ todo_list_spec.rb U X wam -\niy Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemilie.lock . 31 ; todo_list.add( “Wash the car\")\n> 08_debugging... ® 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(\"Wash the car\")\n> 10_multi_class... © 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 Jit “fails* do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such tasks\n43 end\n44 end\n45 end\n46\n> TIMELINE\n"
  },
  {
    "seconds": 675,
    "text": "[ N J 10do_list_spec.tb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList R o e e Y\ni g;j:;::;ﬁi; “ : d.;t::tzl:l?;‘ Per_amrlag: (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... 4 end\n> 04_single_met... * S _ 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * s end\nv lib ° 1: @if: completa(task) Finished in ©.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n\" 11 @tasks.delete(task)\n@ todo_listrb U A\nr LS 3 :: end 07_single_class_design » []\n¥ phonedesig. U 14 |..def-1ust\nR el 15 return @tasks\nNwee . 16 end\n@ phone_book... U 17 end\n@ spec_helper.... U 18\n@ todo_list_sp... U\nHOpRc Y @& todo_list_spec.rb U x na--\nOatofbe o 07_single_class_design > spec @ todo_list_spec.rb\nGemilie.lock . 31 ; todo_list.add( “Wash the car\")\nDU LT 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(\"Wash the car\")\n> 10_multi_class... © 34 expect(todo_list.list).to eq [\"Wash the dog\")]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 lit “fails* do\n40 todo_list = TodoList.new\n41 todo_list.add(\"uazh the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such tasks\n43 end\n44 end\n45 end\n46\n> TIMELINE\n"
  },
  {
    "seconds": 676,
    "text": "[ N J 10do_list_spec.tb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList R o e e Y\n> 01_intro_and_git def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_adxrlag: (Failures listed here are expected and do not affect your\nsuite's status)\n. > 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) 1 # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * s end\nv lib * 1: @if: completa(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n\" 11 @tasks.delete(task)\n@ todo_listrb U\nr LS 3 :: end 07_single_class_design » []\n¥ phonedesig. U 14 |..def-1ust\nR el 15 return @tasks\nNwee . 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nSopRC U @ todo_list_spec.rb U x 9 m -\niy Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemilie.lock . 31 ; todo_list.add( “Wash the car\")\nDU LT 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(\"Wash the car\")\n> 10_multi_class... © 34 expect(todo_list.list).to eq [\"Wash the dog\")]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 lit “fails* do 1\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such tasks\n43 end\n44 end\n45 end\n46\n> TIMELINE\n= YN, 9 oCas: 2 8 LF Ruby G3 Spel .\n"
  },
  {
    "seconds": 677,
    "text": "(A todo_list_spec.b — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList R o e e Y\n> 01_intro_and_git def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_adxrlag: (Failures listed here are expected and do not affect your\ns suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 ® 6 def add(task) 1 # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * s end\nv lib * 1: @if: completa(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n& todo_list.rb 0 11 @tasks.delete(task)\nr L, 3 12 end 07_single_class_design » []\n13\n¥ phonedesig. U 14 |..def-1ust\nR el 15 return @tasks\nNwee . 16 end\n@ phone_book... U 17  end\n@ spec_helper... U 18\n@ todo_list_sp... U\nSopRC U @ todo_list_spec.rb U x 9 m -\niy Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemilie.lock . 31 ; todo_list.add( “Wash the car\")\nDU LT 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(\"Wash the car\")\n> 10_multi_class... © 34 expect(todo_list.list).to eq [\"Wash the dog\")]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 Jit “fails* do 1\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such tasks\n43 end\n44 end\n45 end\n46\n> TIMELINE\nmain® 0AC 9 5 ey 3 F Ruby s Spe .\n"
  },
  {
    "seconds": 678,
    "text": "[ XN ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch - 1 class TodoList R |\n> 01_intro_and_git def initialize\n> 02_testing_bites 3 @tasks = [] Per_\\dxrlag: (Failures listed here are expected and do not affect your\n2 suite's status)\n¢ > 03_single_met... * 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging 1 ® 6 def add(task) F # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * 8 end\nv b s 1: et completa(task) Finished in ©.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n11 @tasks.delete(task)\n4 todo_listrb U\nGl 5 A i: end 07_single_class_design - []\n¥ phone desig. U~ 14 | .def 148t\nR deein-3 15 return @tasks\ne . 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U\n-fspec Y @& todo_list_spec.rb U X 9 m -\no o 07_single_class_design > spec > @ todo_list_spec.rb\nGemflie.lock = 51 todo_list.add(“Wash t-he car\")\n2t 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 Jit “fails\" do\n40 todo_list 3 TodoList.new\n41 todo_list .;dd(\"uash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such tasis\na3 end\na4 end\n45  end\n46\n> TIMELINE\nmain® 0AC n39,Col5 Spaces:2 UTF-8 LF Ruby & Spe 0\n"
  },
  {
    "seconds": 679,
    "text": "[ XN ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch - 1 class TodoList R |\n> 01_intro_and_git def initialize\n> 02_testing_bites 3 @tasks = [] Per_\\dxrlag: (Failures listed here are expected and do not affect your\n2 suite's status)\n¢ > 03_single_met... * 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging 1 ® 6 def add(task) F # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * 8 end\nv b s 1: et completa(task) Finished in ©.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n- 11 @tasks.delete(task)\n4 todo_listrb U\nGl 5 A i: end 07_single_class_design - []\n¥ phone desig. U~ 14 | .def 148t\nR deein-3 15 return @tasks\ne . 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U\n-fspec Y @& todo_list_spec.rb U X 9 m -\no o 07_single_class_design > spec > @ todo_list_spec.rb\nGemflie.lock = 51 todo_list.add(“Wash t-he car\")\n2t 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end 1\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 lit “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such tasiT\na3 end\na4 end\n45  end\n46\n> TIMELINE\nmain® 0AC n39,Col5 Spaces:2 UTF-8 LF Ruby & Spe 0\n"
  },
  {
    "seconds": 680,
    "text": "[ XN ] 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh x +-Mm0Da8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch - 1 class TodoList R |\n> 01_intro_and_git def initialize\n> 02_testing_bites 3 @tasks = [] Per_\\dxrlag: (Failures listed here are expected and do not affect your\n2 suite's status)\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * S 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging 1 ® 6 def add(task) F # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * 8 end\nv b s 1; et completa(task) Finished in ©.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pending\n- 11 @tasks.delete(task)\n4 todo_listrb U\nGl 5 A i: end 07_single_class_design - [\n¥ phone desig. U~ 14 | .def 148t\nR deein-3 15 return @tasks\ne . 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U\nopec - @ todo_list_spec.rb U\no o 07_single_class_design > spec > @ todo_list_spec.rb\nGemflie.lock = 51 todo_list.add(“Wash t-he car\")\n2t 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end 1\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such taskT\na3 end\na4 end\n45  end\n46\n> TIMELINE\n= 0 A G s Spe' »\n"
  },
  {
    "seconds": 681,
    "text": "[ N fuby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby X +~0D 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch - 1 class TodoList A o n ata e A,\n> 01_intro_and_git def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S _ 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * : end\nv lib L 10 BeT complete (task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U o 13 examples, © failures, 1 pending\n11 @tasks.delete(task)\n@ todo_listrb U N\nh 12 end 07_single_class_design - xspec\nv recipes - 13 £\nb A e ) 14 def list\n¥ tasks_design... U 15 return @tasks Failures:\nAL e . 16 end\n1) TodoList when we try to complete a non-existent task fails\n@ phone_book... U 17 end \" . : b g\nFailure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_helper.... U 18 .to raise_error “No such task.”\n@ todo_list_sp... U expected Exception with “\"No such task.\" but nothing was rais\nf3pec - todo_list_spec.rb U o od\nGemfile v C Seseepn # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\nS 07_single_class_design > spec > @ todo_list_spec.rb quired)>’\nG‘\"‘M'\"o_c“ = 31 todo_list.add(“Wash the car\")\n4 °B-°°b‘f99\"‘°--- o 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n-4 W—\"‘“\"_'-c\"”\"‘ . 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... © 34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end ’\n36 end rspec ./spec/todo_list_spec.rb:39 # TodolList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do i )\n39 it \"fails\" do 07_single_class_design » ||\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such taskT\n43 end\na4 end\n45  end\n46\n> TIMELINE\nmain® 0AC s Spe! .\n"
  },
  {
    "seconds": 682,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > zsh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o e e WY\n> 01_intro_and_git def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\n& suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * S L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * : end\nv lib L 10 BeT complete (task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U o 13 examples, © failures, 1 pending\n11 @tasks.delete(task)\n@ todo_listrb U N\n; 12 end 07_single_class_design » rspec\nv recipes - 13 E\nb A e ) 14 def list\n¥ tasks_design... U 15 return @tasks Failures:\nAL e . 16 end\n1) TodoList when we try to complete a non-existent task fails\n@ phone_book... U 17  end x ‘ ‘ \" -\nFailure/Error: expect { todo_list.complete(“\"Wash the sheep”) }\n@ spec_heiper.... U 18 .to raise_exrror \"No such taik.\"\n@ todo_list_sp... U expected Exception with “\"No such task.\" but nothing was rais\n.rspec v todo_list U ed\nGemfile v C Sesetpan # ./spec/todo_list_spec.rb:42:in ‘block (3 levels) in <top (re\nS 07_single_class_design > spec > @ todo_list_spec.rb quired)>’\nG‘\"‘M'\"o_c“ = 31 todo_list.add(“Wash the car\")\n4 08-“b‘f99\"‘°-~- o 32 todo_list.add(\"Wash the dog\") Finished in ©.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do i )\n39 it \"fails\" do 07_single_class_design » ||\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\n43 end\na4 end\n45  end\n46\n> TIMELINE\nmain® 0AC s Spe! .\n"
  },
  {
    "seconds": 683,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList o s Y\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxng: (Failures listed here are expected and do not affect your\n= - = suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * : end\nVv lib ° 10 de - complete (task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U o 13 examples, © failures, 1 pending\n@ e ettt 0 1 @tasks.delete(task)\ni 12 end 07_single_class_design - rspec\nv recipes B 13 E\n¥ phone_desig. U 55 | .des-11st\nAT 15 return @tasks Failures:\nv spec -\n@ phona_ v 16 end 1) TodoList when we try to complete a non-existent task fails\n2 17 end Failure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_heiper.... U 18 .to raise_error “No such task.*\n@ todo_list_sp.. U expected Exceppon with \"No such task.\" but nothing was rais\n.rspec v todo,_list b | od\nGemfile v e e iy # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M'\"o_“ o 31 todo_list.add(“Wash the car\")\n> OB_Mb\\fwm-~- o 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09—\"“‘\"_\"‘:\"”\"‘ . 33 todo_list.complete(“Wash the car\") 13 examples, 1 failure\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end F\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do ) _\n39 it \"fails\" do 07_single_class_design -*I\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such taskT\n43 end\na4 end\n45 end\na6\n> TIMELINE\nmain® 0AC s Spe! »\n"
  },
  {
    "seconds": 684,
    "text": "[ N J 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList o o s Y\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\n= suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * : anc\nVv lib ° 10 def complete(task) I | Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U - 13 examples, © failures, 1 pending\n11 @tasks.delete(task)\n@ todo_listrb U A\n; 12 end 07_single_class_design » rspec\nv recipes . 13 E\n¥ phone_desig... U 14 def list\n¥ tasks_design... U 15 return- @tasks Failures:\nMt = 16 end 1 K fail\n'@ phene’ bock R bl R Lt 1) TodoList when we try to complete a non-existent task fails\n0 Failure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_heiper.... U 18 .to raise_error “No such task.*\n@ todo_list_sp.. U expected Exception with “No such task.\" but nothing was rais\n.rspec v todo,_list b | od\nGemfile v e e iy # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M'\"o_“ o 31 todo_list.add(“Wash the car\")\n> OB_Mb\\fwm-~- o 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... 33 todo_list.complete(“Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" -\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do\n39 it-\"fails\" do 07_single_class_design » ||\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such taskT\n43 end\na4 end\n45 end\na6\n> TIMELINE\nmain® 0AC s Spe! »\n"
  },
  {
    "seconds": 685,
    "text": "[ N J todo_list.tb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_listrb U X thm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList ot i st e A\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * : end\nVv lib ° Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n|\n@ phone_book.... U :: d.;t:::]::;i::?:.)alsk) I 13 examples, © failures, 1 pending\n@ todo_listrd U . )\n5 12 end 07_single_class_design - rspec\nv recipes B 13 E\n¥ phone_desig... U 14 def 1ist\nAT 15 return @tasks Failures:\nM bt = 16 end .\n1) TodoList when we try to complete a non-existent task fails\n@ phone_book... U 17  end . S &\nFailure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_heiper.... U 18 .to raise_error “No such task.*\n@ todo_list_sp... U expected Exception with \"No such task.\" but nothing was rais\nSk - todo_list b | od\nGemfile v e e iy # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_CK o 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in ©.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... 33 todo_list.complete(“Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do\n39 it \"fails\" do 07_single_class_design - []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such taskT\n43 end\na4 end\n45 end\na6\n> TIMELINE\n"
  },
  {
    "seconds": 686,
    "text": "[ N J todo_list.tb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_listrb U @ thm - 2sh a8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList B\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mmg: (Failures listed here are expected and do not affect your\n= = suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07Z_single_clas... * : end\nv lib i 10 e e lete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 1 1a1|°'p 13 examples, © failures, 1 pending\n4 todo_listrb U\ne . 12 @tasks.delete(task) 07_single_class_design » rspec\ns 13 end R PR\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list Failures:\nv spec -\n@ phcoe v 16 Xeturn;gtasks 1) TodoList when we try to complete a non-existent task fails\n17 end Failure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.\"”\n@ todo_list_sp... U 19 expected Exception with \"No such task.\" but nothing was rais\nke o todo_list b | od\nGemfile v L DS IpaED Y # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n. 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_CK o 31 todo_list.add(“Wash the car\")\n> DB_Mb\\fwm--- ' 32 todo_list.add(\"Wash the dog\") Finished in ©.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end xspec ./spec/todo_list_spec.rb:39 # TodolList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do i )\n39 it \"fails\" do 07_single_class_design -*[]\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\n43 end\na4 end\n45 end\na6\n> TIMELINE\n"
  },
  {
    "seconds": 687,
    "text": "eoe todo_list.tb — rspec_setup 08\nEXPLORER ¥ tasks_design.md U @ todo_listrb U @ thm - 2sh a8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList B\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\nsuite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... * : anc\nv lib > 10 def- complete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 1 p ‘:'9 13 examples, © failures, 1 pending\na\n4 todo_listrb U\nG . 12 @tasks.delete(task) 07_single_class_design » rspec\ng 13 end R PR\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list Failures:\nv spec -\n@ phcoe v 16 Xeturn;gtasks 1) TodoList when we try to complete a non-existent task fails\n17 end Failure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.\"”\n@ todo_list_sp... U 19 expected Exception with \"No such task.\" but nothing was rais\nke o todo_list b | od\nGemfile v L DS IpaED Y # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_CK o 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end xspec ./spec/todo_list_spec.rb:39 # TodolList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do\n39 it-\"fails\" do 07_single_class_design - []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\n43 end\na4 end\n45 end\na6\n> TIMELINE\n"
  },
  {
    "seconds": 688,
    "text": "eoe todo_list.rb — rspec_setup 08\nli‘\\ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh a8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList R ateta i ata s Ha A,\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[] Per_mxng: (Failures listed here are expected and do not affect your\n= = = suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_det ing1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas... ® : ac\nv lib ® 10 Beticomplets (task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 0-9 . 13 examples, © failures, 1 pending\n4 todo_listrb U ax I sud\nA 12 @tasks.delete(task) 07_single_class_design - rspec\ns o o 13 end R\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list Failures:\nv spec B\n8 phcns v 18 xetinnetasks 1) TodoList when we try to complete a non-existent task fails\n= 17 end Failure/Exrror: expect { todo_list.complete(“Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.\"\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\nSl - todo_list. b | od\nGemfile u L AFCRpEED,9 # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_d‘ o 31 todo_list.add(“Wash the car\")\n> 08-°°b‘f99\"9--- ~ 32 todo_list.add(\"Wash the dog\") Finished in ©.02947 seconds (files took 0.14414 seconds to load)\n> 09_mun‘|_class... . 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... ® 34 expect(todo_list.1list).to eq [\"Wash the dog\"] Failed examples:\n35 end ’\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do ) )\n39 it \"fails\" do 07_single_class_design » []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\na3 end\na4 end\n45  end\na6\n> TIMELINE\nmain* 0 [ n1, Col17 Spaces: 2 JTF-8 LF Ruby s Spel .\n"
  },
  {
    "seconds": 689,
    "text": "eoe todo_list.rb — rspec_setup 08\nli'\\ EXPLORER ¥ tasks_design.md U @ todo_listrbU ® tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList R ateta i ata s Ha A,\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\n= suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas.. * : end\nVv lib ° 10 def- complete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pendin\nS 1 fail \"No such task\".| — .\ns 12 @tasks.delete(task) 07_single_class_design - rspec\no o 13 end R\n¥ phone_desig... U 14\n¥ tasks_design.. U 15 def list Failures:\nv spec B\n@ phona. L v 18 xetinnetasks 1) TodoList when we try to complete a non-existent task fails\n= 17 end Failure/Exrror: expect { todo_list.complete(“Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.*\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\nSl e todo_list. b | od\nGemfile u L i # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_d‘ o 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do\n39 it \"fails\" do 07_single_class_design » []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\na3 end\na4 end\n45  end\na6\n> TIMELINE\nmain® 0AC nM Spaces:2 UTF-8 LF Ruby s Spe! »\n"
  },
  {
    "seconds": 690,
    "text": "eoe todo_list.rb — rspec_setup 08\nli'\\ EXPLORER ¥ tasks_design.md U @ todo_listrbU ® tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList R ateta i ata s Ha A,\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\n= suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas.. * : end\nVv lib ° 10 def- complete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pendin\nS 1 fail \"No such task.’| — .\ns 12 @tasks.delete(task) 07_single_class_design - rspec\no o 13 end R\n¥ phone_desig... U 14\n¥ tasks_design.. U 15 def list Failures:\nv spec B\n@ phona. L v 18 xetinnetasks 1) TodoList when we try to complete a non-existent task fails\n= 17 end Failure/Exrror: expect { todo_list.complete(“Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.*\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\nSl e todo_list. b | od\nGemfile u L i # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_d‘ o 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do\n39 it \"fails\" do 07_single_class_design » []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\na3 end\na4 end\n45  end\na6\n> TIMELINE\nmain® 0AC nM Spaces:2 UTF-8 LF Ruby s Spe! »\n"
  },
  {
    "seconds": 691,
    "text": "eoe todo_list.rb — rspec_setup 08\nIi\"ﬁ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList R ateta i ata s Ha A,\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\n= suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas.. * : end\nv lib * 10 def complete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pendin\nS 1 fail \"No such task.\" unleg — .\net - X 12 @tasks.delete(task) 07_single_class_design - rspec\ni) 13 end AR T\n¥ phone_desig... U 14\n¥ tasks_design.. U 15 def list Failures:\nv spec B\n@ phona. L v 18 xetinnetasks 1) TodoList when we try to complete a non-existent task fails\n= 17 end Failure/Exrror: expect { todo_list.complete(“Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.*\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\nSl e todo_list. b | od\nGemfile u L i # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_d‘ et 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do\n39 it \"fails\" do 07_single_class_design - []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\na3 end\na4 end\n45  end\na6\n> TIMELINE\nmain® 0AC nn 31 Spaces:2 UTF-8 LF Ruby s Spe! .\n"
  },
  {
    "seconds": 692,
    "text": "eoe todo_list.rb — rspec_setup 08\nIi\"ﬁ EXPLORER ¥ tasks_design.md U @ todo_listrb U @ tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList R ateta i ata s Ha A,\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_mxrlag. (Failures listed here are expected and do not affect your\n= suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 07_single_clas.. * : end\nv lib * 10 def complete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pendin\ne T 1 fail \"No such task.” unless @tasky — .\ns 12 @tasks.delete(task) 07_single_class_design - rspec\no o 13 end R\n¥ phone_desig... U 14\n¥ tasks_design.. U 15 def list Failures:\nv spec B\n@ phona. L v 18 xetinnetasks 1) TodoList when we try to complete a non-existent task fails\n= 17 end Failure/Exrror: expect { todo_list.complete(“Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.*\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\nSl e todo_list. b | od\nGemfile u L i # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n- 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nG‘\"‘M\"b_d‘ et 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * \" \"\n34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context “\"when we try to complete a non-existent task\" do\n39 it \"fails\" do 07_single_class_design - []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such taskT\na3 end\na4 end\n45  end\na6\n> TIMELINE\nmain® 0AC 1 9 Spaces:2 UTF-8 LF Ruby s Spe! »\n"
  },
  {
    "seconds": 693,
    "text": "eoce todo_list.rb — rspec_setup 08\nli\"ﬂ EXPLORER ¥ tasks_design.md U @ todo_listrbU @ tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList o s, s A\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] Per_ndirlwg. (Failures listed here are expected and do not affect your\ne suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging 1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 0Z_single_clas... * : end\nv lib ' 10 def - complete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U o 13 examples, © failures, 1 pendil\ne 11 fail \"No such task.\" unless @tasks.includq S o\n@ todo_listrb U\n; 12 @tasks.delete(task) 07_single_class_design » rspec\nN, ¥ 13 end R PR\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list Failures:\nv spec B\n@ phane_book.. U 16 Eetunigtasks 1) TodoList when we try to complete a non-existent task fails\nby N 17 end Failure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.”\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\n.rspec v @ todo_list b ed\nGemfile v B # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n5 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nGemffle.lock o 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * 5 \" \"\n34 expect(todo_list.1list).to eq [“Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context \"when we try to complete a non-existent task” do\n39 it \"fails\" do 07_single_class_design - []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such taskT\n43 end\na4 end\n45  end\n46\n> TIMELINE\nmain® 0 A C 1, Col 46 Spaces:2 UTF-8 LF Ruby % Spe! .\n"
  },
  {
    "seconds": 694,
    "text": "eoce todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tam - zsh a -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList o s, s A\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks = [] :Zri\\:érlag.sé:::;\\;xes listed here are expected and do not affect your\nBl > 03_single_met... * 4 end\n> 04_single_met... * 5 L 1) TodoList when we try to complete a non-existent task fails\n> 05_debugging_1 * 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 0Z_single_clas... * 8 end\nv lib ' 1; def - complete(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n:m.‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasb{ e heting\nrets 12 @tasks.delete(task) 07_single_class_design » rspec\nRy 3 13 end R E\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list Failures:\nv B\nls::com_book.. v :: m:etum Stasks 1) TodoList when we try to comple;e a non-exisfent task ta)‘ls.\nFailure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_helper.... U 18 end .to raise_error “No such task.”\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\n. v ed\nG::.zia v 6 fotatspach U # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\n. 07_single_class_design > spec > @ todo_list_spec.rb uired)>'\nO n ~todo_1ist.add(\"Wash. the. car\") e\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in 0.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * 34 expect(todo_list.list).to eq [\"Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context \"when we try to complete a non-existent task” do\n39 it \"fails\" do 07_single_class_design  []\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such taskT\n43 end\na4 end\n45  end\n46\n> TIMELINE\n— 0 A ( 1 Spaces:2 UTF-8 LF Ruby &3 Spe .\n"
  },
  {
    "seconds": 695,
    "text": "eoe 2sh — rspec_setup m\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U zsh x +- 08 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList o ks, e A\n> 01_intro_and_git 2 def initialize )\n>.02_tosting_bites ® 3 etasks =[] Per_ndirlng. (Failures listed here are expected and do not affect your\ne suite's status)\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 — 1) TodoList when we try to complete a non-existent task fails\n> 05_det ing1 ® 6 def add(task) # Temporarily skipped with xit\n> 06_single_clas... ® 7 @tasks << task # ./spec/todo_list_spec.rb:39\nv 0Z_single_clas... * : end\nv lib . 10 det:complate(task) Finished in 0.01193 seconds (files took 0.14402 seconds to load)\n@ phone_book.... U 13 examples, © failures, 1 pendi\nT Il-strb i 11 fail \"No such task.\" unless @tasks.include? task - ™~\ne 12 @tasks.delete(task) 07_single_class_design » rspec\nN, ¥ 13 end R PR\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list Failures:\nv spec B\n@ phane_book.. U 16 Eetunigtasks 1) TodoList when we try to complete a non-existent task fails\nby N 17 end Failure/Error: expect { todo_list.complete(\"Wash the sheep”) }\n@ spec_helper.... U 18  end .to raise_error “No such task.*\n@ todo_list_sp... U 19 expected Exception with “No such task.\" but nothing was rais\nfepec Y @ todo_list by = R\nGemfile u R # ./spec/todo_list_spec.rb:42:in 'block (3 levels) in <top (re\nE 07_single_class_design > spec > @ todo_list_spec.rb quired)>'\nGemffle.lock o 31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") Finished in ©.02947 seconds (files took 0.14414 seconds to load)\n> 09_multi_class... * 33 todo_list.complete(\"Wash the car\") 13 examples, 1 failure\n> 10_multi_class... * 5 \" \"\n34 expect(todo_list.list).to eq [“Wash the dog\"] Failed examples:\n35 end\n36 end rspec ./spec/todo_list_spec.rb:39 # TodoList when we try to complet\n37 e a non-existent task fails\n38 context \"when we try to complete a non-existent task” do\n39 it \"fails\" do 07_single_class_design > |\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\") 1\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such taskT\n43 end\na4 end\n45  end\n46\n> TIMELINE\nmain* 0AC % Spe! >\n"
  },
  {
    "seconds": 696,
    "text": "eoce fuby — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U ruby X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList 1\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 @tasks =[]\nBl > 03_single_met... * 4 end\n> 04_single_met... ® 5 &\n> 05_debugging_1 ® 6 def add(task)\n108 single rlea k8 7 @tasks << task\nv 07_single_clas... * 8 end\nv lib B 9\n@ ohocs hock ™l 10 def complete(task)\naliois \"'s\"b i 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nv recipes ® 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNP 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nfepec Y @ todo_list_spec.rb U\ne . 07_single_class_design > spec @ todo_list_spec.rb\nGemffelock U 31 \" todo_list.add(“Wash the car\")\nocentgony_ 2. 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task” do\n39 it “\"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such taskT\n43 end\na4 end\n45  end\n) 46\n> TIMELINE\n— OAO 3 Spe .\n"
  },
  {
    "seconds": 697,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList e b or i\n> 01_intro_and_git 2 def initialize )\n» > 02_testing_bites ® 3 @tasks = [] i;n;::e'd’l::voéaiiﬁu::oms (files took 0.13759 seconds to load)\n: > 03_single_met... ® 4 end\n> 04_single_met... * 5 — 07_single_class_design -+ I\n> 05_debugging_1 ® 6 def add(task)\n108 single rlea k8 7 @tasks << task\nv 07_single_clas... * 8 end\nv lib . >\ne 11 10 def complete(task)\naliois \"'s‘m i 11 fail \"No such task.\" unless @tasks.include? task\ni 12 @tasks.delete(task)\nN ' 13 end\n& phone_desig... U 14\n¥ tasks_design.. U 15 def list\nNP 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nfepec Y @ todo_list_spec.rb U\ne . 07_single_class_design > spec @ todo_list_spec.rb\nGemffelock U 31 \" todo_list.add(“Wash the car\")\n> 08_debugging... © 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task” do\n39 it “\"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\") 1\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such taskT\n43 end\na4 end\n45  end\n) 46\n> TIMELINE\n—= NG 3 Spel .\n"
  },
  {
    "seconds": 698,
    "text": "eoce 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList e b or i\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nA 13 examples, O failures\n: > 03_single_met... ® 4 end\n> 04_single_met... * 5 — 07_single_class_design -+ I\n> 05_debugging_1 ® 6 def add(task)\n108 single rlea k8 7 @tasks << task\nv 07_single_clas... * 8 end\nv lib . >\ne 11 10 def complete(task)\naliois \"'s“m i 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nN - 13 end\n& phone_desig... U 14\n¥ tasks_design.. U 15 def list\nNP 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nfepec Y @ todo_list_spec.rb U\ne . 07_single_class_design > spec @ todo_list_spec.rb\nGemffelock U 31 \" todo_list.add(“Wash the car\")\n> 08_debugging... © 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task” do\n39 it “\"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task:\n43 end\na4 nd\n45  end\n) 46\n> TIMELINE\n—= NG 3 Spel .\n"
  },
  {
    "seconds": 699,
    "text": "[ XN J t0do_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - |:]\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles’s & 7 @tasks << task\nv 07_single_clas... * 8 end\ni . 1: def complete(task)\nef complete(tas\n::»:.:\\e\"_:or:k: 11 fail \"No such task.\" unless @tasks.include? task\n—_ 12 @tasks.delete(task)\nY Ieewes: 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNopec 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n-rspec Y @ todo_list_spec.rb U X 2 m -\noo % 07_single_class_design > spec > @ todo_list_spec.rb\nGemffelock U 31 \" todo_list.add(\"Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-instent task” do\n39 it “\"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end ]\na end 3\n45  end\n46\n> TIMELINE\nmain* LN Ln 44, Col 3 Spaces: 2 F-8 F Ruby & Spe S\n"
  },
  {
    "seconds": 700,
    "text": "[ XN J t0do_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - |:]\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles’s & 7 @tasks << task\nv 07_single_clas... * 8 end\ni . 1: def complete(task)\nef complete(tas\n::»:.:\\e\"_:or:k: 11 fail \"No such task.\" unless @tasks.include? task\n—_ 12 @tasks.delete(task)\nY Ieewes: 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNopec 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n-rspec Y @ todo_list_spec.rb U X 2 m -\noo % 07_single_class_design > spec > @ todo_list_spec.rb\nGemffelock U 31 \" todo_list.add(\"Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-instent task” do\n39 it “\"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end ]\na end 3\n45  end\n46\n> TIMELINE\nmain* LN Ln 44, Col 3 Spaces: 2 F-8 F Ruby & Spe S\n"
  },
  {
    "seconds": 701,
    "text": "[ XN J t0do_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - |:]\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles’s & 7 @tasks << task\nv 07_single_clas... * 8 end\ni . 1: def complete(task)\nef complete(tas\n::»:.:\\e\"_:or:k: 11 fail \"No such task.\" unless @tasks.include? task\n—_ 12 @tasks.delete(task)\nY Ieewes: 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNopec 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n-rspec Y @ todo_list_spec.rb U X 2 m -\noo % 07_single_class_design > spec > @ todo_list_spec.rb\nGemffelock U 31 \" todo_list.add(\"Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-instent task” do\n39 it “\"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end ]\na end 3\n45 end\n46\n> TIMELINE\nmain* LN Ln 44, Col 3 Spaces: 2 F-8 F Ruby & Spe S\n"
  },
  {
    "seconds": 702,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList e e\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - |:]\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles’s & 7 @tasks << task\nv 07_single_clas... * 8 end\nb ‘ 1: def complete(task)\n::»:‘:\\e\"_:or:k: 11 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nY Ieewes: 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNopec 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n4 todo_list_sp... U 19\n-rspec Y @ todo_list_spec.rb U x 2 m -\n::::::lock : 07_single_class_design > spec > @ todo_list_spec.rb\n31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-instent task” do\n39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\na3 end B\n44 end\n45  end\n46\n> TIMELINE\nmain* LN Ln 44, Col 3 Spaces: 2 F-8 F Ruby & Spe S\n"
  },
  {
    "seconds": 703,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList e e\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - |:]\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles’s & 7 @tasks << task\nv 07_single_clas... * 8 end\ni . 1: def complete(task)\nef complete(tas\ne M‘m Y 11 fail \"No such task.\" unless @tasks.include? task\n- ‘@o‘l's\"m 7 12 @tasks.delete(task)\nY Ieewes: 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNopec 5 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n4 todo_list_sp... U 19\n-rspec Y @ todo_list_spec.rb U x 2 m -\noo % 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock L 31 5 todo_llst.add(\"wa;h ihe car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-instent task” do\n39 it “\"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\na3 end E\n44 end |\n45  end\n46\n> TIMELINE\nmain* LN Ln 44, Col 3 Spaces: 2 F-8 F Ruby & Spe S\n"
  },
  {
    "seconds": 704,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B ) class TodoList T a e e\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles i & 7 @tasks << task\nv 07_single_clas... * 8 end\ni ‘ 1: def complete(task)\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nY eepes ‘ 13 end\n& phone_desig... U 14\n¥ tasks_design... U 15 def list\nNP ” 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp.. U 19\n-rspec Y @ todo_list_spec.rb U X 9 m -\n::::::lock : 07_single_class_design > spec > @ todo_list_spec.rb\n31 todo_list.add(“Wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-aListent task” do\n39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the-sheep\") }.to raise_error “No such taskl\n43 end B\n44 end\n45  end\n) 46\n> TIMELINE\nmain® 0 [y Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe' )\n"
  },
  {
    "seconds": 705,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B ) class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles i & 7 @tasks << task\nv 07_single_clas... * 8 end\nik . 1: def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nY eepes ‘ 13 end\n& phone_desig... U 14\n¥ tasks_design... U 15 def list\nNP ” 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp.. U 19\n-rspec Y @ todo_list_spec.rb U X 9 m -\no \" 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock . 31 . todo_llstadd(\"was-h ihe car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\") 1\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the-sheep\") }.to raise_error “No such taskl\n43 end B\n44 end\n45  end\n) 46\n> TIMELINE\nmain® 0AO0 Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ S\n"
  },
  {
    "seconds": 706,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B ) class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * 5 _ 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles i & 7 @tasks << task\nv 07_single_clas... * 8 end\nik . 1: def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nY eepes ‘ 13 end\n& phone_desig... U 14\n¥ tasks_design... U 15 def list\nNP ” 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp.. U 19 @\n-rspec Y @ todo_list_spec.rb U X 9 m -\no \" 07_single_class_design > spec > @ todo_list_spec.rb\nGemffle.lock . 31 . todo_llstadd(\"was-h ihe car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... ® 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... ® 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the-sheep\") }.to raise_error “No such task.\n43 end L\n44 end\n45  end\n) 46\n> TIMELINE\nmain® 0AO0 Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ S\n"
  },
  {
    "seconds": 707,
    "text": "[ XN ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B ) class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * S — 07_single_class_design » D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles i & 7 @tasks << task\nv 07_single_clas... * 8 end\nik . 1: def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tas_y_s.include? task\no 12 @tasks.delete(task)\nbbb ;S 13 end\n& phone_desig... U 14\n¥ tasks_design... U 15 def list\nN e ‘ 16 return @tasks\n@ phone_book... U 17 end\n SPEC_NEIPEN.... U  com————————————————————————————————————————————————————\n@& todo_list_sp... U @ todo_list_spec.rb U X W am -\n.rspec v 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile V] 31 todo_list.add(“Wash the car\")\nGemfile.lock [V} 32 todo_list.add(\"Wash the dog\")\n> 08_debugging... * 33 todo_list.complete(“Wash the car\")\n> 09_multi_class... * 34 expect(todo_list.1list).to eq [\"Wash the dog\"]\n> 10_multi_class... ® 35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end\n44 bnd =\n45 end\n46\n> TIMELINE\nmain* 0A0 Ln44,Col3 Spaces:2 UTF-8 LF Ruby {3 Spe! ®\n"
  },
  {
    "seconds": 708,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B ) class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end -\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles i & 7 @tasks << task\nv 07_single_clas... * 8 end\nik . 1: def complete(task)\nef complete(tas\n@iphege. book 21U 1 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\ni . @ todo_list_spec.tb U X ©wa--\n¥ phone_desig... U 07_single_class_design > spec > @ todo_list_spec.rb\n¥ tasks_design... U 27 1\nVv spec o 28 context “when we complete a task” do\n@ phone_book... U 29 it “removes the task from the list\" do\n@ spec_helper... U 30 todo_list = TodoList.new\n@ todo_list_sp... U 31 todo_list.add(\"Wash the car\")\n.rspec v 32 todo_list.add(\"Wash the dog\")\nGemfile u 33 todo_list.complete(“Wash the car\")\nGemfile.lock 1] 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n> 08_debugging... * 35 end\n> 09_multi_class... * 36 end\n> 10_multi_class... 37\n38 context “when we try to complete a non-existent task” do\n39 it “fails\" do\n40 todo_list = TodoList.new M\nP51 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such tasbr\n43 end\naa lend\na5 end\n46\n> TIMELINE\nmain® 0 [y Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe' )\n"
  },
  {
    "seconds": 709,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP A a A~ L 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\nD108 single cleac & 7 @tasks << task\nv 07_single_clas... * 8 end\n« lib ‘ 1: def complete(task)\ne M‘m o 1 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\nS . @ todo_list_spec.rb U X o\n¥ phone_desig... U 07_single_class_design > spec > @ todo_list_spec.rb\n¥ tasks_design... U ; P ang aliwalise I\nVv spec s 3 RSpec.describe TodolList do\n@ phone_book... U a context “\"given no tasks\" do\n@ spec_helper... U 5 it \"has an empty list\" do\n@ todo_list_sp.. U 6 todo_list = TodoList.new\nrspec v T expect(todo_list.list).to eq [)\nGemlfile u 8 end\nGemfile.lock v 9 end\n> 08_debugging... * 10\n> 09_multi_class... * 11 context “given a task\" do\n> 10_multi_class... * 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"wash the car\"]\n16 end\n17 end -\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n> TIMELINE M\nmain* 0AO0 ) Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe’ i\n"
  },
  {
    "seconds": 710,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nP A a A~ L 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\nD108 single cleac & 7 @tasks << task\nv 07_single_clas... * 8 end\nb . 1: def complete(task)\nef complete(tas\n4 iphonebook 20 1 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\nS . @ todo_list_spec.rb U X o\n¥ phone_desig... U 07_single_class_design > spec > @ todo_list_spec.rb\n¥ tasks_design... U 1 cequire \"todo_list\"\nv spec . 2 i\n@ phone_book... U 3  iSpec.describe TodoList do\n@ spec_helper.... U 4 context “given no tasks\" do\n@ todo_list_sp... U 5 it “\"has an empty list\" do\nrspec v 6 todo_list = TodoList.new\nGemfile v 7 expect(todo_list.list).to eq []\nGemfilelock U o and\n> 08_debugging... * . end\n> 09_multi_class... * ® 8 g\nS0 ok e 11 context “given a task\" do\n= = 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end W\n18\n19 context \"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n> TIMELINE 27\nmain® (VO Ln 44, Col 3 Spaces: 2 JTF-8 LF Ruby % Spe! i\n"
  },
  {
    "seconds": 711,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nP A a A~ Ll 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\nD108 single cleac & 7 @tasks << task\nv 07Z_single_clas... * 8 end\nb . 1: def complete(task)\nef complete(tas\n4 iphonebook 20 1 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\nS . @ todo_list_spec.rb U X o\n¥ phone_desig... U 07_single_class_design > spec > @ todo_list_spec.rb\n¥ tasks_design... U 2 1\nv spec . 3  RSpec.describe TodolList do\n@ phone_book... U 4 context “given no tasks\" do\n@ spec_helper... U 5 it \"has an empty list\" do\n@ todo_list_sp... U 6 todo_list = TodoList.new\n.rspec v 7 expect(todo_list.list).to eq []\nGemfile u 8 end\nGemfilelock U 9 end\n> 08_debugging... * 10\n> 09_multi_class... ® 11 context “\"given a task\" do\n> 10_molti_class.. ® 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE - T T— AT\nmain® (VO : Ln 44, Col 3 Spaces: 2 JTF-8 LF Ruby % Spe! i\n"
  },
  {
    "seconds": 712,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nP A a A~ L 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\nD108 single cleac & 7 @tasks << task\nv 07_single_clas... * 8 end\nb . 1: def complete(task)\nef complete(tas\n4 iphonebook 20 1 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\nS . @ todo_list_spec.rb U X -\n¥ phone_desig... U 07_single_class_design > spec > @ todo_list_spec.rb\n¥ tasks_design... U 15 expect(todo_list.list).to eq [\"Wash the car\"]\nL = 16 end\n@ phone_book... U 17 end\n@ spec_helper... U 18\n@ todo_list_sp... U 19 context “\"given two tasks\" do\n-rspec v 20 it \"has both tasks in the list\" do\nGemfile v 21 todo_list = TodoList.new\nGemfile.lock v 22 todo_list.add(\"Wash the car\")\n> 08_debugging... * 23 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> 10_multi_class... * 25 end\n26 end\n27\n28 context \"when we complete a task\" do \"\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new -\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n39 it \"fails\" do\nS TIMELINE 40 todo_list = TodoList.new\nmain® (VO . Ln 44, Col 3 Spaces: 2 JTF-8 LF Ruby % Spe! ]\n"
  },
  {
    "seconds": 713,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nA 13 examples, O failures\n¢ > 03_single . 4 end -\n_single_met...\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\nD108 single cleac & 7 @tasks << task\nv 07_single_clas... * 8 end\n9\ne ‘ 10 def complete(task)\n@ phone_book.... U\n= 11 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U )\nv recipes . @ todo_list_spec.rb U X wa--\n¥ phone_desig... U 07_single_class_design > spec > @ todo_list_spec.rb\n¥ taskelHosion. U 20 1T “has bOth tasks 1n the L1st’ do\no 1= & 21 todo_list = TodoList.new 1\n@ phone_book... U 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n@ spec_helper.... U )\n24 expect(todo_list.1list).to eq [“\"Wash the car”, \"Wash the dog\"]\n@ todo_list_sp.. U\n25 end\n.rspe(l: v 26 end\nGemfrla v 27\nGemfilelock U 28 context “\"when we complete a task\" do\n> 08_debugging... * 29 it “\"removes the task from the list\" do\n> 09_multi_class... ® 30 todo_list = TodoList.new\n> 10_multi_class... * 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"] o\n35 end\n36 end =\n37\n38 context “when we try to complete a non-existent task\" do\n39 it “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(“Wash the sheep\") }.to raise_error \"No such task.\n43 end\n44 fnd\n45  end\n> TIMELINE 46\nmain* 0 0 Ln 44, Col 3 Spaces: 2 R I Ruby s Spel >\n"
  },
  {
    "seconds": 714,
    "text": "[ N todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n= 13 examples, 0 failures\n> 03_single_met... ® 4 end =}\n> 04_single_met... * s 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... * 8 end\ne . 1; def complete(task)\nef complete(tas\n@) phote-book U 11 fail \"No such task.\" unless @tgsks.include? task\n@ todo_listrb U\nv recipes - @ todo_list_spec.rb U X 0 @m -\n¥ phone_desig... U 07_single_class_design > spec > @ todo_list_spec.rb\n¥ taskeTission. U 20 1T “has both tasks 1n the List\" do\nv spec £ 21 todo_list = TodoList.new\nA (1) 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n@ spec_helper.... U\n24 expect(todo_list.list).to eq [“\"Wash the car”, \"Wash the dog\"]\n@ todo_list_sp... U\n25 end\nrspec u 26 end\nGemfile u 27\nGemfile.lock 2 28 context \"when we complete a task\" do\n> 08_debugging... * 29 it \"removes the task from the list\" do\n> 09_multi_class... * 30 todo_list = TodoList.new\n> 10_multi_class... * 31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“\"Wash the dog\"]\n35 end\n36 end i\n37\n38 context “when we try to complete a non-existent task\" do\n39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(“Wash the sheep”) }.to raise_error \"No such task.\n43 end\n44 fnd\n45  end\n> TIMELINE 46\nmain*® ( Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe! °\n"
  },
  {
    "seconds": 715,
    "text": "[ XN ] todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n= 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * s — 07_single_class_design -+ D\n> 05_debugging_1 ® 6 def add(task)\n2108 single clasc & 7 @tasks << task\nv 07_single_clas... * 8 end\ni . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? task\noo 12 @tasks.delete(task)\nY recpes 5 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nN pec > 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\nP O -M\nrspec v\nGomfle U s otn tasks in the i1st\" do\nGemflelock, U 21 todo_list = TodoList.new\n> 08_debugging... * 22 todo_list.add(\"Wash the car\")\n> 09_multi_class... ® 23 todo_list.add(\"Wash the dog\")\n> 10_multi_class... * 24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do\n29 it \"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\") .\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\") -\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “when we try to complete a non-existent task\" do\n> TIMELINE 39 it \"fails\" do\nmain*® ( Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe! °\n"
  },
  {
    "seconds": 716,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList e\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n= 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * s — 07_single_class_design » D\n> 05_debugging_1 ® 6 def add(task)\n2108 single clasc & 7 @tasks << task\nv 07_single_clas... * 8 end\n« lib ‘ 1: def complete(task)\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? task\noo 12 @tasks.delete(task)\nY recpes 5 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNl . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18  end\n@ 10d0_lISt_SP... U  cmdie————————————  ————————————————————————————————\n.rspec U @ todo_list_spec.rb U X tm -\nGemfile v 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock v 20 1T “has both tasks 1n the list” do\n> 08_debugging... * 21 todo_list = TodoList.new\n> 09_multi_class... * 22 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\") L]\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“\"Wash the car\") i\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\nY 38 conteft \"whfn we try to complete a non-existent task\" do\nmain*® ) 0 : ) Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spel ]\n"
  },
  {
    "seconds": 717,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n= 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * s — 07_single_class_design » D\n> 05_debugging_1 ® 6 def add(task)\n2108 single clasc & 7 @tasks << task\nv 07_single_clas... * 8 end\ni . 1; def complete(task)\nef complete(tas!\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? task\nbl 12 @tasks.delete(task)\nY recpes 5 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list 1\nNl . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp.. U 10\n.rspec [V} @ todo_list_spec.rtb U X 3 O -\nGemits Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock v 20 1T “has both tasks 1n the list” do\n> 08_debugging... * 21 todo_list = TodoList.new\n> 09_multi_class... * 22 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“\"Wash the car\") i\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\nY 38 conteft \"whfn we try to complete a non-existent task\" do\nmain*® ( : ) Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe! °\n"
  },
  {
    "seconds": 718,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U > zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n= 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * s — 07_single_class_design » D\n> 05_debugging_1 ® 6 def add(task)\n2108 single clasc & 7 @tasks << task\nv 07_single_clas... * 8 end\ni . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? task\nbl 12 @tasks.delete(task)\nY recpes 5 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNl . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp.. U 10\n.rspec [V} @ todo_list_spec.rtb U X 3 m -\nGemits Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemfile.lock v 20 1T “has both tasks 1n the list” do\n> 08_debugging... * 21 todo_list = TodoList.new\n> 09_multi_class... * 22 todo_list.add(\"Wash the car\")\n> 10_multi_class... * 23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n28 context \"when we complete a task\" do\n29 it “removes the task from the list\" do |\n30 todo_list = TodoList.ndw\n31 todo_list.add(\"Wash the car\") [v\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“\"Wash the car\") i\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\nY 38 conteft \"whfn we try to complete a non-existent task\" do\nmain*® ( : ) Ln44,Col3 Spaces:2 UTF-8 LF Ruby s Spe! °\n"
  },
  {
    "seconds": 719,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B ) class TodoList e e e\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites ® 3 etasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nP 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * s — 07_single_class_design » D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles (& 7 @tasks << task\nv 07_single_clas... * 8 end\nMl . 1: def complete(task)\nef complete(tas\ne phone_book 0 11 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\nG 12 @tasks.delete(task)\nb o 5 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nML ' 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp.. U 10\n.rspec v @ todo_list_spec.rb U X g M -\nGemfile v 07_single_class_design > spec > @ todo_list_spec.rb\nGemfilelock U 31 toUo_11ST.add( \"wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 33 todo_list.complete(“Wash the car\")\n> 10_multi_class... * 34 expect(todo_list.list).to eq [“\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 it “fails\" do\n40 todo_list = TodoList.new\n41 toda_lisl.add(“uash the car\")\n42 expect { todo_list.complete(“Wash the sheep\") }.to raise_exror “No such tasks\n43 end\n44 |nd L]\n45 end\n46\nB > TIMELINE\nmain* 0AQ Ln44,Col3 Spaces:2 UTF-8 LF Ruby {3 Spe! B\n"
  },
  {
    "seconds": 720,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks Pysign.md U @ todo_list.rb U zsh X 8 -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B ) class TodoList e e mea e\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 @tasks = [] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nin . = 13 examples, 0 failures\ni B end\n> 03_single_met... *\n> 04_single_met... * s — 07_single_class_design » D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles (& 7 @tasks << task\nv 07_single_clas... * 8 end\n9\nML ‘ 10 def complete(task)\n@ phone_book.... U\n7 11 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\nG 12 @tasks.delete(task)\nb o . 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nML ' 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp.. U 10\n.rspec U @ todo_list_spec.ro U X @ m -\nGemfile v 07_single_class_design > spec > @ todo_list_spec.rb\nGemfilelock U 31 toUo_11ST.add( \"wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 33 todo_list.complete(“\"Wash the car\")\n> 10_multi_class... * 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 it “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such tasks\n43 end\n4 |nd |\n45 end\n46\nB > TIMELINE\nmain® 0 0 Ln 44, Col3 Spaces: 2 JTF-8 LF Ruby s Spe’ .\n"
  },
  {
    "seconds": 721,
    "text": "[ XN J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER < ¥ task®esign.md U @ todo_list.rb U zsh ) a -\nVv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch - 1 class TodoList i o e i\n> 01_intro_and_git 2 def initialize )\n> 02_testing_bites 3 etasks = [] i;mshed in 0.01335 seconds (files took 0.13759 seconds to load)\nP examples, @ failures\n> 03_single_met... ® 4 end\n> 04_single_met... * s — 07_single_class_design » D\n> 05_debugging_1 ® 6 def add(task)\n5108 single cles (& 7 @tasks << task\nv 07_single_clas... * 8 end\nMl . 1: def complete(task)\nef complete(tas\n4)phane book 1Y 1 fail \"No such task.\" unless @tasks.include? task\n@ todo_listrb U\nG 12 @tasks.delete(task)\nb o . 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nML ' 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp.. U 10\n.rspec v @ todo_list_spec.rb U X g M -\nGemfile v 07_single_class_design > spec > @ todo_list_spec.rb\nGemfilelock U 31 toUo_11ST.add( \"wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 33 todo_list.complete(“\"Wash the car\")\n> 10_multi_class... * 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 it “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end\n44 fnd ™\n45 end\n46\nB > TIMELINE\nmain* 0OA0 Ln44,Col3 Spaces:2 UTF-8 LF Ruby {3 Spe S\n"
  },
  {
    "seconds": 722,
    "text": "[ XN J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design w-\\:,m.\". ¥ tasks m;. gn.md > (=) # Tasks Class Design Recipe > ) ## 3. Create Examples as T 07_single_class_design = rspec\n= AU _Aae L amaney WG MG\nA pcrateh $ 58  todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 01 intro_and_git\nSrpeen il 59 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nB ~ = 66 #4 13 examples, 0 failures\n! > 03_single_met... ® 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\") 07_single_class_design - []\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\")\n> 06_single_clas... ® 64  todo_list.complete(“Wash the car\") by\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"] .\nv lib . 66\n@& phone_book.... U 67 #5\n@ todo_list.rb U 68 todo_list = TodoList.new A\nv recipes o 69 todo_list.add(\"wash the car\") +\n¥ phone_desig... U 70  todo_list.complete(\"Wash the sheep”) # fails “No such task.\" :\n¥ tasks_design... U nov H\n< spec > 72\n@ phone_book... U 73 _Encode each example as o test. You can add to the above list as you go._\n@ spec_helper... U 74 I\n@ todo_list_sp... U 75 ## 4. Implement the Behavioux\n.rspec v @ todo_list_spec.rb U\nGemfile v 07_single_class_design > spec > @ todo_list_spec.rb\nGemfilelock U 31 t0d0_11ST.add( \"wash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 33 todo_list.complete(“\"Wash the car\")\n> 10_multi_class... * 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error “No such task.\n43 end\naa end il\n45 end\n46\n> TIMELINE\nmain* 0 ( Ln 64, Col 26 Spaces: 2 128 F Markdown Spe e\n"
  },
  {
    "seconds": 723,
    "text": "[ XN J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh X 8 -\nv RSPEC_SETUP 07_single_class_design w-\\:.nns ¥ tasks (1|'~I~.gn md > (2 # Tasks Class Design Recipe > ) ## 3. Create Examples as T 07_single_class_design » rspec\n= iy aac s amamey, Memas Ay, uvE\nA pcrateh $ 58  todo_list.list # => [“Wash the car”, “Wash the dog\"] Bl\nel 59 Finished in 0.91335 seconds (files took ©.13759 seconds to load)\n> 02_testing_bites * 60 #4 13 1 G fail :\nA examples, ailures\n> 03_single_met... © 61 todo_list = TodoList.new\n> 04_single_met... ® 62 todo_list.add(\"Wash the car\") 07_single_class_design - []\n> 05_debugging 1 * 63 todo_list.add(\"Wash the dog\") b\n> 06_single_clas... * 64 todo_list.complete(\"Wash fthe car®) .\nv 07_single_clas... * 65 todo_list.list # => [“Wash the dog\"] .\nv lib . 66\n@& phone_book.... U 67 #5\n@ todo_list.rb v 68 todo_list = TodoList.new i\nv recipes o 69 todo_list.add(\"Wash the car\") =\n¥ phone_desig... U 70  todo_list.complete(“\"Wash the sheep”) # fails “No such task.\" .\n¥ tasks_design... U 7 |\nv spec . 72 s\n@ phone_book... U 73 _Encode each example as o test. You can add to the above list as you go._\n@ spec_helper... U 74\n& todo_list_sp... U 75 ## 4. Implement the Behaviouxr\nrspec v @ todo_list_spec.rb U +\nGemfile Y 07_single_class_design > spec > @ todo_list_spec.rb\nGemfilelock U 3 1000_11ST.add( \"wWash the car\")\n> 08_debugging... * 32 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 33 todo_list.complete(\"“Wash the car\")\n> 10_multi_class... * 34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context “\"when we try to complete a non-existent task\" do\n39 it \"fails\" do\n40 todo_list = TodoList.new\na1 todo_list.add(\"Wash the car\")\n42 expect { todo_list.complete(“Wash the sheep\") }.to raise_exrror “No such task.\n43 end\na4 end \"l\na5 end\n46\n> TIMELINE\nmain* 0 ( Ln 64, Col 26 Spaces: 2 128 F Markdown Spe e\n"
  },
  {
    "seconds": 724,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U W@ am-- zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 3. Create Examples as Te @7_single_class_design = rspec\n> 00_scratch . 18 B| ssssnscasassa\n> 01_intro_and_git 19 \" xuby 5 ‘\n> 02_testing_bites ® 20 class TodoList Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n06 . 21 def initializer = 13 examples, 0 failures\n> 03_single_met... * -\n> 04_single_met... * a ond 07_single_class_design » D\n> 05_debugging 1 * e ‘\n\" 24 def add(task) # task is a string representing o instruction\n> 06_single_clas... *\ne 25 # Return nothing f\nA 26 end\nv lib E 27 [\ne M-m o 28 det list i\n@ todo_Jistd U 29 # Returns a list of the tasks added as strings\nv recipes e 30 # Except the completed ones\n¥ phone_desig... U 31 end [\n¥ tasks_design... U 32 7\nv spec g 33 def complete(task) # tosk is a string representing o task to mark complete :\n@ phone_book... U 34 # Returns nothing T\n@ spec_helper... U 35 # Fails if the task doesn't exist '\n@& todo_list_sp... U 36 end g\nrspec [ 37 end )\nGemfile v 38 o\nGemfilelock U 39\n> 08_debugging... * 40  ## 3. Create Examples as Tests\n> 09_multi_class... * f\n> 10_multi_class.. ® a2 _Make o list of exomples of how the class will behave in different situations._\n43\n44 \" ruby\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 T0d0_11ST.add(\"wWash the car”)\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do .\n39 it “fails\" do -\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain* 0 ( Ln 64, C 26 Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 725,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > &) ## 3. Create Examples as Te @7_single_class_design = rspec\n> 00_scratch B 1  # Tasks Class Design Recipe A it X e\n> 01_intro_and_git 2 B -\n> 02_testing_bites ® 3 ##-1. Describe the Problem Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke i a 13 examples, 0 failures\n> 03_single_met... *\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._ 07_single_class_design » D\n> 05_debugging_1 6 | 1\n> 06_single_clas... * 7 A AIseT\nv 07single_cles.. ® 8 > So-that I can keep track of my tasks\n« lib = 9 > I want a program that I can add todo tasks to and see a list of them.\n@ phone_book.... U 15\n@ todo_listrb U = e ek\n= 12 > So that I can focus on tasks to complete\n. o 13 > I'want to mark tasks as complete and have them disappear from the list.\n¥ phone_desig... U 14\n§ tasks_design... U 15  ## 2. Design the Class Interface\nN o s 16\n@ phone_book... U 17 _Include the initislizer and public methods with all parameters ond return\n@ spec_helper... U values. _\n@ todo_list_sp... U 18\n.rspec v 19 \"' ruby\nGemlfile u 20 class TodoList\nGemfilelock U 21 def initializex\n> 08_debugging... * 22 end\n> 09_multi_class... * 23\n> 10_multi_class... * 24 def add(task) # task is o string representing o instruction\n25 # Return nothing\n26 end\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 10d0_11ST.add(\"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain*® 0 ( € Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 726,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5 # Tasks Class Design Recipe > (&) ## 1. Describe the Problem 07_single_class_design » rspec\n> 00_scratch ° 1  # Tasks Class Design Recipe\n> 01_intro_and_git 2 T\n> 02 testing_bites ® 3 ##-1. Describe the Problem Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke i a = 13 examples, O failures\n> 03_single_met... * |\n> 04_single_met... * 5 _Put or write the user story here. Add any clarifying notes you might have._ ‘ 07_single_class_design » D\n> 05_debugging 1 * 6\n> 06_single_clas... * 7 PEASKSNUSeTEN = P\n< 0Z.single.cles—. ® 8 > So that I can keep track of my ‘tinsks’-:: 3\n« lib = 9 > I'want-a program that I can add todo tasks to-and see a'list of them.\na book.... U e\na :::‘eli_st.m u N 3o — - -\noo 12 > So that I can focus on tasks to complete\n. o 13 > I.want to mark tasks as complete and have them disappear from the list.\n¥ phone_desig... U 1 | g o I 3 - S = a\n§ tasks_design... U 15  ## 2. Design the Class Interface\nN o s 16\n@ phone_book... U 17 _Include the initiclizer and public methods with all parameters ond return\n@ spec_helper.... U values._\n@ todo_list_sp... U 18\nrspec v 19 \" ruby\nGemlfile u 20 class TodoList\nGemfilelock U 21 def initializex\n> 08_debugging... * 22 end\n> 09_multi_class... * 23\n> 10_multi_class... * 24 def add(task) # task is o string representing o instruction\n25 # Return nothing\n26 end\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 todo_list.add(\"wash the car”)\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0 [ 14 1(26 elected Spaces: 2 JTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 727,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @ am-- zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 1. Describe the Problem  @7_single_class_design = rspec\n> 00_scratch s 13 > I want to mark tasks as complete and have them disappear from the list.\n> 01_intro_and_git 14\n> 02_testing_bites ® 15 2. Design the Class Interface Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke = 13 examples, 0 failures\n> 03_single_met... * 16\n> 04_single_met... * 17  _Include the initiolizer and public methods with all parameters and return 07_single_class_design -oD\n> 05_debugging 1 * values. _\n> 06_single_clas... * 18\nv 07_single_clas... * 19 ruby\nv lib . 20 class TodoList |\n@ phone_book.... U 21 def initializer\n@ todo_listro U 22 end\nSy & 23\n¥ phone_desig... U 24 def add(task) DItask is a string representing o instruction\nel 25 # Return nothing\n26 end\nMl ; 27\nS iocil 28 |-defilist\nC Spec;'eloe'---- 2 29 # Returns a list of the tasks added as strings\n@ todo_list_sp... U 30 # Except the completed ones\nJrspec v 31 end\nGemfile v 32\nGemfilelock U 33 def complete(task) # task is a string representing a task to mark complete\n> 08_debugging... * 34 # Returns nothing\n> 09_multi_class... * 35 # Fails if the task doesn't exist\n> 10_multi_class... * 36 end\n37 end\nG\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 10d0_11ST.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “\"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0 ( 14, Col1 Spaces: 2 JTF-8 LF Markdown Spe! >\n"
  },
  {
    "seconds": 728,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @ am-- zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > &) ## 1. Describe the Problem  @7_single_class_design = rspec\n> 00_scratch e 13 > I want to mark tasks as complete and have them disappear from the list.\n> 01_intro_and_git 14\n> 02_testing_bites ® 15 2. Design the Class Interface Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke = 13 examples, 0 failures\n> 03_single_met... * 16\n> 04_single_met... * 17 _Include the initiolizer and public methods with all parameters and return 07_single_class_design -oD\n> 05_debugging 1 * values. _\n> 06_single_clas... * 18\nv 0Z_single_clas.. * 19 ruby I\nv lib s 20 class TodoList |\n@ phone_book.... U 21 def initializer\n@ todo_listrb U 2 ond\nSy & 23\n¥ phone_desig... U 24 def add(task) # task is a string representing @ instruction\nel 25 # Return nothing\nU . 26 end\n@ phone_book... U a7\nZ 28 def list\nC sm-f‘eloe'---- 2 29 # Returns a list of the tasks added as strings\n@ todo_list_sp... U 30 # Except the completed ones\nJrspec v 31 end\nGemfile v 32\nGemfilelock U 33 def complete(task) # task is a string representing a task to mark complete\n> 08_debugging... * 34 # Returns nothing\n> 09_multi_class... * 35 # Fails if the task doesn't exist\n> 10_multi_class... * 36 end\n37 end\nn —\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 10d0_11ST.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “\"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0AC 14, Col1 Spaces:2 UTF-8 LF Markdown Spe! 0\n"
  },
  {
    "seconds": 729,
    "text": "o0e tasks_design.md — rspec_setup [B\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design = rspec\n> 00_scratch i 13 > I want to mark tasks as complete and have them disappear from the list.\n> 01 intro_and_git 14 o\n> 02_testing_bites ® 15 ##.2. Design the Class. Interface Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke 13 examples, 0 failures\n> 03_single_met... * 16\n> 04_single_met... * 17 _Include the initiolizer and public methods with all parameters and return 07_single_class_design » []\n> 05_debugging_1 * values._\n> 06_single_clas... * 18\nv 07_single_clas... * 19 \" ruby =\nv lib . 20 class TodoList\n@ phone_book.... U 21 def initializexr\n@ todo_listrd U :: ~end\nv B\nVomndeiau s s\n:’:cslu_dosm...:l 26 I end) eturninothtng\n27 BB\n@ phonebook.. U, N SCEEE\nQLIS ot 29 | # Returns a list of the tasks added as strings\n@ todo_list_sp... U 30 L ‘ ’ww )\n.rspec v 31 b .,4 1\nGemfile u 32\nGemfile.lock U 33 def complete(task) # task is a string representing a task to mark complete\n> 08_debugging... * 34 # Returns nothing\n> 09_multi_class... * 35 # Fails if the task doesn't exist\n> 10_multi_class... * 36 end\n37 end\nn A\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 1000_l1ST.add(\"Wash the car”)\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “\"fails\" do -\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain*® 0 ( n 31, Col 6 (232 selected) Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 730,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design = rspec\n> 00_scratch ° 13 > I want to mark tasks as complete and have them disappear from the list.\n> 01_intro_and_git 4\nN A e 15  ## 2. Design the Class Interface Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke Senhis 16 13 examples, @ failures\n> 03_single_met... *\n. 17 _Include the initiolizer and public methods with all parameters and return 4 3\n> 04_single_met... * 07_single_class_design - D\n2 values._\n> 05_debugging 1 * 18\n> 06_single_clas... * 19 “** yuby\niORsnon cles- S8 20  class TodoList\nAo - 21 | def initializexr -\n@ phone_book.... U 22 end\n@ todo_listrb U 23\nVv recipes ' 24 def add(task) # task is o string representing o instruction\n¥ phone_desig... U 25 5 I 'mm\n¥ tasks_design... U 26 - end\nv spec ° 27 e\n@ phone_book... U 28 | def list\n@ spec_helper.... U 29 - # Returns a list of the tasks added as strings\n@ todo_list_sp... U 30 ‘ ‘# Except the completed ones\nrspec v 31 * .M\nGemfile v 2 )\nGemfilelock U 33 def complete(task) # tosk is a string representing a task to mark complete\n> 08_debugging... * 34 \\lm.mm\n> 09_muliclass.. » 35 || # Fails if the task doesn't exist\n> 10_multi_class... o\n37 end\ng - 1\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 t0oU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “\"fails\" do -\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain*® ) ( n 37, 4 (380 selected) Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 731,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design = rspec\n> 00_scratch . 23 i\n> 01_Jntro_and_git 24 def add(task) # task is a string representing o instruction B\n> 02_testing_bites ® 25 i_' *'%ﬁm‘ Z;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\no S S 26 f'm examples, @ failures\n> 04_single_met... * 27 }\" ! 07_single_class_design » []\n> 05_debugging_1 28 ;~ms-«1gsg )\nSRRy 29 ‘l vl-ﬁﬁig-gjmlq-m-m'ﬂ“-.’ strings\n\" orsingle cies. » % | | # Except the conpleted ones\n5 31 | end\nv lib . -\n2 |\n@ phone_book.... U - - = -\nG 33 ~-m-cgqa_hu_(t_a:k)~§Am-“m-nfufmruﬂtln-mmi-u-m-ﬂlnm\ne e ' #-Retdras-nothing .\n35 | # Fails if the task doesn't exist\n¥ phone_desig... U 36 | end\n¥ tasks_design.. U 37 end\nv spec . 3\n@ phone_book... U 39\n@ spec_helper... U 40 ## 3. Create Examples as Tests\n@ todo_list_sp... U 41\n.rspec v a2 _Make a list of examples of how the class will behave in different situations._\nGemfile v a3\nGemfile.lock ] a4 \" ruby\n> 08_debugging... * a5 #1\n> 09_multi_class... * 46  todo_list = TodoList.new\n> 10_multi_class... * 47  todo_list.list # => []\n48\n9 #2\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 toU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “\"fails\" do -\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0 A C n 36, Col 6 (376 selected) Spaces:2 UTF-B LF Markdown Spe .\n"
  },
  {
    "seconds": 732,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07 single. class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > & ## 2. Design the Class Interf 07_single_class_design » rspec\nA dcrateh g 17 _Include the initializer and public methods with oll parameters and return\ni 2;‘:::::3; s values._ Finished in ©.01335 seconds (files took 0.13759 seconds to load)\no8 - = 18 13 examples, O failures\n> 03_single_met... * 19 xuby\n> 04_single_met... * 20 class TodolList 07_single_class_design » D\n> 05_debugging 1 * 21 def initializer\n> 06_single_clas... * 22 end B\nv 07_single_clas... * 23\nv lib B 24 def add(task) # task is o string representing o instruction\n@ phone_book.... U 25 # Return nothing\n@ todo_list.rb u 26 end\nv recipes . 27 | 1\n¥ phone_desig... U 28 def list\n¥ tasks_design.. U 29 # Returns a list of the tasks added as strings\nv spec ° 30 # Except the completed ones\n@ phone_book... U 81 ond\n@ spec_helper... U 32\n@ todo_list_sp... U 33 def complete(task) # task is a string representing o task to mork complete\n1opec v 34 # Returns nothing\n' 35 # Fails if the task doesn't exist\nGemfile u\nGemfile.lock ) 36 god\n37 end\n> 08_debugging... * 38 s\n> 09_multi_class... * 39\n> 10_multi_class.. ® 40  ## 3. Create Examples as Tests\na1\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 toU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “\"fails\" do -\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain*® ) ( n27c Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 733,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > () ## 2. Design the Class Interf 07_single_class_design » rspec\n> 00_scratch o 35 # Fails if the task doesn’'t exist\n> 01_intro_and_git 36 end )\n> 02_testing_bites 37 end Znished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 S S 38 TN examples, 0 failures\n> 04_single_met... * 39 07_single_class_design - D\n> 06_debugging_1 ® 40  ## 3. Create Examples as Tests\n> 06_single_clas... * a2 -\nN 07 il 42 _Make a list of examples of how the class will behave in different situations._\nv lib ° = A\n@ phone_book.... U o zuby\ns a5 #1\n(et 250 46  todo_list = TodoList.new\nP — = 47  todo_list.list # => []\n¥ phone_desig... U a8\n¥ tasks_design... U PR I\nV spec . 50 todo_list = TodoList.new\n@ phone_book... U 51  todo_list.add(\"Wash the car\")\n@ spec_helper... U 52 todo_list.list # => [“Wash the car”]\n@ todo_list_sp... U 53\n.rspec v 54 # 3\nGemfile v 55 todo_list = TodoList.new\nGemfile.lock ) 56 todo_list.add(\"Wash the car\")\n> 08_debugging... * §7 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 58 todo_list.list # => [“Wash the car”, “\"Wash the dog\"]\n> 10_multi_class... * 59\n60 ¢4\n61 todo_list = TodoList.new\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 1000_l11ST.add(\"Wash the car”)\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it “\"fails\" do -\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain*® ) ( n27c Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 734,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > recipes > ¥ tasks_design.md > (5] # Tasks Class Design Recipe > ) ## 2. Design the Class Interf @7_single_class_design = rspec\n> 00_scratch . 35 # Fails if the task doesn't exist\n> 01_intro_and_git 36 end )\n> 02_testing_bites 37 end ;;nished in 0.01335 seconds (files took 0.13759 seconds to load)\n\" AT 38 . examples, 0 failures\n> 04_single_met... * 39 07_single_class_design - D\n> 05_debugging_1 40  ## 3. Create Examples as Tests\n> 06_single_clas... * a L\nN 07 snoleiriait 42 _Make a list of examples of how the class will behave in different situations._\nv lib * = 05\n@ phone_book.... U ae zuby I\no 45 #1\nCleed 5o U 46 todo_list = TodoList.new\nR e— s 47  todo_list.list # => []\n& phone_desig... U a8\n¥ tasks_design... U 49 #2\nVv spec 2 50 todo_list = TodoList.new\n@ phone_book... U 51 todo_list.add(“Wash the car\")\n@ spec_helper... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_list_sp... U 53\n.rspec v 54 # 3\nGemfile v 55 todo_list = TodoList.new\nGemfile.lock ) 56 todo_list.add(\"Wash the car\")\n> 08_debugging... * 57 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 10_multi_class... ® 59\n60 # 4\n61 todo_list = TodoList.new\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 toU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it \"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0 ( n27,Col3 Spaces:2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 735,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\n RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 2. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch . 35 # Fails if the task doesn't exist\n> 01_intro_and_git 36 end )\n> 02_testing_bites 37 end ;;nished in 0.01335 seconds (files took 0.13759 seconds to load)\n\" AT 38 . examples, 0 failures\n> 04_single_met... * 39 07_single_class_design - D\n> 05_debugging_1 40  ## 3. Create Examples as Tests\n> 06_single_clas... * a\nN 07 snoleiriait 42 _Make a list of examples of how the class will behave in different situations._\nv lib * = 05\n@ phone_book.... U as zuby\n= a5 #1\nCleed 5o U 46  todo_list -_‘],’o'd:(.ist.neu -\nV recipes 2 47  todo_list.list # => []\n& phone_desig... U a8\n¥ tasks_design... U 49 #2\nVv spec 2 50 todo_list = TodoList.new\n@ phone_book... U 51 todo_list.add(“Wash the car\")\n@ spec_helper... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_list_sp... U 53\n.rspec v 54 # 3\nGemfile v 55 todo_list = TodoList.new\nGemfile.lock ) 56 todo_list.add(\"Wash the car\")\n> 08_debugging... * 57 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 10_multi_class... ® 59\n60 # 4\n61 todo_list = TodoList.new\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 ToU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it \"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0 ( na 17 (17 selected) Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 736,
    "text": "[ XN ] tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\n RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 2. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch . 35 # Fails if the task doesn't exist\n> 01_intro_and_git 36 end )\n> 02_testing_bites ® 37 end Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n\" AT 38 . 13 examples, 0 failures\n> 04_single_met... * 39 07_single_class_design - D\n> 05_debugging_1 40  ## 3. Create Examples as Tests\n> 06_single_clas... * a\nN 07 snoleiriait 42 _Make a list of examples of how the class will behave in different situations._\nv lib * = 05\n@ phone_book.... U as zuby\n= 4 #1\nC to.do_hst.m . 46  todo_list = TodoList.new\nR e— s 47  todo_list.list # => []\n¥ phone_desig... U a8 | B\n¥ tasks_design... U 49 #3\nVv spec > 50  todo_list = TodoList.new\n@ phone_book... U 51  todo_list.add(\"Wafsh the car\")\n@ spec_helper... U 52 todo_list.list # => [“Wash the car\"]\n@ todo_list_sp... U 53\n.rspec v 54 # 3\nGemfile v 55 todo_list = TodoList.new\nGemfile.lock ) 56 todo_list.add(\"Wash the car\")\n> 08_debugging... * 57 todo_list.add(\"Wash the dog\")\n> 09_multi_class... * 58 todo_list.list # => [“Wash the car”, “Wash the dog\"]\n> 10_multi_class... ® 59\n60 # 4\n61 todo_list = TodoList.new\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 ToU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it \"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0AC 51 18 (47 selected) Spaces:2 UTF-8 LF Markdown Spe! S\n"
  },
  {
    "seconds": 737,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch B i\n40 ## 3. Create Examples as Tests\n> 01_intro_and_git\n.02 testing._bites ® a1 Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 e - 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, O failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... ® 46  todo_list = TodoList.new\nv 07_single_clas... ® 47  todo_list.list # => []\nv lib B 48 I\n@ phone_book.... U 9 #2\n@ todo_listrb U 50 todo_list = TodoList.new\nv recipes B 51 todo_list.:urld;('m{s'h-tm-cu‘)\n¥ phone_desig... U 52 todo_list.list # => [“Wash the car”] B\n¥ tasks_design... U 53\nv spec . 54 #3\n@ phone_book... U 55 todo_list = TodfList.new\n@ spec_helper.... U 56  todo_list.add(\"Wash the car\")\n@ todo_list_sp... U 57 todo_list.add(\"Wash the dog\")\nrspec v 58 todo_list.list # => [“Wash the car\", “Wash the dog\"]\nGemfile u o\noo :‘: :o:o list = TodoList.new\niz:'o:.:i'q:::\":. : 62 todo_list.add(\"Wash the car\")\ns 63 todo_list.add(\"wash the dog\")\n2 10_muki_cless... ® 64 todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 ToU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it \"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0AC 5 | 19 (78 selected) Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 738,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch B i\n40 ## 3. Create Examples as Tests\n> 01_intro_and_git\n.02 testing._bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\no8 e - 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... ® 46  todo_list = TodoList.new\nv 0Zsingle_clas... * 47  todo_list.list # => []\nv lib . 48\n@ phone_book.... U 9 #2\n@ todo_listrb U 50 todo_list = TodoList.new\nv recipes w 51 todo_list.add(\"wWash the car\")\n¥ phone_desig... U 52 todo_list.list # => [“Wosh the car\"]\n¥ tasks_design... U 53 L\nv spec . 54 #3\n@ phone_book... U 55 todo_list = TodoList.new\n@ spec_helper.... U 56 tofio_nst.gg.d,('yash-the-_gg::)\n& todo_list_sp... U 57  todo_list.add(\"Wash the dog\")\ns v 58 lodo_list‘.l!ltj';!* [“Wash the car”, “Wash the dog\"]\nGemfile u o\noo : :o:o list = TodoList.new\niz:'o:':l'q:::\":. : 62 todo_list.add(\"Wash the car\")\nR 63 todo_list.add(\"wash the dog\")\n2 10_muki_cless... ® 64 todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 ToU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it \"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® ( 8, Col 91 selected) Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 739,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\nv RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 2. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch B i\n40 ## 3. Create Examples as Tests\n> 01_intro_and_git\n.02 testing._bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\no8 e - 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... ® 46  todo_list = TodoList.new\nv 0Zsingle_clas... * 47  todo_list.list # => []\nv lib . 48\n@ phone_book.... U 9 #2\n@ todo_listrb U 50 todo_list = TodoList.new\nv recipes w 51 todo_list.add(\"wWash the car\")\n¥ phone_desig... U 52 todo_list.list # => [“Wosh the car\"]\n¥ tasks_design... U 53 L\nv spec . 54 #3\n@ phone_book... U 55 todo_list = TodoList.new\n@ spec_helper.... U 56  todo_list.add(\"Wash the car\")\n@ todo_list_sp... U 57 todo_list.add(\"Wash the dog\")\nrspec v 58 todo_list.list # =>| [“Wash the car”, “\"Wash the dog\"]\nGemfile u o\noo :‘: :o:o list = TodoList.new\ni zl;_d\":‘t::q:;»:‘.:. : 62  todo_list.add(\"WasH the car\")\nR 63 todo_list.add(\"wash the dog\")\n2 10_muki_cless... ® 64 todo_list.complete(“Wash the car\")\n65 todo_list.list # => [“Wash the dog\"]\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 ToU0_11ST.add( \"wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it \"fails\" do [\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® 0AC n58,Col20 Spaces:2 UTF-8 LF Markdown Spe )\n"
  },
  {
    "seconds": 740,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\n RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (=) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch . %\n40  ## 3. Create Examples as Tests\n> 01_intro_and_git\n> 02_testing_bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nke = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... * 46 todo_list = TodoList.new\nv 07_single_clas... 47  todo_list.list # => []\nv lib . 48\n@ phone_book.... U 49 #2\n@ todo_list.rb u 50 todo_list = TodoList.new\nv recipes “ 51 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 52 todo_list.list # => [“Wash the car\"]\n¥ tasks_design... U 53 L\nv spec . 54 #3\n@ phone_book... U 55 todo_list = TodoList.new\n@ spec_helper... U 56  todo_list.add(\"Wash the car\")\n@ todo_list_sp... U 57 todo_list.add(\"Wash the dog\")\nrspec v 58 todo_list.list # =>| [“Wash the car”, “Wash the dog\"]\nGemfile u 35\no \" :(1, :o:o list = TodoList.new\niz:'d:':q:::\":. : 62 todo_list.add(\"Wash the car\")\ne 63 todo_list.add(“Wash the dog\")\n2 10_muki_cless... ® 64 todo_list.complete(“Wash the car\"™)\n65 todo_list.list # => I('umsh the dog\"]\n@ todo_list_spec.rb U\n07_single_class_design > spec > @ todo_list_spec.rb\n31 tod0_11ST.add( Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n37\n38 context \"when we try to complete a non-existent task\" do\n39 it \"fails\" do -\n40 todo_list = TodoList.new\n> TIMELINE a1 todo_list.add(\"Wash the car\")\nmain® [N n58, Col20 Spaces:2 UTF-8 LF Markdown Spel B\n"
  },
  {
    "seconds": 741,
    "text": "o0e tasks_design.md — rspec_setup [B\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\n RSPEC_SETUP ;.xrg:v;rw.aa(.;Jw..qn recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tests  @7_single_class_design » rspec\n> 00_scratch .\n- 40  ## 3. Create Examples as Tests\n> 01_intro_and_git :\nTR [ a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nke e 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design » D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... * 46 todo_list = TodoList.new\nv 0Z_single_clas... ® 47  todo_list.list # => []\nv lib H 48 W\n@ phone_book.... U 49 # 2\n@ todo_listrb U 50  todo_list = TodoLis@new\nv recipes . 51 todo_list.add(\"Wash the car\")\n¥ phone_desig... U 52 todo_list.list # => [“Wash the car\"]\nBB 1B GO SIgN... U o ————————————\no @ todo_list_spec.rb U\nv spec B\n@ phone_book... U 07_single_class_design > spec > @ todo_list_spec.rb\nPV e 31 todo_11ST.add( “Wash the car\")\n> lodo-llsl s 32 todo_list.add(\"Wash the dog\")\nISP b 33 todo_list.complete(”\"Wash the car\")\n.rspec 34 expect(todo_list.list).to eq [“\"Wash the dog\"]\nGemfile u 35 ond\nGemfile.lock v 36 ond\n> 08_debugging... * 37\n> 09_multi_class... ® 38 context \"when we try to complete a non-existent task” do\n> 10_multi_class... 39 it \"fails\" do\n40 todo_list = TodoList.new\n41 todo_list.add(\"Wash the car\")\na2 expect { todo_list.complete(\"Wash the sheep\") }.to raise_error \"No such task.\n43 end\n4 end b\n45  end |\na6 B\n> TIMELINE\nmain® 0AC n58, Col20 Spaces:2 UTF-8 LF Markdown Spe .\n"
  },
  {
    "seconds": 742,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\n RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch . %\nS o1 lote e gt 40  ## 3. Create Examples as Tests\n> 02 testing_bites ® 41 ) Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nke = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... 46  todo_list = TodoList.new B\nv 0Z_single_clas... ® 47  todo_list.list # => []\nv lib s 48\n@ phone_book.... U 49 # 2\n@ todo_listrb U & todo_list_spec.rb U\n. % % 07_single_class_design > spec > @ todo_list_spec.rb\ni pm’m‘d’_m“' = 1 require “\"todo_list\"\n¥ tasks_design... U 2\nAmpeG . 3 RSpec.describe TodolList do\n@ phone_book... U a context “\"given no tasks\" do\n@ spec_helper.... U 5 it \"has an empty list\" do\n@ todo_list_sp... U 6 todo_list = TodoList.new\nrspec v 7 expect(todo_lust.ust).to eq []\nGemfile u 8 end\nGemfile.lock v 9 end\n> 08_debugging... * 10\n> 09_multi_class... * 11 context “\"given a task\" do\n> 10_multi_class... * 12 it “\"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"wWash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end T\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [“\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n> TIMELINE 7 _\nmain*® ) ( n 58, Col 20 Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 743,
    "text": "[ N J tasks_design.md — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U X @ todo_list.rb U @O - zsh 8 -\n RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch . %\nS o1 lote e gt 40  ## 3. Create Examples as Tests\n> 02 testing_bites ® 41 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nke = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... 46  todo_list = TodoList.new B\nv 0Z_single_clas... ® 47  todo_list.list # => []\nv lib s 48\n@ phone_book.... U 49 # 2\n@ todo_listrb U @ todo_list_spec.rb U\n. % % 07_single_class_design > spec > @ todo_list_spec.rb\ni pm’m‘d’_m“' = 1 require “\"todo_list\"\n¥ tasks_design... U 2\nML . 3 RSpec.describe TodoList do\n@ phone_book... U a context “\"given no tasks\" do\n@ spec_helper.... U 5 it \"has an empty list\" do\n@ todo_list_sp... U 6 todo_list = TodoList.new\nrspec v 7 expect(todo_list.list).to eq []\nGemfile u 8 end\nGemfile.lock v 9 end\n> 08_debugging... * 10\n> 09_multi_class... * 11 contextI“given a task\" do\n> 10_multi_class... * 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(“wWash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end T\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [“\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n> TIMELINE 7\nmain*® ) ( Ln 58, Col 20 Spaces: 2 JTF-8 LF Markdown Spe >\n"
  },
  {
    "seconds": 744,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh 8 -\n RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch . %\nS o1 lote e gt 40  ## 3. Create Examples as Tests\n> 02 testing_bites ® 41 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nke = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * a3\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... 46  todo_list = TodoList.new B\nv 0Z_single_clas... ® 47  todo_list.list # => []\nv lib s 48\n@ phone_book.... U 49 # 2\n@ todo_listrb U @ todo_list_spec.rb U x M-\n.. % % 07_single_class_design > spec > @ todo_list_spec.rb\nv mm‘d'f'g\"' = 1 require “\"todo_list\"\n¥ tasks_design... U 2\nML . 3 RSpec.describe TodoList do\n@ phone_book... U a context “\"given no tasks\" do\n@ spec_helper.... U 5 it \"has an empty list\" do\n@ todo_list_sp... U 6 todo_list = TodoList.new |\n.rspec v 7 expect(todo_list.list).to eq []\nGemfile u 8 end\nGemfile.lock v 9 end\n> 08_debugging... * 10\n> 09_multi_class... * 11 context “given a task\" do\n> 10_multi_class... * 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(“wWash the car\")\n15 -xpect(todo_liit.list).to eq [\"wash the car\"]\n16 |n|1\n17 end\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [“\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n> TIMELINE 7\nmain® 0AC 16, Col8 Spaces: 2 TF-8 LF Ruby {3 Spe -\n"
  },
  {
    "seconds": 745,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh a -\n RSPEC_SETUP single_class_design > recipes > ¥ tasks_design.md > () # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch - N\n40  ## 3. Create Examples as Tests\n> 01_intro_and_git\n> 02 testing_bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nK = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * p\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... * 46 todo_list = TodoList.new W\nv 0Z_single_clas... 47  todo_list.list # => []\nv lib B 48\n@ phone_book.... U 49 #2\n@ todo_listrb U @ todo_list_spec.rb U X tam -\nP e 5 ¢ 07_single_class_design > spec > @ todo_list_spec.rb\nv phom‘d’_s'q\"' ) 1 require \"todo_list\"\n¥ tasks_design... U 2\npASpec - 3 Rspec.describe TodoList do\n@ phone_book... U a4 context \"given no tasks\" -do\n@ spec_helper.... U 5 it \"has an empty list\" do\n@ todo_list_sp... U 6 todo_list = TodoList.new\nrspec v 7 expect(todo_list.list).to eq []\nGemfile v 8 end B\nGemfile.lock v 9 end\n> 08_debugging... * 10 L\n> 09_multi_class... * 11 context “\"given a task\" do\n> 10_multi_class... * 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end\n18\n19 context “given two tasks\" do\n20 it \"has ltth tasks in the list\" do\n21 todo_l1i$t = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n> TIMELINE 27\nmain*® ) ( (L. a Spaces: 2 JTF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 746,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U » @ todo_list.rb U zsh a -\nv RSPEC_SETUP ;..rg:w;‘.ac(.;k»c.gn recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tests  @7_single_class_design » rspec\n7\ni:_‘:::';:d_g“ S 40  ## 3. Create Examples as Tests\n> 02 testing_bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nK = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * p\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... * 46 todo_list = TodoList.new W\nv 0Z_single_clas... 47  todo_list.list # => []\nv lib B 48\n@ phone_book.... U 49 #2\n@ todo_listrb U @ todo_list_spec.rb U X @ -\ng # 07_single_class_design > spec > @ todo_list_spec.rb\n¥ phone_desig... U v\n¥ tasks_design... U 11 context “\"given a task\" do\nv spec ° 12 it \"has the task in the list\" do\n@ phone_book... U 13 todo_list = TodoList.new\n@ spec_helper.... U 14 todo_list.add(\"Wash the caxr\")\n& todo_list_sp... U 15 :xpect(todo_l&st.list).to eq [\"wash the car\"]\nrspec v 6 ok\nGemfile v ;; o T\n5 o:‘:::::::... l: 19 context “given two tasks\" do M\n5 os-mni RN 20 it \"has !*:th tasks in the list\" do\nW e 5 21 todo_list = TodoList.new\n> 10_muki_cless... ® 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_likt = TodoList.new\n3 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(\"Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37\nmain® 0 ( (L. a Spaces: 2 JTF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 747,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U » @ todo_list.rb U zsh a -\nv RSPEC_SETUP ;..rg:w;‘.ac(.;k»c.gn recipes > ¥ tasks_design.md > ) # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tests  @7_single_class_design » rspec\n7\ni:‘::‘:d_g“ S 40  ## 3. Create Examples as Tests\n> 02 testing_bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nK = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * p\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... * 46 todo_list = TodoList.new W\nv 0Z_single_clas... 47  todo_list.list # => []\nv lib B 48\n@ phone_book.... U 49 #2\n@ todo_listrb U @ todo_list_spec.rb U X @ -\nV.m::: pn :} 07_single_class_design > spec > @ todo_list_spec.rb\ng :’.m_;“:‘l R 1 context \"given a task\" do\no e 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\nDo heokc e 14 todo_list.add(\"Wash the car\")\nSisecchobe. o 15 expect(todo_list.list).to eq [\"Wash the car\"]\n& todo_list_sp... U 16 ond\nrspec v 17 end\nGemfile v 18\nGemfilelock U 19 context \"given two tasks\" do 3\n> 08_debugging... * 20 it \"has both tasks in the list\" do\n> 09_multi_class... * 21 todo_list = TodoList.new\n> 10_multi_class... * 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 axpect(ttodo_ust.list).to eq [\"wash the car\", \"Wash the dog\"]\n25 end I\n26 end\n27\n28 context “\"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37\nmain® 0AC Ln24,Col14 Spaces:2 UTF-8 LF Ruby s Spe S\n"
  },
  {
    "seconds": 748,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U » @ todo_list.rb U zsh a -\n RSPEC_SETUP _single_class_design > recipes > ¥ tasks_design.md > (2 # Tasks Class Design Recipe > (=) ## 3. Create Examples as Tests  @7_single_class_design » rspec\n> 00_scratch - N\nS o1t st 40  ## 3. Create Examples as Tests\n> 02 testing_bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nK = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * p\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... * 46 todo_list = TodoList.new W\nv 0Z_single_clas... 47  todo_list.list # => []\nv lib B 48\n@ phone_book.... U 49 #2\n@ todo_listrb U @ todo_list_spec.rb U X @ -\ng # 07_single_class_design > spec > @ todo_list_spec.rb\n¥ phone_desig... U\n¥ tasks_design... U 11 context “\"given a task\" do\no e 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\nDo heokc e 14 todo_list.add(\"Wash the car\")\nSisecchobe. o 15 expect(todo_list.list).to eq [\"Wash the car\"]\n& todo_list_sp... U 16 ond\nrspec v 17 end\nGemfile v 18 L]\nGemfilelock U 19 context \"given two tasks\" do\n> 08_debugging... * 20 it \"has both tasks in the list\" do [l\n> 09_multi_class... * 21 todo_list = TodoList.new\n> 10_multi_class... * 22 todo_lisgt.add(\"Wash the car\")\n23 todo_liit.add(\"ﬁash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37\nmain® 0AC n26 Col8 Spaces:2 UTF-8 LF Ruby % Spe o\n"
  },
  {
    "seconds": 749,
    "text": "[ N J todo_list_spec.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_designmd U » @ todo_list.rb U zsh a -\n RSPEC_SETUP _single_class_design > recipes > ¥ r.v.xn,(g.gr md > ) # Tasks Class Design Recipe > (5 ## 3. Create Examples as Tests  @7_single_class_design = rspec\n> 00_scratch - N\nS 01'\"‘\"0 and/git 40  ## 3. Create Examples as Tests\n> 02 testing_bites ® a1 Finished in ©.01335 seconds (files took 0.13759 seconds to load)\nK = = 42 _Make a list of examples of how the class will behave in different situations._ 13 examples, 0 failures\n> 03_single_met... * p\n> 04_single_met... * a4 \" ruby 07_single_class_design - D\n> 05_debugging 1 * 45 #1\n> 06_single_clas... * 46 todo_list = TodoList.new W\nv 0Z_single_clas... 47  todo_list.list # => []\nv lib B 48\n@ phone_book.... U 49 #2\n@ todo_listrb U @ todo_list_spec.rb U X @ -\ng # 07_single_class_design > spec > @ todo_list_spec.rb\n¥ phone_desig... U\n¥ tasks_design... U 11 context “\"given a task\" do\no e 12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\nDo heokc e 14 todo_list.add(\"Wash the car\")\nSisecchobe. o 15 expect(todo_list.list).to eq [\"Wash the car\"]\n@ todo_list_sp... U 16 ond\nrspec v 17 end\nGemfile v 18 .\nGemfilelock U 19 context \"given two tasks\" do\n> 08_debugging... * 20 it \"has both tasks in the list\" do il\n> 09_multi_class... * 21 todo_list = TodoList.new\n> 10_multi_class... * 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 it “removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37\nmain® 0AC n26 Col8 Spaces:2 UTF-8 LF Ruby % Spe o\n"
  },
  {
    "seconds": 750,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_liggb U x ¥ - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 otasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nK 13 examples, O failures\n> 03_single_met... ® 4 end -\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas.. * 8 ond\nv lib s 9\nQLSRN 12 [ ecemiate(t0\n@ todo_listrb U @ todo_list_spec.rb U\nPy e % 07_single_class_design > spec > @ todo_list_spec.rb\n¥ phone_desig... U = -\n# tasks_design... U 11 cor?text given a task\" do\ni e 12 it “\"has the task in the list\" do\n@ oheon book U 13 todo_list = TodoList.new\nv 14 todo_list.add(\"Wash the car\")\n@ spec_helper... U 15 expect(todo_list.list).to eq [\"Wash the car\"]\n@ todo_list_sp... U 16 ond\nrspec v 17 end\nGemfile u 18\nGemfile.lock U 19 context \"given two tasks\" do L\n> 08_debugging... * 20 it \"has both tasks in the list\" do\n> 09_multi_class... * 21 todo_list = TodoList.new\n> 10_multi_class... * 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 it “\"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [“\"Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37\nmain® 0AC n1,Col63 Spaces:2 UTF-8 LF Ruby Spe .\n"
  },
  {
    "seconds": 751,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X v a-- zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lic > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize .\nBl > oz testng_bes « 3 ptasks- =[] i;n::m::,oéoiiﬁui::mds (files took 0.13759 seconds to load)\n> 03_single_met... ® 4 end -\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas.. * 8 ond\nv lib s 9\nI | et\n@ todo_listrb U @ todo_list_spec.rb U\nV.'ecm - :, 07_single_class_design > spec > @ todo_list_spec.rb\n& :’:s‘::;e:s; 3 1 context “\"given a task\" do\ni e 12 it “\"has the task in the list\" do\n@ oheon book U 13 todo_list = TodoList.new\nv 14 todo_list.add(\"Wash the car\")\n@ spec_helper... U 15 expect(todo_list.list).to eq [\"Wash the car\"]\n@ todo_list_sp... U 16 ond\nJrspec v 17 end\nGemfile u 18\nGemfile.lock U 19 context \"given two tasks\" do L\n> 08_debugging... * 20 it \"has both tasks in the list\" do\n> 09_multi_class... * 21 todo_list = TodoList.new\n> 10_multi_class... * 22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n28 context “\"when we complete a task\" do\n29 it “\"removes the task from the list\" do\n30 todo_list = TodoList.new\n31 todo_list.add(\"Wash the car\")\n32 todo_list.add(\"Wash the dog\")\n33 todo_list.complete(“Wash the car\")\n34 expect(todo_list.list).to eq [\"Wash the dog\"]\n35 end\n36 end\n> TIMELINE 37\nmain® 0AC n1,Col63 Spaces:2 UTF-8 LF Ruby & Spe .\n"
  },
  {
    "seconds": 752,
    "text": "oo todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\n06 13 examples, 0 failures\n> 03_single_met... ® 4 end\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) -\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® i and\nN . 1: def complete(task)\nef complete(tas\nO m’m = 11 fail \"No such task.\" unless @tasks.include? task{\n- !o.do_hst.rb = 12 @tasks.delete(task)\nP, = 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNAmpacC . 16 retuxn @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\nJrspec v\nGemfile u\nGemfile.lock v\n> 08 DUgging... § e et\n> 09_multi_class... ® @ todo_list_spec.rb U x\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] =\n16 end\n17 end ul\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® [} ( n1,Col53 Spaces:2 UTF-8 LF Ruby s Spe’ >\n"
  },
  {
    "seconds": 753,
    "text": "oo todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° . class TodoList\n> 01_intro_and_git 2 def initialize .\nS0 i b e 3 etasks- =[] i;mShedlm 050;335 seconds (files took 0.13759 seconds to load)\n& o natile a et examples, ailures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —_\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® i and\nN . 1: def complete(task)\nef complete(tas\n:::::;‘:o:: 1 fail \"No such task.\" unless @tasks.include? tasy\ng 12 @tasks.delete(task)\nP, = 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNAmpacC . 16 retuxn @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nrspec v\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U x\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the 1iJt\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] =\n16 end =)\n17 end\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® [} ( n1,Col53 Spaces:2 UTF-8 LF Ruby s Spe’ >\n"
  },
  {
    "seconds": 754,
    "text": "oo todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch ° . class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 13 examples, 0 failures\n¢ > 03_single_met... ® 4 end\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —_\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® i and\nN . 1: def complete(task)\nef complete(tas\n:::::;‘:o:: 1 fail \"No such task.\" unless @tasks.include? tasy\ng 12 @tasks.delete(task)\nP, = 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nNAmpacC . 16 retuxn @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nrspec v\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U x\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expoct(todo_list.l{st).to eq [\"wash the car\"] a\n16 end\n17 end ul\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® [} ( n1,Col53 Spaces:2 UTF-8 LF Ruby s Spe’ >\n"
  },
  {
    "seconds": 755,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in 0.01335 seconds (files took 0.13759 seconds to load)\no8 A a ot examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) -\n5108 single clasit & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:::::“‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\n. 12 @tasks.delete(task)\ne 1y 13 end\n¥ phone_desig... U 1\n¥ tasks_design.. U 15 def list\naspec . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® & todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task” do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 upect(todo_listli{st).(o eq [\"wash the car\"] .\n16 end\n17 end m\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain* 0AQ n 53 Spaces: 2 TF-8 LF Ruby {3 Spe >\n"
  },
  {
    "seconds": 756,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\no8 A a ot 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) -\n5108 single clasit & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\n. 12 @tasks.delete(task)\ne 1y 13 end\n¥ phone_desig... U 1\n¥ tasks_design.. U 15 def list\naspec . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® & todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task” do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"uasi\\;the car\")\n15 expect(todo_list.1ist).to eq [\"Wash the car\"] .\n16 end\n17 end m\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain* 0AQ n 53 Spaces: 2 TF-8 LF Ruby {3 Spe >\n"
  },
  {
    "seconds": 757,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\no8 A a ot 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) -\n5108 single clasit & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:::::“‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\n. 12 @tasks.delete(task)\ne 1y 13 end\n¥ phone_desig... U 1\n¥ tasks_design.. U 15 def list\naspec . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® & todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task” do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"uasi\\;the car\")\n15 expect(todo_list.1ist).to eq [\"Wash the car\"] .\n16 end\n17 end m\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain* 0AQ n 53 Spaces: 2 TF-8 LF Ruby {3 Spe >\n"
  },
  {
    "seconds": 758,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\no8 A a ot 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) -\n5108 single clasit & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:::::“‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\n. 12 @tasks.delete(task)\ne 1y 13 end\n¥ phone_desig... U 1\n¥ tasks_design.. U 15 def list\naspec . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® & todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task” do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"uasi\\;the car\")\n15 expect(todo_list.1ist).to eq [\"Wash the car\"] .\n16 end\n17 end m\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain* 0AQ n 53 Spaces: 2 TF-8 LF Ruby {3 Spe >\n"
  },
  {
    "seconds": 759,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\no8 A a ot 13 examples, @ failures\n> 04_single_met... * 5 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) -\n5108 single clasit & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:::::“‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\n. 12 @tasks.delete(task)\ne 1y 13 end\n¥ phone_desig... U 1\n¥ tasks_design.. U 15 def list\naspec . 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® & todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task” do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"uasi\\;the car\")\n15 expect(todo_list.1ist).to eq [\"Wash the car\"] .\n16 end\n17 end m\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain* 0AQ n 53 Spaces: 2 TF-8 LF Ruby {3 Spe >\n"
  },
  {
    "seconds": 760,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a end examples, 0 failures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —_\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasq\no 12 @tasks.delete(task)\ne 5 13 end\n¥ phone_desig... U 1\n¥ s desion.-U 35 | .def 118t\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.ldd(\"ilash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] .\n16 end\n17 end M\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 761,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a end examples, 0 failures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —_\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasK\no 12 @tasks.delete(task)\ne 5 13 end\n¥ phone_desig... U 1\n¥ s desion.-U 35 | .def 118t\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(tddo_list.list).to eq [\"Wash the car\") .\n16 end\n17 end M\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 762,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a end examples, 0 failures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —_\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\no 12 @tasks.delete(task)\ne 5 13 end\n¥ phone_desig... U 1\n¥ s desion.-U 35 | .def 118t\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(tddo_list.list).to eq [\"Wash the car\") .\n16 end\n17 end M\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 763,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a end examples, 0 failures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —_\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\no 12 @tasks.delete(task)\ne 5 13 end\n¥ phone_desig... U 1\n¥ s desion.-U 35 | .def 118t\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(tddo_list.list).to eq [\"Wash the car\") .\n16 end\n17 end M\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 764,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a end examples, 0 failures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —_\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasi\no 12 @tasks.delete(task)\ne 5 13 end\n¥ phone_desig... U 1\n¥ s desion.-U 35 | .def 118t\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemfile u\nGemfile.lock v\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(tddo_list.list).to eq [\"Wash the car\") .\n16 end\n17 end M\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 765,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] ;;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a end examples, 0 failures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) -\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy ‘\nR 12 @tasks.delete(task)\nTR 5 13 end\n& phone_desig... U 1\n¥ tasks_design... U 15 def 1list\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemfile v\nGemfileock U I\n> 08_debugging... *\n> 09_multi_class... ® @ todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(“Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"] .\n16 end B\n17 end\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® 0 A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 766,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke S a end 13 examples, @ failures\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task) —\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\nR 12 @tasks.delete(task)\ne Y 13 end\n& phone_desig... U 1\n¥ tasks_design... U 15 def 1list\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec v\nGemfile v\nGemfile.lock v\n> 08_debugging... * +\n> 09_multi_class... ® @ todo_list_spec.rb U\n> 10_multi_class... * 07_single_class_design > spec > @ todo_list_spec.rb\n11 context “given a task\" do\n12 it \"has the task in the list\" do\n13 todo_list = TodoList.new\n14 todo_list.add(“Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end L\n17 end\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n> TIMELINE 25 end\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby 3 Spe .\n"
  },
  {
    "seconds": 767,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;n::m:: oée;l:ﬁu:::onds (files took 0.13759 seconds to load)\nBl > 03_single_met... ® 4 end !\n> 04_single_met... * S 07_single_class_design - D\n> 05_debugging 1 6 def add(task) |\n5108 single cleas & 7 @tasks << task\nv 07Z_single_clas... * 8 end\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 11 fail \"No such task.\" unless @tasks.include? tasy\nR 12 @tasks.delete(task)\nbl 5 13 end\n& phone_desig... U 1\n¥ tasks_design... U 15 def list\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\nrspec DN o S s —Sk\nGemfile v @ todo_list_spec.rb U\nGemfilelock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... © 1 context “\"given a task\" do\n> 09_multi_class... 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end L)\n17 end =\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0 [ Ln 11, Col 53 Spaces: 2 TF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 768,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke S a end 13 examples, @ failures\n> 04_single_met... * S _ 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task)\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 1 fail \"No such task.\" unless @tasks.include? task\nR 12 @tasks.delete(task)\nbl 5 13 end\n& phone_desig... U 1\n¥ tasks_design... U 15 def list\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u —'!’—\nGemfile v @ todo_list_spec.rb U\nGemfile.lock [V} 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end .\n17 end - |\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 769,
    "text": "[ N todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U X tm - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design = rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\nke S a end 13 examples, @ failures\n> 04_single_met... * S _ 07_single_class_design - D\n> 05_debugging_1 * 6 def add(task)\n5108 single cleas & 7 @tasks << task\nv 07_single_clas... * 8 ond\ns . 1; def complete(task)\nef complete(tas\n:m;‘:o:: 1 fail \"No such task.\" unless @tasks.include? task\nR 12 @tasks.delete(task)\nbl 5 13 end\n& phone_desig... U 1\n¥ tasks_design... U 15 def list\nN \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u —'!’—\nGemfile v @ todo_list_spec.rb U\nGemfile.lock [V} 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end =\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.1list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0A0 Ln1),Col53 Spaces:2 UTF-8 LF Ruby {3 Spe .\n"
  },
  {
    "seconds": 770,
    "text": "[ N J todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tm-- zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList ey e e Kb\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;n::hedlig oée;liziiu::ionas (files took 0.13759 seconds to load)\nBl > 03_single_met... ® 4 end S\n> 04_single_met... * S _ 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n2108 single rleat s 7 @tasks << task\nv 07Z_single_clas... * . ond\ni . 1; def complete(task)\nef complete(tas|\n:m;‘:o:: 1 fail \"No such task.\" unless @tasks.include? task\n- 12 @tasks.delete(task)\nb s 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nM pac - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n4 todo_list_sp... U 19\n.rspec u —_—\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it “\"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end =\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n1 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain* 0 [+ Ln 11, Col 53 Spaces: 2 TF-8 LF Ruby s Spe' .\n"
  },
  {
    "seconds": 771,
    "text": "[ N J todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tam - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList s R e Kb\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\n& A 4 end 13 examples, @ failures\n> 04_single_met... * S _ 07_single_class_design -+ D\n> 05_debugging_1 ® 6 def add(task)\n2108 single rleat s 7 @tasks << task\nv 07Z_single_clas... * . ond\ni . 1; def complete(task)\nef complete(tas|\n:m;‘:o:: 1 fail \"No such task.\" unless @tasks.include? task\n- 12 @tasks.delete(task)\nb s 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nM pac - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n4 todo_list_sp... U 19\n.rspec u —@—\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it “\"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end =\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n1 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain* 0 [+ Ln 1, Col 53 Spaces: 2 TF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 772,
    "text": "[ N J todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tam - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList s R e Kb\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] Finished in ©.01335 seconds (files took 0.13759 seconds to load)\n& A 4 end 13 examples, @ failures\n> 04_single_met... * S _ 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n2108 single rleat s 7 @tasks << task\nv 07Z_single_clas... * . ond\ni . 1; def complete(task)\nef complete(tas|\n:m;‘:o:: 1 fail \"No such task.\" unless @tasks.include? task\n- 12 @tasks.delete(task)\nb s 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nM pac - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n4 todo_list_sp... U 19\nJrspec v +\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it “\"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end =\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n1 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain* 0 [+ Ln 1, Col 53 Spaces: 2 TF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 773,
    "text": "[ N J todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tam - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList s R e Kb\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;n::hedlig oée;liziiu::ionas (files took 0.13759 seconds to load)\nBl > 03_single_met... ® 4 end SR\n> 04_single_met... * S _ 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n2108 single rleat s 7 @tasks << task\nv 07Z_single_clas... * . ond\ni . 1; def complete(task)\nef complete(tas|\n:m;‘:o:: 1 fail \"No such task.\" unless @tasks.include? task\n- 12 @tasks.delete(task)\nb s 3 13 end\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nM pac - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n4 todo_list_sp... U 19\n.rspec u —4’—\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it “\"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end =\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n1 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain* 0 [+ Ln 1, Col 53 Spaces: 2 TF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 774,
    "text": "[ N J todo_list.rb — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_listrb U X tam - zsh 8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in 0.01335 seconds (files took 0.13759 seconds to load)\n& A 4 end examples, 0 failures\n> 04_single_met... * S _ 07_single_class_design - D\n> 05_debugging_1 ® 6 def add(task)\n2108 single rleat s 7 @tasks << task\nv 07Z_single_clas... * . ond\ni . 1; def complete(task)\nef complete(tas|\n:m;‘:o:: 1 fail \"No such task.\" unless @tasks.include? task\nRS 12 @tasks.delete(task)\nR . 13 end 1\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nM pac - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n4 todo_list_sp... U 19\nJrspec v\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it “\"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end =\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“\"Wash the car\", \"Wash the dog\"]\n25 end\n1 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain* 0 [+ Ln 1, Col 53 Spaces: 2 TF-8 LF Ruby s Spe’ ]\n"
  },
  {
    "seconds": 775,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList R\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\n& S a o examples, 0 failures\n> 04_single_met... * S _ 07_single_class_design -+ I\n> 05_debugging_1 * 6 def add(task)\n5108 single cles’' & 7 @tasks << task\nv 07_single_clas... * s ond\nv lib . 2\ni (1 10 def co-?lttc(task) .\ndttoda ki U 11 fail \"No such task.\" unless @tasks.include? task\nS 12 @tasks.delete(task)\n.. 5 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\nspec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemifile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n! 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® 0A0 s Spe 0\n"
  },
  {
    "seconds": 776,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList e\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\n& S a o examples, O failures\n> 04_single_met... * S _ 07_single_class_design -+ I\n> 05_debugging_1 * 6 def add(task)\n5108 single cles’' & 7 @tasks << task\nv 07_single_clas... * s ond\nv lib . 2\ni (1 10 def co-?lttc(task) .\ndttoda ki U 11 fail \"No such task.\" unless @tasks.include? task\nS 12 @tasks.delete(task)\n.. 5 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\nspec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemifile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n! 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® 0A0 s Spe 0\n"
  },
  {
    "seconds": 777,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList e\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\n& S a o examples, O failures\n> 04_single_met... * S _ 07_single_class_design -+ I\n> 05_debugging_1 * 6 def add(task)\n5108 single cles’' & 7 @tasks << task\nv 07_single_clas... * s ond\nv lib . 2\ni (1 10 def co-?lttc(task) .\ndttoda ki U 11 fail \"No such task.\" unless @tasks.include? task\nS 12 @tasks.delete(task)\n.. 5 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\nspec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemifile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n! 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® 0A0 s Spe 0\n"
  },
  {
    "seconds": 778,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList e\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\n& S a o examples, O failures\n> 04_single_met... * S _ 07_single_class_design -+ I\n> 05_debugging_1 * 6 def add(task)\n5108 single cles’' & 7 @tasks << task\nv 07_single_clas... * s ond\nv lib . 2\ni (1 10 def co-?lttc(task) .\ndttoda ki U 11 fail \"No such task.\" unless @tasks.include? task\nS 12 @tasks.delete(task)\n.. 5 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\nspec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemifile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n! 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® 0A0 s Spe 0\n"
  },
  {
    "seconds": 779,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList e\n> 01_intro_and_git 2 def initialize .\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\n& S a o examples, O failures\n> 04_single_met... * S _ 07_single_class_design -+ I\n> 05_debugging_1 * 6 def add(task)\n5108 single cles’' & 7 @tasks << task\nv 07_single_clas... * s ond\nv lib . 2\ni (1 10 def co-?lttc(task) .\ndttoda ki U 11 fail \"No such task.\" unless @tasks.include? task\nS 12 @tasks.delete(task)\n.. 5 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\nspec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\n.rspec v\nGemifile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n! 26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® 0A0 s Spe 0\n"
  },
  {
    "seconds": 780,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList Ry\n> 01_intro_and_git 2 def initialize N\n> 02_testing_bites ® 3 @tasks =[] i;n::hedliz oée;l:ﬁu::;onds (files took 0.13759 seconds to load)\nBl > 03_single_met.. ® 4 end -\n> 04_single_met... * S __ 07_single_class_design » I\n> 05_debugging_1 * 6 def add(task)\n108 single clea 8 7 @tasks << task\nv 07_single_clas... * $ ond\nv lib . 2\nAt {1 10 def co-?lttc(task) .\nTy 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nel > 13 end\n¥ phone_desig... U 3 I\n¥ tasks_design... U 15 def 1list\nopec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end b\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® (Y s Spe E\n"
  },
  {
    "seconds": 781,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList Ry\n> 01_intro_and_git 2 def initialize N\n> 02_testing_bites ® 3 @tasks =[] i;n::hedliz oée;l:ﬁu::;onds (files took 0.13759 seconds to load)\nBl > 03_single_met.. ® 4 end -\n> 04_single_met... * S __ 07_single_class_design » I\n> 05_debugging_1 * 6 def add(task)\n108 single clea 8 7 @tasks << task\nv 07_single_clas... * $ ond\nv lib . 2\nAt {1 10 def co-?lttc(task) .\nTy 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nel > 13 end\n¥ phone_desig... U 3 I\n¥ tasks_design... U 15 def 1list\nopec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end b\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® (Y s Spe E\n"
  },
  {
    "seconds": 782,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList Ry\n> 01_intro_and_git 2 def initialize N\n> 02_testing_bites ® 3 @tasks =[] i;n::hedliz oée;l:ﬁu::;onds (files took 0.13759 seconds to load)\nBl > 03_single_met.. ® 4 end -\n> 04_single_met... * S __ 07_single_class_design » I\n> 05_debugging_1 * 6 def add(task)\n108 single clea 8 7 @tasks << task\nv 07_single_clas... * $ ond\nv lib . 2\nAt {1 10 def co-?lttc(task) .\nTy 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nel > 13 end\n¥ phone_desig... U 3 I\n¥ tasks_design... U 15 def 1list\nopec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end b\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® (Y s Spe E\n"
  },
  {
    "seconds": 783,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList Ry\n> 01_intro_and_git 2 def initialize N\n> 02_testing_bites ® 3 @tasks =[] i;n::hedliz oée;l:ﬁu::;onds (files took 0.13759 seconds to load)\nBl > 03_single_met.. ® 4 end -\n> 04_single_met... * S __ 07_single_class_design » I\n> 05_debugging_1 * 6 def add(task)\n108 single clea 8 7 @tasks << task\nv 07_single_clas... * $ ond\nv lib . 2\nAt {1 10 def co-?lttc(task) .\nTy 11 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nel > 13 end\n¥ phone_desig... U 3 I\n¥ tasks_design... U 15 def 1list\nopec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end b\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context “\"when we complete a task\" do\nmain® (Y s Spe E\n"
  },
  {
    "seconds": 784,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize N\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a o examples, 0 failures\n> 04_single_met... * S _ 07_single_class_design » I\n> 05_debugging_1 * 6 def add(task)\n108 single clea 8 7 @tasks << task\nv 07_single_clas... * $ ond\ni . 1; def complete(task)\nef complete(tas\n:m;t:o:: 1 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nel > 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def 1list\nbl \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end b\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n— 0 A C % Spel .\n"
  },
  {
    "seconds": 785,
    "text": "[ N 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design -+ rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize N\n> 02_testing_bites ® 3 @tasks =[] i;mshed in ©.01335 seconds (files took 0.13759 seconds to load)\nke S a o examples, 0 failures\n> 04_single_met... * S _ 07_single_class_design » I\n> 05_debugging_1 * 6 def add(task)\n108 single clea 8 7 @tasks << task\nv 07_single_clas... * $ ond\ni . 1; def complete(task)\nef complete(tas\n:m;t:o:: 1 fail \"No such task.\" unless @tasks.include? task\no 12 @tasks.delete(task)\nel > 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def 1list\nbl \" 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper.... U 18 end\n@ todo_list_sp... U 19\n.rspec u\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end b\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [“Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n— 0 A C % Spel .\n"
  },
  {
    "seconds": 786,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch E 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 S P e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o nd\ns . 13 def complete(task)\nef complete(tas\n::’:;'el:\":: 1 fail \"No such task.” unless @tasks.include? task\n— 12 @tasks.delete(task)\npaic e 2 13 end 1\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nMepec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\nrspec v\nGemtile v @ todo_list_spec.rb U\nGemfile.lock 7] 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end Ll\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0OAO s Spe! s\n"
  },
  {
    "seconds": 787,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch E 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 S P e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o nd\ns . 13 def complete(task)\nef complete(tas\n::’:;'el:\":: 1 fail \"No such task.” unless @tasks.include? task\n— 12 @tasks.delete(task)\npaic e 2 13 end 1\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nMepec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\nrspec v\nGemtile v @ todo_list_spec.rb U\nGemfile.lock 7] 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end Ll\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0OAO s Spe! s\n"
  },
  {
    "seconds": 788,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch E 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 S P e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o nd\ns . 13 def complete(task)\nef complete(tas\n::’:;'el:\":: 1 fail \"No such task.” unless @tasks.include? task\n— 12 @tasks.delete(task)\npaic e 2 13 end 1\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nMepec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\nrspec v\nGemtile v @ todo_list_spec.rb U\nGemfile.lock 7] 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end Ll\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0OAO s Spe! s\n"
  },
  {
    "seconds": 789,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch E 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 S P e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o nd\ns . 13 def complete(task)\nef complete(tas\n::’:;'el:\":: 1 fail \"No such task.” unless @tasks.include? task\n— 12 @tasks.delete(task)\npaic e 2 13 end 1\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nMepec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\nrspec v\nGemtile v @ todo_list_spec.rb U\nGemfile.lock 7] 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end Ll\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0OAO s Spe! s\n"
  },
  {
    "seconds": 790,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U 2sh X +- M8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch E 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 @tasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 S P e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o nd\ns . 13 def complete(task)\nef complete(tas\n::’:;'el:\":: 1 fail \"No such task.” unless @tasks.include? task\n— 12 @tasks.delete(task)\npaic e 2 13 end 1\n¥ phone_desig... U 14\n¥ tasks_design... U 15 def list\nMepec o 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp... U 19\nrspec v\nGemtile v @ todo_list_spec.rb U\nGemfile.lock 7] 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end Ll\n18\n19 context “given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car”, \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® 0OAO s Spe! s\n"
  },
  {
    "seconds": 791,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 o e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o snc\nb . 1; def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n—_— 12 @tasks.delete(task)\nRope. 3 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\nJrspec v\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [“\"Wash the car\"]\n16 end\n17 end LY\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® ) % Spe >\n"
  },
  {
    "seconds": 792,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 o e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o snc\nb . 1; def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n—_— 12 @tasks.delete(task)\nRope. 3 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\nJrspec v\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [“\"Wash the car\"]\n16 end\n17 end LY\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® ) % Spe >\n"
  },
  {
    "seconds": 793,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 o e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o snc\nb . 1; def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n—_— 12 @tasks.delete(task)\nRope. 3 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\nJrspec v\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [“\"Wash the car\"]\n16 end\n17 end LY\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® ) % Spe >\n"
  },
  {
    "seconds": 794,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 o e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o snc\nb . 1; def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n—_— 12 @tasks.delete(task)\nRope. 3 13 end 1\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\nJrspec v\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [“\"Wash the car\"]\n16 end\n17 end LY\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® ) % Spe >\n"
  },
  {
    "seconds": 795,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design » rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites 3 etasks = [] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 o e a ond 13 examples, @ failures\n> 04_single_met... * 5 __ 07_single_class_design » I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o snc\nb . 1; def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n—_— 12 @tasks.delete(task)\nRope. 3 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list 1\npGepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\nJrspec v\nGemiile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [“\"Wash the car\"]\n16 end\n17 end LY\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\nmain® ) % Spe >\n"
  },
  {
    "seconds": 796,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 02 akgia mat e a ond 13 examples, @ failures\n> 04_single_met... * 5 | 07_single_class_design - I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o anc\nM . 1: def complete(task)\nef complete(tas\n::::eli:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nNP % 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGpec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\nrspec v I\nGemtile v @ todo_list_spec.rb U\nGemfile.lock [V} 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end -\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  },
  {
    "seconds": 797,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 02 akgia mat e a ond 13 examples, @ failures\n> 04_single_met... * 5 _ 07_single_class_design -+ I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o anc\nM . 1: def complete(task)\nef complete(tas\n::::eli:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nNP % 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGpec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\n.rspec v —_—_— 3\nGemtile v @ todo_list_spec.rb U\nGemfile.lock [V} 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end -\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  },
  {
    "seconds": 798,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 02 akgia mat e a ond 13 examples, @ failures\n> 04_single_met... * 5 _ 07_single_class_design -+ I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o anc\nM . 1: def complete(task)\nef complete(tas\n::::eli:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nNP % 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGpec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\n.rspec v —_—_— 3\nGemtile v @ todo_list_spec.rb U\nGemfile.lock [V} 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end -\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  },
  {
    "seconds": 799,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 02 akgia mat e a ond 13 examples, @ failures\n> 04_single_met... * 5 _ 07_single_class_design -+ I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o anc\nM . 1: def complete(task)\nef complete(tas\n::::eli:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nNP % 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGpec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nrspec v @\nGemtile v @ todo_list_spec.rb U\nGemfile.lock [V} 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end -\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  },
  {
    "seconds": 800,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodoList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 02 akgia mat e a ond 13 examples, @ failures\n> 04_single_met... * 5 | 07_single_class_design - I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... ® 7 @tasks << task ‘\nv 07_single_clas... ® o anc\nM . 1: def complete(task)\nef complete(tas\n::::eli:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task) I\nNP % 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\npGpec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18 end\n@ todo_list_sp.. U 19\nrspec v\nGemtile v @ todo_list_spec.rb U\nGemfile.lock [V} 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “given a task\" do\n> 09_multi_class... * 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end -\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  },
  {
    "seconds": 801,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodolList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 ot e e a ond 13 examples, @ failures\n> 04_single_met... * 5 _ 07_single_class_design - I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o anc\nb . 1: def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nRAeRe. 3 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\nNaepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nJrspec v\nGemile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  },
  {
    "seconds": 802,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodolList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 ot e e a ond 13 examples, @ failures\n> 04_single_met... * 5 _ 07_single_class_design -+ I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o anc\nb . 1: def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nb 5 13 end\n¥ phone_desig... U 1 X\n¥ tasks_design... U 15 def list\nNaepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19\nJrspec v\nGemile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  },
  {
    "seconds": 803,
    "text": "eoe 2sh — rspec_setup 08\n@ EXPLORER ¥ tasks_design.md U @ todo_list.rb U zsh X +- D8 -\nv RSPEC_SETUP 07_single_class_design > lib > @ todo_list.rb 07_single_class_design - rspec\n> 00_scratch B 1 class TodolList\n> 01_intro_and_git 2 def initialize\n> 02_testing_bites ® 3 etasks =[] Finished in 0.01335 seconds (files took 0.13759 seconds to load)\no8 ot e e a ond 13 examples, @ failures\n> 04_single_met... * 5 . 07_single_class_design - I\n> 05_debugging_1 ® 6 def add(task)\n> 06_single_clas... 7 @tasks << task\nv 07_single_clas... ® o anc\nb . 1: def complete(task)\nef complete(tas\n:mi:o:: 1 fail \"No such task.\" unless @tasks.include? task\n— 12 @tasks.delete(task)\nRAeRe. 3 13 end\n¥ phone_desig... U 1\n¥ tasks_design... U 15 def list\nNaepec - 16 return @tasks\n@ phone_book... U 17 end\n@ spec_helper... U 18  end\n@ todo_list_sp... U 19 S\nJrspec v\nGemile v @ todo_list_spec.rb U\nGemfile.lock U 07_single_class_design > spec > @ todo_list_spec.rb\n> 08_debugging... * 11 context “\"given a task\" do\n> 09_multi_class... » 12 it \"has the task in the list\" do\n> 10_multi_class... * 13 todo_list = TodoList.new\n14 todo_list.add(\"Wash the car\")\n15 expect(todo_list.list).to eq [\"Wash the car\"]\n16 end\n17 end L\n18\n19 context “\"given two tasks\" do\n20 it \"has both tasks in the list\" do\n21 todo_list = TodoList.new\n22 todo_list.add(\"Wash the car\")\n23 todo_list.add(\"Wash the dog\")\n24 expect(todo_list.list).to eq [\"Wash the car\", \"Wash the dog\"]\n25 end\n26 end\n27\n> TIMELINE 28 context \"when we complete a task\" do\n=== NG % Spe .\n"
  }
]